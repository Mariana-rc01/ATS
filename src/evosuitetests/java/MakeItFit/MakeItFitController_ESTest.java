/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 20:15:45 GMT 2025
 */

package MakeItFit;

import java.io.FileNotFoundException;
import java.util.UUID;

import MakeItFit.MakeItFitController;
import MakeItFit.users.Gender;
import MakeItFit.utils.MakeItFitDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true,
                     useVFS                = true,
                     useVNET               = true,
                     resetStaticState      = true,
                     useJEE                = true)
public class MakeItFitController_ESTest extends MakeItFitController_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        MakeItFitDate       makeItFitDate0       = new MakeItFitDate();
        MakeItFitDate       makeItFitDate1       = makeItFitDate0.plusDays(0);
        // Undeclared exception!
        try {
            makeItFitController0.executeQuerywhoBurnsMoreCalories(makeItFitDate1, makeItFitDate0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid dates.
            //
            verifyException("MakeItFit.queries.WhoBurnsMoreCalories", e);
        }
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        try {
            makeItFitController0.updateSystemDate((-1013));
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Days must be a positive number.
            //
            verifyException("MakeItFit.time.TimeManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        // Undeclared exception!
        try {
            makeItFitController0.saveSystem((String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.io.File", e);
        }
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        // Undeclared exception!
        try {
            makeItFitController0.login((String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        // Undeclared exception!
        try {
            makeItFitController0.loadSystem((String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        MakeItFitDate       makeItFitDate0       = new MakeItFitDate();
        MakeItFitDate       makeItFitDate1       = makeItFitDate0.plusDays(843);
        // Undeclared exception!
        try {
            makeItFitController0.executeQueryWhoDidTheMostActivities(makeItFitDate0,
                                                                     makeItFitDate1);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.MakeItFitController", e);
        }
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        MakeItFitDate       makeItFitDate0       = new MakeItFitDate();
        MakeItFitDate       makeItFitDate1       = makeItFitDate0.plusDays((-1350));
        // Undeclared exception!
        try {
            makeItFitController0.executeQueryHowManyKMsDone(makeItFitDate1, makeItFitDate0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email no email does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        makeItFitController0.setNewEmail((String) null);
        // Undeclared exception!
        try {
            makeItFitController0.executeQueryHowManyKMsDone();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        MakeItFitDate       makeItFitDate0       = new MakeItFitDate();
        MakeItFitDate       makeItFitDate1       = makeItFitDate0.plusDays((-1617));
        // Undeclared exception!
        try {
            makeItFitController0.executeQueryHowManyAltimetryDone(makeItFitDate1, makeItFitDate0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email no email does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        Gender              gender0              = Gender.Female;
        try {
            makeItFitController0.createUser("MakeItFit.MakeItFitController",
                                            0,
                                            gender0,
                                            0,
                                            0,
                                            2,
                                            839,
                                            "MakeItFit.utils.MakeItFitDate",
                                            "MakeItFit.MakeItFitController",
                                            2,
                                            "MakeItFit.MakeItFitController");
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // MakeItFit.MakeItFitController
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        Gender              gender0              = Gender.Male;
        // Undeclared exception!
        try {
            makeItFitController0.createUser("S)8o)mduw'",
                                            2321,
                                            gender0,
                                            2321,
                                            2321,
                                            2321,
                                            2321,
                                            "",
                                            "Z>xnpk|",
                                            1,
                                            (String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        MakeItFitDate       makeItFitDate0       = new MakeItFitDate();
        // Undeclared exception!
        try {
            makeItFitController0.addActivityToUser(makeItFitDate0,
                                                   (-1),
                                                   "$KM~j2,F9'",
                                                   "[g",
                                                   (-1),
                                                   (-1),
                                                   (double) (-1));
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email no email does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        MakeItFitDate       makeItFitDate0       = new MakeItFitDate();
        // Undeclared exception!
        try {
            makeItFitController0.addActivityToUser(makeItFitDate0,
                                                   267,
                                                   " meters, Elevation Loss: ",
                                                   "5P",
                                                   267,
                                                   681);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email no email does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        MakeItFitDate       makeItFitDate0       = new MakeItFitDate();
        // Undeclared exception!
        try {
            makeItFitController0.addActivityToUser(makeItFitDate0,
                                                   0,
                                                   "S]k^p5",
                                                   "Caloric Waste: ",
                                                   (-20.1112613),
                                                   (-3297.5865588905626),
                                                   (double) 0,
                                                   0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email no email does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        MakeItFitDate       makeItFitDate0       = new MakeItFitDate();
        // Undeclared exception!
        try {
            makeItFitController0.addActivityToUser(makeItFitDate0,
                                                   (-575),
                                                   "s8-|)PE",
                                                   "s8-|)PE",
                                                   (-976.75546933891),
                                                   0.0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email no email does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        MakeItFitDate       makeItFitDate0       = new MakeItFitDate();
        // Undeclared exception!
        try {
            makeItFitController0
                .addActivityToTrainingPlan(makeItFitDate0, 0, "", "|O", (-540), (-1557), (-540));
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email no email does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        MakeItFitDate       makeItFitDate0       = new MakeItFitDate();
        // Undeclared exception!
        try {
            makeItFitController0.addActivityToTrainingPlan(makeItFitDate0,
                                                           513,
                                                           "`2X3#JFthy=s/#R",
                                                           "`2X3#JFthy=s/#R",
                                                           513,
                                                           (-1354),
                                                           (double) 513,
                                                           513);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email no email does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        MakeItFitDate       makeItFitDate0       = new MakeItFitDate();
        // Undeclared exception!
        try {
            makeItFitController0.addActivityToTrainingPlan(makeItFitDate0,
                                                           0,
                                                           "NO EMAIL",
                                                           "NO EMAIL",
                                                           (double) 0,
                                                           0.0,
                                                           0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email no email does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        MakeItFitDate       makeItFitDate0       = new MakeItFitDate();
        // Undeclared exception!
        try {
            makeItFitController0.addActivityToTrainingPlan(makeItFitDate0,
                                                           1,
                                                           "FJ{lo]@",
                                                           "/7",
                                                           1681.5095212356985,
                                                           1681.5095212356985,
                                                           0.0,
                                                           0,
                                                           (-743));
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email no email does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        try {
            makeItFitController0.login("ygV+=Q}");
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // ygV+=Q}
            //
            verifyException("MakeItFit.MakeItFitController", e);
        }
    }

    @Test(timeout = 4000)
    public void test20() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        // Undeclared exception!
        try {
            makeItFitController0.getActivities();
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no email
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        String              string0              = makeItFitController0.getName();
        assertEquals("NO EMAIL", makeItFitController0.getEmail());
        assertEquals("NO NAME", string0);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        try {
            makeItFitController0.setEmail("");
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            //
            //
            verifyException("MakeItFit.MakeItFitController", e);
        }
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        Gender              gender0              = Gender.Other;
        try {
            makeItFitController0.createUser("/5@yXb1=",
                                            (-1884),
                                            gender0,
                                            (-1884),
                                            696,
                                            (-1),
                                            (-1),
                                            "/5@yXb1=",
                                            "/5@yXb1=",
                                            (-1884),
                                            "/5@yXb1=");
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid input: age, weight, height, bpm, and level must be non-negative.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test24() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        makeItFitController0.executeQueryMostDoneActivity();
        assertEquals("NO EMAIL", makeItFitController0.getEmail());
        assertEquals("NO NAME", makeItFitController0.getName());
    }

    @Test(timeout = 4000)
    public void test25() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        // Undeclared exception!
        try {
            makeItFitController0.updateBpm((-556));
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email no email does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test26() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        MakeItFitDate       makeItFitDate0       = new MakeItFitDate();
        // Undeclared exception!
        try {
            makeItFitController0.createTrainingPlan(makeItFitDate0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email no email does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test27() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        UUID                uUID0                = MockUUID.fromString("X!(B;iPX-ML?pzu/!");
        // Undeclared exception!
        try {
            makeItFitController0.removeActivityFromUser(uUID0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no email
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test28() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        // Undeclared exception!
        try {
            makeItFitController0.executeQuerywhoBurnsMoreCalories();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.MakeItFitController", e);
        }
    }

    @Test(timeout = 4000)
    public void test29() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        makeItFitController0.removeTrainingPlan();
        assertEquals("NO EMAIL", makeItFitController0.getEmail());
        assertEquals("NO NAME", makeItFitController0.getName());
    }

    @Test(timeout = 4000)
    public void test30() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        // Undeclared exception!
        try {
            makeItFitController0.updateLevel((-1364));
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email no email does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test31() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        // Undeclared exception!
        try {
            makeItFitController0.updateName("oT4nH+h]0uN(t");
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email no email does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test32() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        MakeItFitDate       makeItFitDate0       = new MakeItFitDate();
        // Undeclared exception!
        try {
            makeItFitController0.executeQueryHowManyKMsDone(makeItFitDate0, makeItFitDate0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid dates.
            //
            verifyException("MakeItFit.queries.HowManyKMsDone", e);
        }
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        try {
            makeItFitController0.saveSystem("MakeItFit.MakeItFitController");
            fail("Expecting exception: FileNotFoundException");

        } catch (FileNotFoundException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.MakeItFit", e);
        }
    }

    @Test(timeout = 4000)
    public void test34() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        // Undeclared exception!
        try {
            makeItFitController0.updateAddress("NO EMAIL");
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email no email does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test35() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        // Undeclared exception!
        try {
            makeItFitController0.executeQueryMostDemandingTrainingPlan();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.MakeItFitController", e);
        }
    }

    @Test(timeout = 4000)
    public void test36() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        // Undeclared exception!
        try {
            makeItFitController0.updateHeight(17);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email no email does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test37() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        // Undeclared exception!
        try {
            makeItFitController0.updateWeight(575.99F);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email no email does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test38() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        try {
            makeItFitController0.loadSystem("NO EMAIL");
            fail("Expecting exception: FileNotFoundException");

        } catch (FileNotFoundException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.MakeItFit", e);
        }
    }

    @Test(timeout = 4000)
    public void test39() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        // Undeclared exception!
        try {
            makeItFitController0.getUserDetails();
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email no email does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test40() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        MakeItFitDate       makeItFitDate0       = new MakeItFitDate();
        // Undeclared exception!
        try {
            makeItFitController0.executeQueryHowManyAltimetryDone(makeItFitDate0, makeItFitDate0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid date.
            //
            verifyException("MakeItFit.queries.HowManyAltimetryDone", e);
        }
    }

    @Test(timeout = 4000)
    public void test41() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        // Undeclared exception!
        try {
            makeItFitController0.updatePhone(":,}[l7HZ");
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email no email does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test42() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        // Undeclared exception!
        try {
            makeItFitController0.executeQueryHowManyAltimetryDone();
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email no email does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test43() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        // Undeclared exception!
        try {
            makeItFitController0.executeQueryHowManyKMsDone();
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email no email does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        // Undeclared exception!
        try {
            makeItFitController0.updateAge((-2757));
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email no email does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test45() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        makeItFitController0.getAllUsers();
        assertEquals("NO EMAIL", makeItFitController0.getEmail());
        assertEquals("NO NAME", makeItFitController0.getName());
    }

    @Test(timeout = 4000)
    public void test46() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        // Undeclared exception!
        try {
            makeItFitController0.updateEmail("vAW)tad?aXPL8h");
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email vaw)tad?axpl8h does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test47() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        // Undeclared exception!
        try {
            makeItFitController0.constructTrainingPlanByObjectives(false, 1141, 0, 1141, 1141);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // Training with code null does not exist.
            //
            verifyException("MakeItFit.trainingPlan.TrainingPlanManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test48() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        // Undeclared exception!
        try {
            makeItFitController0.updateSystemDate(242);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email no email does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test49() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        UUID                uUID0                = MockUUID.randomUUID();
        // Undeclared exception!
        try {
            makeItFitController0.removeActivityFromTrainingPlan(uUID0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.trainingPlan.TrainingPlanManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test50() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        MakeItFitDate       makeItFitDate0       = new MakeItFitDate();
        // Undeclared exception!
        try {
            makeItFitController0.executeQueryWhoDidTheMostActivities(makeItFitDate0,
                                                                     makeItFitDate0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid dates.
            //
            verifyException("MakeItFit.queries.WhoDidTheMostActivities", e);
        }
    }

    @Test(timeout = 4000)
    public void test51() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        UUID                uUID0                = MockUUID.randomUUID();
        makeItFitController0.setTrainingPlan(uUID0);
        assertEquals("NO NAME", makeItFitController0.getName());
        assertEquals("NO EMAIL", makeItFitController0.getEmail());
    }

    @Test(timeout = 4000)
    public void test52() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        // Undeclared exception!
        try {
            makeItFitController0.executeQueryWhoDidTheMostActivities();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.MakeItFitController", e);
        }
    }

    @Test(timeout = 4000)
    public void test53() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        // Undeclared exception!
        try {
            makeItFitController0.removeUser();
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email no email does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test54() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        // Undeclared exception!
        try {
            makeItFitController0.getTrainingPlansFromUser();
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email no email does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        makeItFitController0.getTrainingPlans();
        assertEquals("NO NAME", makeItFitController0.getName());
        assertEquals("NO EMAIL", makeItFitController0.getEmail());
    }

    @Test(timeout = 4000)
    public void test56() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        Gender              gender0              = Gender.Female;
        // Undeclared exception!
        try {
            makeItFitController0.updateGender(gender0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email no email does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test57() throws Throwable {
        MakeItFitController makeItFitController0 = new MakeItFitController();
        String              string0              = makeItFitController0.getEmail();
        assertEquals("NO EMAIL", string0);
        assertEquals("NO NAME", makeItFitController0.getName());
    }
}
