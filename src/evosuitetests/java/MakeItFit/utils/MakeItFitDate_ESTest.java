/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 19:57:57 GMT 2025
 */

package MakeItFit.utils;

import java.time.DateTimeException;
import java.time.LocalDate;

import MakeItFit.utils.MakeItFitDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true,
                     useVFS                = true,
                     useVNET               = true,
                     resetStaticState      = true,
                     useJEE                = true)
public class MakeItFitDate_ESTest extends MakeItFitDate_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        MakeItFitDate makeItFitDate1 = makeItFitDate0.plusDays((-1270));
        boolean       boolean0       = makeItFitDate1.isAfter(makeItFitDate0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        MakeItFitDate makeItFitDate1 = makeItFitDate0.plusDays((-3571));
        boolean       boolean0       = makeItFitDate0.isAfterOrSame(makeItFitDate1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        MakeItFitDate makeItFitDate1 = makeItFitDate0.plusDays((-3571));
        boolean       boolean0       = makeItFitDate0.isBefore(makeItFitDate1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        MakeItFitDate makeItFitDate1 = makeItFitDate0.plusDays((-3571));
        boolean       boolean0       = makeItFitDate1.isBeforeOrSame(makeItFitDate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        try {
            MakeItFitDate.fromString("9vM/5a)DP*//KDP");
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // 9vM/5a)DP*_//KDP
            //
            verifyException("MakeItFit.utils.MakeItFitDate", e);
        }
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        try {
            MakeItFitDate.fromString("%02d/%02d/%04d");
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // %02d/%02d/%04d
            //
            verifyException("MakeItFit.utils.MakeItFitDate", e);
        }
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        MakeItFitDate makeItFitDate0 = MakeItFitDate.of(0, 2, 2);
        int           int0           = makeItFitDate0.getYear();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        MakeItFitDate makeItFitDate1 = makeItFitDate0.plusDays((-3571));
        MakeItFitDate makeItFitDate2 = makeItFitDate1.clone();
        boolean       boolean0       = makeItFitDate2.equals(makeItFitDate0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        MakeItFitDate makeItFitDate1 = makeItFitDate0.plusDays((-3571));
        int           int0           = makeItFitDate1.distance(makeItFitDate0);
        assertEquals(3571, int0);
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        MakeItFitDate makeItFitDate0 = MakeItFitDate.of(3, 3, 3);
        MakeItFitDate makeItFitDate1 = makeItFitDate0.plusDays(3);
        int           int0           = makeItFitDate1.compareTo(makeItFitDate0);
        assertEquals(3, int0);
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        MakeItFitDate makeItFitDate1 = makeItFitDate0.plusDays((-3571));
        int           int0           = makeItFitDate1.compareTo(makeItFitDate0);
        assertEquals((-10), int0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        // Undeclared exception!
        try {
            MakeItFitDate.of(0, (-1), 725);
            fail("Expecting exception: DateTimeException");

        } catch (DateTimeException e) {
            //
            // Invalid value for MonthOfYear (valid values 1 - 12): -1
            //
            verifyException("java.time.temporal.ValueRange", e);
        }
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        // Undeclared exception!
        try {
            makeItFitDate0.isBeforeOrSame((MakeItFitDate) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.utils.MakeItFitDate", e);
        }
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        // Undeclared exception!
        try {
            makeItFitDate0.isBefore((MakeItFitDate) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.utils.MakeItFitDate", e);
        }
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        // Undeclared exception!
        try {
            makeItFitDate0.isAfterOrSame((MakeItFitDate) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.utils.MakeItFitDate", e);
        }
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        // Undeclared exception!
        try {
            makeItFitDate0.isAfter((MakeItFitDate) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.utils.MakeItFitDate", e);
        }
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        // Undeclared exception!
        try {
            MakeItFitDate.fromString((String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.utils.MakeItFitDate", e);
        }
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        // Undeclared exception!
        try {
            makeItFitDate0.equals("");
            fail("Expecting exception: ClassCastException");

        } catch (ClassCastException e) {
            //
            // java.lang.String cannot be cast to MakeItFit.utils.MakeItFitDate
            //
            verifyException("MakeItFit.utils.MakeItFitDate", e);
        }
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        // Undeclared exception!
        try {
            makeItFitDate0.distance((MakeItFitDate) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.utils.MakeItFitDate", e);
        }
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        // Undeclared exception!
        try {
            makeItFitDate0.compareTo((MakeItFitDate) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.utils.MakeItFitDate", e);
        }
    }

    @Test(timeout = 4000)
    public void test20() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        LocalDate     localDate0     = makeItFitDate0.getDate();
        assertNotNull(localDate0);
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
        MakeItFitDate makeItFitDate0 = MakeItFitDate.of((-3571), 2, 6);
        int           int0           = makeItFitDate0.getYear();
        assertEquals((-3571), int0);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        int           int0           = makeItFitDate0.getMonth();
        assertEquals(2, int0);
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        int           int0           = makeItFitDate0.getDayOfMonth();
        assertEquals(14, int0);
    }

    @Test(timeout = 4000)
    public void test24() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        int           int0           = makeItFitDate0.compareTo(makeItFitDate0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test25() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        int           int0           = makeItFitDate0.getYear();
        assertEquals(2014, int0);
    }

    @Test(timeout = 4000)
    public void test26() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        boolean       boolean0       = makeItFitDate0.isAfterOrSame(makeItFitDate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test27() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        MakeItFitDate makeItFitDate1 = makeItFitDate0.plusDays((-3557));
        boolean       boolean0       = makeItFitDate1.isAfterOrSame(makeItFitDate0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test28() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        MakeItFitDate makeItFitDate1 = makeItFitDate0.plusDays((-3557));
        boolean       boolean0       = makeItFitDate1.isBefore(makeItFitDate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test29() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        boolean       boolean0       = makeItFitDate0.isBefore(makeItFitDate0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test30() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        boolean       boolean0       = makeItFitDate0.isBeforeOrSame(makeItFitDate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test31() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        MakeItFitDate makeItFitDate1 = makeItFitDate0.plusDays((-3557));
        boolean       boolean0       = makeItFitDate0.isBeforeOrSame(makeItFitDate1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test32() throws Throwable {
        try {
            MakeItFitDate.fromString("(!");
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // (!
            //
            verifyException("MakeItFit.utils.MakeItFitDate", e);
        }
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        boolean       boolean0       = makeItFitDate0.equals(makeItFitDate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test34() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        // Undeclared exception!
        try {
            makeItFitDate0.equals((Object) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.utils.MakeItFitDate", e);
        }
    }

    @Test(timeout = 4000)
    public void test35() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        boolean       boolean0       = makeItFitDate0.isAfter(makeItFitDate0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test36() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        int           int0           = makeItFitDate0.distance(makeItFitDate0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test37() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        MakeItFitDate makeItFitDate1 = makeItFitDate0.plusDays(1947);
        boolean       boolean0       = makeItFitDate1.isAfter(makeItFitDate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test38() throws Throwable {
        MakeItFitDate makeItFitDate0 = MakeItFitDate.fromString("14/02/2014");
        assertNotNull(makeItFitDate0);
    }

    @Test(timeout = 4000)
    public void test39() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        int           int0           = makeItFitDate0.getDayOfWeek();
        assertEquals(5, int0);
    }

    @Test(timeout = 4000)
    public void test40() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        String        string0        = makeItFitDate0.toString();
        assertEquals("14/02/2014", string0);
    }
}
