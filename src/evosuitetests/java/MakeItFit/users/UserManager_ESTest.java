/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 20:20:10 GMT 2025
 */

package MakeItFit.users;

import java.util.List;
import java.util.UUID;

import MakeItFit.activities.Activity;
import MakeItFit.activities.implementation.PushUp;
import MakeItFit.activities.implementation.Running;
import MakeItFit.activities.implementation.WeightSquat;
import MakeItFit.users.Gender;
import MakeItFit.users.User;
import MakeItFit.users.UserManager;
import MakeItFit.users.types.Amateur;
import MakeItFit.users.types.Occasional;
import MakeItFit.users.types.Professional;
import MakeItFit.utils.MakeItFitDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true,
                     useVFS                = true,
                     useVNET               = true,
                     resetStaticState      = true,
                     useJEE                = true)
public class UserManager_ESTest extends UserManager_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        UserManager userManager0 = new UserManager();
        Gender      gender0      = Gender.Other;
        User        user0        = userManager0.createUser("Ouvasional",
                                             2715,
                                             gender0,
                                             2715,
                                             2715,
                                             2715,
                                             2715,
                                             "Elevation Gain: ",
                                             "Elevation Gain: ",
                                             "Professional",
                                             2715,
                                             "Professional");
        assertEquals("Ouvasional", user0.getName());
        assertEquals(2715, user0.getBpm());
        assertEquals(2715, user0.getHeight());
        assertEquals(2715, user0.getAge());
        assertEquals(2715, user0.getLevel());
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        UserManager userManager0 = new UserManager();
        Gender      gender0      = Gender.Female;
        Occasional  occasional0  = (Occasional) userManager0.createUser("f",
                                                                      11,
                                                                      gender0,
                                                                      1256.0F,
                                                                      168,
                                                                      168,
                                                                      356,
                                                                      "gKDZo%X`~?I",
                                                                      "}V|'R0za~Fw6",
                                                                      "LY_`",
                                                                      2260,
                                                                      "Occasional");
        assertEquals("gKDZo%X`~?I", occasional0.getAddress());
        assertEquals(2260, occasional0.getFrequency());
        assertEquals("}V|'R0za~Fw6", occasional0.getPhone());
        assertEquals("f", occasional0.getName());
        assertEquals(168, occasional0.getBpm());
        assertEquals(168, occasional0.getHeight());
        assertEquals(11, occasional0.getAge());
        assertEquals(356, occasional0.getLevel());
        assertEquals("LY_`", occasional0.getEmail());
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        UserManager userManager0 = new UserManager();
        Gender      gender0      = Gender.Male;
        User        user0 =
            userManager0.createUser(",", 0, gender0, 0, 0, 0, 1, ",", ",", ",", 0, "Professional");
        userManager0.insertUser(user0);
        User user1 = userManager0.getUserByEmail(",");
        assertEquals(0, user1.getBpm());
        assertEquals(0, user1.getAge());
        assertEquals(",", user1.getName());
        assertEquals(1, user1.getLevel());
        assertEquals(0, user1.getHeight());
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        UserManager userManager0 = new UserManager();
        Gender      gender0      = Gender.Male;
        User        user0 =
            userManager0
                .createUser(",", 0, gender0, 0, 988, 0, 0, ",", ",", ",", 0, "Professional");
        userManager0.insertUser(user0);
        User user1 = userManager0.getUserByEmail(",");
        assertEquals(988, user1.getHeight());
        assertEquals(0, user1.getLevel());
        assertEquals(0, user1.getAge());
        assertEquals(0, user1.getBpm());
        assertEquals(",", user1.getName());
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        UserManager userManager0 = new UserManager();
        Gender      gender0      = Gender.Male;
        User        user0 =
            userManager0
                .createUser(",", 13, gender0, 13, 0, 13, 0, ",", ",", ",", 13, "Professional");
        userManager0.insertUser(user0);
        User user1 = userManager0.getUserByEmail(",");
        assertEquals(13, user1.getAge());
        assertEquals(13, user1.getBpm());
        assertEquals(",", user1.getName());
        assertEquals(0, user1.getHeight());
        assertEquals(0, user1.getLevel());
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        UserManager userManager0 = new UserManager();
        Gender      gender0      = Gender.Male;
        User        user0 =
            userManager0.createUser(",", 0, gender0, 0, 0, 0, 0, ",", ",", ",", 0, "Professional");
        userManager0.insertUser(user0);
        List<User> list0 = userManager0.getAllUsers();
        assertFalse(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        UserManager userManager0 = new UserManager();
        // Undeclared exception!
        try {
            userManager0.updateUser((User) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        UserManager userManager0 = new UserManager();
        // Undeclared exception!
        try {
            userManager0.removeUserByEmail((String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        UserManager userManager0 = new UserManager();
        UUID        uUID0        = MockUUID.randomUUID();
        // Undeclared exception!
        try {
            userManager0.removeActivityFromUser((String) null, uUID0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        UserManager userManager0 = new UserManager();
        // Undeclared exception!
        try {
            userManager0.insertUser((User) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        UserManager userManager0 = new UserManager();
        // Undeclared exception!
        try {
            userManager0.getUserByEmail((String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        UserManager userManager0 = new UserManager();
        // Undeclared exception!
        try {
            userManager0.getActivitiesFromUser((String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        UserManager userManager0 = new UserManager();
        // Undeclared exception!
        try {
            userManager0.existsUserWithEmail((String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        UserManager userManager0 = new UserManager();
        Gender      gender0      = Gender.Female;
        // Undeclared exception!
        try {
            userManager0.createUser("JYTHD?J|>bN",
                                    6,
                                    gender0,
                                    6,
                                    0,
                                    0,
                                    224,
                                    "ubV",
                                    "6",
                                    "Jk:>J",
                                    (-3464),
                                    (String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {}
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        UserManager   userManager0   = new UserManager();
        UUID          uUID0          = MockUUID.fromString("tJ$U(@UsaZ");
        MakeItFitDate makeItFitDate0 = MakeItFitDate.of(1, 1, 1);
        WeightSquat   weightSquat0   = new WeightSquat(uUID0,
                                                   makeItFitDate0,
                                                   1,
                                                   "MakeItFit.users.User",
                                                   "",
                                                   1,
                                                   (-3764),
                                                   (-3764));
        // Undeclared exception!
        try {
            userManager0.addActivityToUser((String) null, weightSquat0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        UserManager userManager0 = new UserManager();
        Gender      gender0      = Gender.Male;
        Amateur     amateur0     = new Amateur("U`,kRd/ !4MkL-",
                                       2384,
                                       gender0,
                                       0,
                                       0,
                                       0,
                                       1,
                                       "U`,kRd/ !4MkL-",
                                       ",",
                                       "Professional");
        userManager0.insertUser(amateur0);
        userManager0.updateSystem();
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        UserManager userManager0 = new UserManager();
        Gender      gender0      = Gender.Male;
        User        user0 =
            userManager0.createUser(",", 0, gender0, 0, 0, 0, 0, ",", ",", ",", 0, "Professional");
        userManager0.insertUser(user0);
        userManager0.updateSystem();
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        UserManager userManager0 = new UserManager();
        Gender      gender0      = Gender.Other;
        Amateur amateur0 = new Amateur("SS", 1, gender0, 1, 1, 1, 1, "jq Z}", "kz3{*y", "kz3{*y");
        userManager0.insertUser(amateur0);
        UUID uUID0 = amateur0.getCode();
        userManager0.addActivitiesToUser(uUID0, amateur0.activities);
        assertEquals(1, amateur0.getLevel());
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        UserManager userManager0 = new UserManager();
        UUID        uUID0        = MockUUID.fromString("MakeItFit.users.UserManager");
        try {
            userManager0.addActivitiesToUser(uUID0, (List<Activity>) null);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with code 00000000-0100-4000-8200-000003000000 does not exist
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
        UserManager userManager0 = new UserManager();
        Gender      gender0      = Gender.Male;
        User        user0 =
            userManager0.createUser(",", 0, gender0, 0, 0, 0, 0, ",", ",", ",", 0, "Professional");
        UUID uUID0 = MockUUID.fromString(",");
        userManager0.insertUser(user0);
        userManager0.removeActivityFromUser(",", uUID0);
        assertEquals((-8_791_026_472_509_767_680L), uUID0.getLeastSignificantBits());
    }

    @Test(timeout = 4000)
    public void test20() throws Throwable {
        UserManager userManager0 = new UserManager();
        UUID        uUID0        = MockUUID.randomUUID();
        // Undeclared exception!
        try {
            userManager0.removeActivityFromUser("", uUID0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            //
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
        UserManager userManager0 = new UserManager();
        Gender      gender0      = Gender.Male;
        User        user0 =
            userManager0.createUser(",", 0, gender0, 0, 0, 0, 0, ",", ",", ",", 0, "Professional");
        UUID uUID0 = MockUUID.fromString(",");
        userManager0.insertUser(user0);
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Running       running0 =
            new Running(uUID0, makeItFitDate0, 0, ",", "pDKVF^tD{\"`ki0w A", 1, 1312.84255793);
        userManager0.addActivityToUser(",", running0);
        // Undeclared exception!
        try {
            userManager0.updateSystem();
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid calculateIndex arguments
            //
            verifyException("MakeItFit.users.User", e);
        }
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        UserManager   userManager0   = new UserManager();
        UUID          uUID0          = MockUUID.fromString("194lR,GOxm/vC+FCN");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        PushUp        pushUp0        = new PushUp(uUID0,
                                    makeItFitDate0,
                                    (-1054),
                                    "ys4SKRUj1A 4siVg8",
                                    "194lR,GOxm/vC+FCN",
                                    11,
                                    168);
        try {
            userManager0.addActivityToUser("=%H~", pushUp0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // =%h~
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        UserManager userManager0 = new UserManager();
        Gender      gender0      = Gender.Male;
        User        user0 =
            userManager0.createUser(",", 0, gender0, 0, 0, 0, 0, ",", ",", ",", 0, "Professional");
        userManager0.insertUser(user0);
        List<Activity> list0 = userManager0.getActivitiesFromUser(",");
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test24() throws Throwable {
        UserManager userManager0 = new UserManager();
        try {
            userManager0.getActivitiesFromUser("");
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            //
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test25() throws Throwable {
        UserManager userManager0 = new UserManager();
        Gender      gender0      = Gender.Other;
        Amateur amateur0 = new Amateur("SS", 2, gender0, 2, 2, 2, 2, "jq Z}", "kz3{*y", "kz3{*y");
        userManager0.insertUser(amateur0);
        amateur0.setEmail("SS");
        try {
            userManager0.updateUser(amateur0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email ss does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test26() throws Throwable {
        UserManager userManager0 = new UserManager();
        Gender      gender0      = Gender.Male;
        User        user0 =
            userManager0.createUser(",", 0, gender0, 0, 0, 0, 0, ",", ",", ",", 0, "Professional");
        userManager0.insertUser(user0);
        userManager0.updateUser(user0);
        assertEquals(0, user0.getAge());
        assertEquals(0, user0.getBpm());
        assertEquals(",", user0.getName());
    }

    @Test(timeout = 4000)
    public void test27() throws Throwable {
        UserManager  userManager0  = new UserManager();
        Gender       gender0       = Gender.Other;
        Professional professional0 = new Professional("Occasional",
                                                      118,
                                                      gender0,
                                                      118,
                                                      7,
                                                      118,
                                                      7,
                                                      "Occasional",
                                                      "Occasional",
                                                      "Occasional",
                                                      7);
        try {
            userManager0.updateUser(professional0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with code 00000000-0100-4000-8200-000003000000 does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test28() throws Throwable {
        UserManager userManager0 = new UserManager();
        try {
            userManager0.getUserByEmail("user with email ");
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email user with email  does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test29() throws Throwable {
        UserManager userManager0 = new UserManager();
        UUID        uUID0        = MockUUID.randomUUID();
        try {
            userManager0.getUserByCode(uUID0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with code 00000000-0100-4000-8200-000003000000 does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test30() throws Throwable {
        UserManager userManager0 = new UserManager();
        Gender      gender0      = Gender.Other;
        Amateur amateur0 = new Amateur("SS", 1, gender0, 1, 1, 1, 1, "jq Z}", "kz3{*y", "kz3{*y");
        userManager0.insertUser(amateur0);
        UUID uUID0 = amateur0.getCode();
        User user0 = userManager0.getUserByCode(uUID0);
        assertEquals(1, user0.getAge());
    }

    @Test(timeout = 4000)
    public void test31() throws Throwable {
        UserManager userManager0 = new UserManager();
        Gender      gender0      = Gender.Other;
        Amateur amateur0 = new Amateur("SS", 1, gender0, 1, 1, 1, 1, "jq Z}", "kz3{*y", "kz3{*y");
        userManager0.insertUser(amateur0);
        boolean boolean0 = userManager0.existsUserWithEmail("kz3{*y");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test32() throws Throwable {
        UserManager userManager0 = new UserManager();
        boolean     boolean0     = userManager0.existsUserWithEmail(",");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        UserManager userManager0 = new UserManager();
        Gender      gender0      = Gender.Other;
        Amateur amateur0 = new Amateur("SS", 1, gender0, 1, 1, 1, 1, "jq Z}", "kz3{*y", "kz3{*y");
        userManager0.insertUser(amateur0);
        userManager0.removeUserByEmail("kz3{*y");
    }

    @Test(timeout = 4000)
    public void test34() throws Throwable {
        UserManager userManager0 = new UserManager();
        try {
            userManager0.removeUserByEmail("MakeItFit.u+ers.Gender");
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email makeitfit.u+ers.gender does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test35() throws Throwable {
        UserManager userManager0 = new UserManager();
        Gender      gender0      = Gender.Male;
        Amateur     amateur0     = new Amateur("U`,kRd/ !4MkL-",
                                       2384,
                                       gender0,
                                       0,
                                       0,
                                       0,
                                       1,
                                       "U`,kRd/ !4MkL-",
                                       ",",
                                       "Professional");
        userManager0.insertUser(amateur0);
        UUID uUID0 = amateur0.getCode();
        userManager0.removeUserByCode(uUID0);
        assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
    }

    @Test(timeout = 4000)
    public void test36() throws Throwable {
        UserManager userManager0 = new UserManager();
        UUID        uUID0        = MockUUID.fromString(",");
        try {
            userManager0.removeUserByCode(uUID0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with code 00000000-0100-4000-8200-000003000000 does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test37() throws Throwable {
        UserManager userManager0 = new UserManager();
        Gender      gender0      = Gender.Other;
        Amateur amateur0 = new Amateur("SS", 1, gender0, 1, 1, 1, 1, "jq Z}", "kz3{*y", "kz3{*y");
        userManager0.insertUser(amateur0);
        amateur0.setEmail("K\"fu");
        try {
            userManager0.insertUser(amateur0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with code 00000000-0100-4000-8200-000003000000 already exists.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test38() throws Throwable {
        UserManager userManager0 = new UserManager();
        Gender      gender0      = Gender.Male;
        try {
            userManager0.createUser("=", 0, gender0, 0, 0, 0, 0, "=", "=", "=", 0, "c^k!K`Kg&\"");
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // c^k!K`Kg&\"
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test39() throws Throwable {
        UserManager userManager0 = new UserManager();
        Gender      gender0      = Gender.Other;
        Occasional  occasional0  = (Occasional) userManager0.createUser("Occasional",
                                                                      13,
                                                                      gender0,
                                                                      13,
                                                                      1256,
                                                                      13,
                                                                      1256,
                                                                      "Occasional",
                                                                      "",
                                                                      "Occasional",
                                                                      2,
                                                                      "Occasional");
        assertEquals(1256, occasional0.getLevel());
        assertEquals(2, occasional0.getFrequency());
        assertEquals("", occasional0.getPhone());
        assertEquals("Occasional", occasional0.getAddress());
        assertEquals(1256, occasional0.getHeight());
        assertEquals("Occasional", occasional0.getEmail());
        assertEquals(13, occasional0.getAge());
        assertEquals(13, occasional0.getBpm());
        assertEquals("Occasional", occasional0.getName());
    }

    @Test(timeout = 4000)
    public void test40() throws Throwable {
        UserManager userManager0 = new UserManager();
        Gender      gender0      = Gender.Male;
        User        user0 =
            userManager0.createUser(",", 0, gender0, 0, 0, 0, 0, ",", ",", ",", 0, "Professional");
        userManager0.insertUser(user0);
        try {
            userManager0.insertUser(user0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email , already exists.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test41() throws Throwable {
        UserManager userManager0 = new UserManager();
        Gender      gender0      = Gender.Other;
        try {
            userManager0.createUser(",", 0, gender0, 0, 0, 0, (-7), ",", ",", ",", 0, "h|]A`");
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid input: age, weight, height, bpm, and level must be non-negative.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test42() throws Throwable {
        UserManager userManager0 = new UserManager();
        Gender      gender0      = Gender.Male;
        try {
            userManager0.createUser("5F&e-n@din:yev",
                                    0,
                                    gender0,
                                    0,
                                    0,
                                    (-291),
                                    0,
                                    "5F&e-n@din:yev",
                                    "t]7H}D6xm'Fm!uwS",
                                    "|:a8|",
                                    (-291),
                                    "t]7H}D6xm'Fm!uwS");
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid input: age, weight, height, bpm, and level must be non-negative.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test43() throws Throwable {
        UserManager userManager0 = new UserManager();
        Gender      gender0      = Gender.Other;
        try {
            userManager0.createUser("Expected Duration: ",
                                    1073,
                                    gender0,
                                    1073,
                                    (-2143),
                                    (-2143),
                                    (-2143),
                                    "%",
                                    "Expected Duration: ",
                                    "S)D,>9",
                                    1073,
                                    "Expected Duration: ");
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid input: age, weight, height, bpm, and level must be non-negative.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        UserManager userManager0 = new UserManager();
        Gender      gender0      = Gender.Female;
        try {
            userManager0.createUser("5F&e-n@dUn:yev",
                                    0,
                                    gender0,
                                    (-11.620108F),
                                    0,
                                    0,
                                    0,
                                    "5F&e-n@dUn:yev",
                                    "5F&e-n@dUn:yev",
                                    "5F&e-n@dUn:yev",
                                    15,
                                    "5F&e-n@dUn:yev");
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid input: age, weight, height, bpm, and level must be non-negative.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test45() throws Throwable {
        UserManager userManager0 = new UserManager();
        Gender      gender0      = Gender.Female;
        try {
            userManager0.createUser("_K^rMR|isdP",
                                    (-1),
                                    gender0,
                                    82.45F,
                                    (-1090),
                                    1,
                                    6379,
                                    "",
                                    "",
                                    "LeNj",
                                    6379,
                                    "LeNj");
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid input: age, weight, height, bpm, and level must be non-negative.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test46() throws Throwable {
        UserManager userManager0 = new UserManager();
        Gender      gender0      = Gender.Other;
        try {
            userManager0.createUser(")A@cKOp9bg",
                                    4,
                                    gender0,
                                    4,
                                    4,
                                    4,
                                    (-11),
                                    "ZvZ4KHIZ#/o",
                                    "R,",
                                    (String) null,
                                    4,
                                    "R,");
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid input: name, address, phone, or email cannot be null.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test47() throws Throwable {
        UserManager userManager0 = new UserManager();
        Gender      gender0      = Gender.Male;
        try {
            userManager0.createUser("NmevANz}N-IP",
                                    4,
                                    gender0,
                                    4,
                                    1_840_700_269,
                                    (-15),
                                    4,
                                    "NmevANz}N-IP",
                                    (String) null,
                                    "{+p`GK5",
                                    4,
                                    "NmevANz}N-IP");
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid input: name, address, phone, or email cannot be null.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test48() throws Throwable {
        UserManager userManager0 = new UserManager();
        Gender      gender0      = Gender.Female;
        try {
            userManager0.createUser("+q&SRDV?:\"J]iIRK'=",
                                    (-1_450_067_606),
                                    gender0,
                                    (-1_450_067_606),
                                    (-875),
                                    (-1_450_067_606),
                                    0,
                                    (String) null,
                                    (String) null,
                                    "<*1LPMkBs+jhT",
                                    0,
                                    "<*1LPMkBs+jhT");
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid input: name, address, phone, or email cannot be null.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test49() throws Throwable {
        UserManager userManager0 = new UserManager();
        Gender      gender0      = Gender.Other;
        User        user0        = userManager0.createUser("Expected Duration: ",
                                             466,
                                             gender0,
                                             2853.072F,
                                             12,
                                             12,
                                             7,
                                             "User with email ",
                                             "User with email ",
                                             ",N\"qM&X0gJ{Njb4",
                                             7,
                                             "Amateur");
        assertEquals(7, user0.getLevel());
        assertEquals(466, user0.getAge());
        assertEquals(",N\"qM&X0gJ{Njb4", user0.getEmail());
        assertEquals("Expected Duration: ", user0.getName());
        assertEquals("User with email ", user0.getAddress());
        assertEquals(12, user0.getHeight());
        assertEquals(12, user0.getBpm());
        assertEquals("User with email ", user0.getPhone());
    }

    @Test(timeout = 4000)
    public void test50() throws Throwable {
        UserManager userManager0 = new UserManager();
        Gender      gender0      = Gender.Other;
        try {
            userManager0.createUser((String) null,
                                    (-424),
                                    gender0,
                                    (-655.33F),
                                    (-424),
                                    (-424),
                                    (-424),
                                    (String) null,
                                    (String) null,
                                    (String) null,
                                    (-424),
                                    (String) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid input: name, address, phone, or email cannot be null.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test51() throws Throwable {
        UserManager userManager0 = new UserManager();
        List<User>  list0        = userManager0.getAllUsers();
        assertEquals(0, list0.size());
    }
}
