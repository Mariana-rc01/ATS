/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 20:17:55 GMT 2025
 */

package MakeItFit.users.types;

import java.util.UUID;

import MakeItFit.activities.implementation.Trail;
import MakeItFit.users.Gender;
import MakeItFit.users.types.Professional;
import MakeItFit.utils.MakeItFitDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true,
                     useVFS                = true,
                     useVNET               = true,
                     resetStaticState      = true,
                     useJEE                = true)
public class Professional_ESTest extends Professional_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Gender       gender0       = Gender.Male;
        Professional professional0 = new Professional("\n====================\n",
                                                      1313,
                                                      gender0,
                                                      1313,
                                                      1313,
                                                      1313,
                                                      1313,
                                                      "\n====================\n",
                                                      "\n====================\n",
                                                      "\n====================\n",
                                                      1313);
        Professional professional1 = new Professional(professional0);
        professional1.setFrequency(740);
        boolean boolean0 = professional0.equals(professional1);
        assertEquals(740, professional1.getFrequency());
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        Gender       gender0       = Gender.Female;
        Professional professional0 = new Professional((String) null,
                                                      3411,
                                                      gender0,
                                                      3411,
                                                      0,
                                                      4,
                                                      0,
                                                      (String) null,
                                                      (String) null,
                                                      ",/$7$",
                                                      4);
        assertEquals("No specialization", professional0.getSpecialization());

        professional0.setSpecialization((String) null);
        professional0.getSpecialization();
        assertEquals(4, professional0.getFrequency());
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        Gender       gender0 = Gender.Male;
        Professional professional0 =
            new Professional("", 0, gender0, 0.0F, 808, 808, 0, "", "", "", 0);
        assertEquals("No specialization", professional0.getSpecialization());

        professional0.setSpecialization("");
        professional0.getSpecialization();
        assertEquals(0, professional0.getFrequency());
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        Gender       gender0       = Gender.Other;
        Professional professional0 = new Professional("Frequency must be a non-negative integer",
                                                      0,
                                                      gender0,
                                                      1989.8385F,
                                                      0,
                                                      0,
                                                      0,
                                                      "Frequency must be a non-negative integer",
                                                      "Frequency must be a non-negative integer",
                                                      "",
                                                      0);
        int          int0          = professional0.getFrequency();
        assertEquals("No specialization", professional0.getSpecialization());
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        Gender       gender0       = Gender.Other;
        Professional professional0 = new Professional("Frequency must be a non-negative integer",
                                                      0,
                                                      gender0,
                                                      1989.8385F,
                                                      0,
                                                      0,
                                                      0,
                                                      "Frequency must be a non-negative integer",
                                                      "Frequency must be a non-negative integer",
                                                      "",
                                                      0);
        Professional professional1 = professional0.clone();
        assertEquals("No specialization", professional1.getSpecialization());
        assertEquals(0, professional1.getFrequency());
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        Gender       gender0 = Gender.Male;
        Professional professional0 =
            new Professional("", 0, gender0, 0.0F, 808, 808, 0, "", "", "", 0);
        Professional professional1 = professional0.clone();
        assertEquals("No specialization", professional1.getSpecialization());
        assertEquals(0, professional1.getFrequency());
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        Gender       gender0       = Gender.Female;
        Professional professional0 = new Professional(
            "== (User details) ==\nCode: 00000000-0100-4000-8200-000003000000\nName: Frequency must be a non-negative integer\nAge: 0\nGender: Female\nWeight: 2021.22 kg\nHeight: 0 cm\nBpm: 0\nLevel: 0\nAddress: Frequency must be a non-negative integer\nPhone: Frequency must be a non-negative integer\nEmail: \nActivities: []\nSpecialization: No specialization\nFrequency: 40\n====================\n",
            2284,
            gender0,
            0,
            1343,
            8,
            724,
            "== (User details) ==\nCode: 00000000-0100-4000-8200-000003000000\nName: Frequency must be a non-negative integer\nAge: 0\nGender: Female\nWeight: 2031.89 kg\nHeight: 0 cm\nBpm: 0\nLevel: 0\nAddress: Frequency must be a non-negative integer\nPhone: Frequency must be a non-negative integer\nEmail: {\nActivities: []\nSpecialization: No specialization\nFrequency: 0\n====================\n",
            "8o0Rkz3 k[~1KC",
            "== (User details) ==\nCode: 00000000-0100-4000-8200-000003000000\nName: Frequency must be a non-negative integer\nAge: 2\nGender: Female\nWeight: 2.00 kg\nHeight: 2 cm\nBpm: 2\nLevel: 2\nAddress: Frequency must be a non-negative integer\nPhone: Frequency must be a non-negative integer\nEmail: \nActivities: []\nSpecialization: No specialization\nFrequency: 0\n====================\n",
            1343);
        professional0.activities = null;
        // Undeclared exception!
        try {
            professional0.updateSpecialization();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.users.User", e);
        }
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        Gender       gender0       = Gender.Female;
        Professional professional0 = new Professional((String) null,
                                                      3411,
                                                      gender0,
                                                      0.0F,
                                                      0,
                                                      4,
                                                      0,
                                                      (String) null,
                                                      (String) null,
                                                      ",/$7$",
                                                      4);
        Professional professional1 = new Professional(professional0);
        // Undeclared exception!
        try {
            professional1.equals(professional0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.users.User", e);
        }
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        Gender       gender0       = Gender.Male;
        Professional professional0 = new Professional("DGS/J~g@Q:DZY+q",
                                                      9,
                                                      gender0,
                                                      9,
                                                      9,
                                                      9,
                                                      9,
                                                      "DGS/J~g@Q:DZY+q",
                                                      "DGS/J~g@Q:DZY+q",
                                                      "DGS/J~g@Q:DZY+q",
                                                      9);
        professional0.activities   = null;
        // Undeclared exception!
        try {
            professional0.clone();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.users.User", e);
        }
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        Gender       gender0       = Gender.Female;
        Professional professional0 = null;
        try {
            professional0 = new Professional("rijE>UN.g9BKKtx",
                                             0,
                                             gender0,
                                             (-188.3613F),
                                             0,
                                             0,
                                             (-1),
                                             "",
                                             "rijE>UN.g9BKKtx",
                                             "MakeItFit.users.types.Professional",
                                             (-1));
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid user weight
            //
            verifyException("MakeItFit.users.User", e);
        }
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        Professional professional0 = null;
        try {
            professional0 = new Professional((Professional) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.users.User", e);
        }
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Gender       gender0       = Gender.Female;
        Professional professional0 = new Professional("q/~1!HyBXaim,",
                                                      0,
                                                      gender0,
                                                      0,
                                                      0,
                                                      0,
                                                      0,
                                                      "q/~1!HyBXaim,",
                                                      "q/~1!HyBXaim,",
                                                      "q/~1!HyBXaim,",
                                                      0);
        Professional professional1 = new Professional(professional0);
        boolean      boolean0      = professional0.equals(professional1);
        assertEquals(0, professional1.getFrequency());
        assertTrue(boolean0);
        assertEquals("No specialization", professional1.getSpecialization());
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        Gender       gender0 = Gender.Female;
        Professional professional0 =
            new Professional("y}W6k-", 9, gender0, 9, 9, 9, 9, "y}W6k-", "y}W6k-", "y}W6k-", 9);
        Professional professional1 = new Professional(professional0);
        professional1.setFrequency(804);
        boolean boolean0 = professional0.equals(professional1);
        assertEquals(804, professional1.getFrequency());
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        Gender       gender0       = Gender.Female;
        Professional professional0 = new Professional("I][*e",
                                                      2232,
                                                      gender0,
                                                      2232,
                                                      18,
                                                      2232,
                                                      2232,
                                                      "I][*e",
                                                      "I][*e",
                                                      "I][*e",
                                                      18);
        boolean      boolean0      = professional0.equals("I][*e");
        assertFalse(boolean0);
        assertEquals(18, professional0.getFrequency());
        assertEquals("No specialization", professional0.getSpecialization());
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        Gender       gender0       = Gender.Female;
        Professional professional0 = new Professional("q/~1!HyBXaim,",
                                                      0,
                                                      gender0,
                                                      0,
                                                      0,
                                                      0,
                                                      0,
                                                      "q/~1!HyBXaim,",
                                                      "q/~1!HyBXaim,",
                                                      "q/~1!HyBXaim,",
                                                      0);
        boolean      boolean0      = professional0.equals((Object) null);
        assertEquals(0, professional0.getFrequency());
        assertFalse(boolean0);
        assertEquals("No specialization", professional0.getSpecialization());
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        Gender       gender0       = Gender.Female;
        Professional professional0 = new Professional("q/~1!HyBXaim,",
                                                      0,
                                                      gender0,
                                                      0,
                                                      0,
                                                      0,
                                                      0,
                                                      "q/~1!HyBXaim,",
                                                      "q/~1!HyBXaim,",
                                                      "q/~1!HyBXaim,",
                                                      0);
        boolean      boolean0      = professional0.equals(professional0);
        assertEquals(0, professional0.getFrequency());
        assertEquals("No specialization", professional0.getSpecialization());
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        Gender       gender0       = Gender.Male;
        Professional professional0 = new Professional("DGS/J~g@Q:DZY+q",
                                                      9,
                                                      gender0,
                                                      9,
                                                      9,
                                                      9,
                                                      9,
                                                      "DGS/J~g@Q:DZY+q",
                                                      "DGS/J~g@Q:DZY+q",
                                                      "DGS/J~g@Q:DZY+q",
                                                      9);
        Professional professional1 = new Professional(professional0);
        assertEquals("No specialization", professional0.getSpecialization());

        professional0.setSpecialization("DySuMmgq\"NDZYB;q");
        boolean boolean0 = professional1.equals(professional0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        Gender       gender0       = Gender.Male;
        Professional professional0 = new Professional((String) null,
                                                      18,
                                                      gender0,
                                                      18,
                                                      18,
                                                      18,
                                                      18,
                                                      (String) null,
                                                      (String) null,
                                                      (String) null,
                                                      18);
        UUID         uUID0         = professional0.getCode();
        Trail        trail0        = new Trail(uUID0,
                                 (MakeItFitDate) null,
                                 18,
                                 (String) null,
                                 (String) null,
                                 18,
                                 18,
                                 18,
                                 18);
        professional0.addActivity(trail0);
        professional0.updateSpecialization();
        assertEquals("Trail", professional0.getSpecialization());
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        Gender       gender0 = Gender.Male;
        Professional professional0 =
            new Professional("", 203, gender0, 203, 1565, 1565, 1565, "", "", "", 1565);
        // Undeclared exception!
        try {
            professional0.setFrequency((-749));
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Frequency must be a non-negative integer
            //
            verifyException("MakeItFit.users.types.Professional", e);
        }
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
        Gender       gender0       = Gender.Female;
        Professional professional0 = new Professional("N8ORbJ|8{\"S-GqI",
                                                      15,
                                                      gender0,
                                                      15,
                                                      15,
                                                      15,
                                                      15,
                                                      "N8ORbJ|8{\"S-GqI",
                                                      "N8ORbJ|8{\"S-GqI",
                                                      "N8ORbJ|8{\"S-GqI",
                                                      15);
        String       string0       = professional0.toString();
        assertEquals(
            "== (User details) ==\nCode: 00000000-0100-4000-8200-000003000000\nName: N8ORbJ|8{\"S-GqI\nAge: 15\nGender: Female\nWeight: 15.00 kg\nHeight: 15 cm\nBpm: 15\nLevel: 15\nAddress: N8ORbJ|8{\"S-GqI\nPhone: N8ORbJ|8{\"S-GqI\nEmail: N8ORbJ|8{\"S-GqI\nActivities: []\nSpecialization: No specialization\nFrequency: 15\n====================\n",
            string0);
    }

    @Test(timeout = 4000)
    public void test20() throws Throwable {
        Gender       gender0       = Gender.Female;
        Professional professional0 = new Professional("N8ORbJ|8{\"S-GqI",
                                                      15,
                                                      gender0,
                                                      15,
                                                      15,
                                                      15,
                                                      15,
                                                      "N8ORbJ|8{\"S-GqI",
                                                      "N8ORbJ|8{\"S-GqI",
                                                      "N8ORbJ|8{\"S-GqI",
                                                      15);
        Professional professional1 = professional0.clone();
        assertEquals(15, professional1.getFrequency());
        assertEquals("No specialization", professional1.getSpecialization());
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
        Gender       gender0       = Gender.Female;
        Professional professional0 = new Professional("N8ORbJ|8{\"S-GqI",
                                                      15,
                                                      gender0,
                                                      15,
                                                      15,
                                                      15,
                                                      15,
                                                      "N8ORbJ|8{\"S-GqI",
                                                      "N8ORbJ|8{\"S-GqI",
                                                      "N8ORbJ|8{\"S-GqI",
                                                      15);
        int          int0          = professional0.getFrequency();
        assertEquals(15, int0);
        assertEquals("No specialization", professional0.getSpecialization());
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        Gender       gender0 = Gender.Male;
        Professional professional0 =
            new Professional("", 203, gender0, 203, 1565, 1565, 1565, "", "", "", 1565);
        professional0.updateSpecialization();
        assertEquals("No specialization", professional0.getSpecialization());
        assertEquals(1565, professional0.getFrequency());
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        Gender       gender0       = Gender.Female;
        Professional professional0 = new Professional("q/~1!HyBXaim,",
                                                      0,
                                                      gender0,
                                                      0,
                                                      0,
                                                      0,
                                                      0,
                                                      "q/~1!HyBXaim,",
                                                      "q/~1!HyBXaim,",
                                                      "q/~1!HyBXaim,",
                                                      0);
        String       string0       = professional0.getSpecialization();
        assertEquals(0, professional0.getFrequency());
        assertEquals("No specialization", string0);
    }

    @Test(timeout = 4000)
    public void test24() throws Throwable {
        Gender       gender0       = Gender.Female;
        Professional professional0 = new Professional(
            "== (User details) ==\nCode: 00000000-0100-4000-8200-000003000000\nName: Frequency must be a non-negative integer\nAge: 0\nGender: Female\nWeight: 2021.22 kg\nHeight: 0 cm\nBpm: 0\nLevel: 0\nAddress: Frequency must be a non-negative integer\nPhone: Frequency must be a non-negative integer\nEmail: \nActivities: []\nSpecialization: No specialization\nFrequency: 40\n====================\n",
            2284,
            gender0,
            0,
            1343,
            8,
            724,
            "== (User details) ==\nCode: 00000000-0100-4000-8200-000003000000\nName: Frequency must be a non-negative integer\nAge: 0\nGender: Female\nWeight: 2031.89 kg\nHeight: 0 cm\nBpm: 0\nLevel: 0\nAddress: Frequency must be a non-negative integer\nPhone: Frequency must be a non-negative integer\nEmail: {\nActivities: []\nSpecialization: No specialization\nFrequency: 0\n====================\n",
            "8o0Rkz3 k[~1KC",
            "== (User details) ==\nCode: 00000000-0100-4000-8200-000003000000\nName: Frequency must be a non-negative integer\nAge: 2\nGender: Female\nWeight: 2.00 kg\nHeight: 2 cm\nBpm: 2\nLevel: 2\nAddress: Frequency must be a non-negative integer\nPhone: Frequency must be a non-negative integer\nEmail: \nActivities: []\nSpecialization: No specialization\nFrequency: 0\n====================\n",
            1343);
        Professional professional1 =
            new Professional("", 1, gender0, 2284, 3981, 8, 2660, "Elevation Gain: ", "", "", 0);
        boolean boolean0 = professional0.equals(professional1);
        assertFalse(boolean0);
        assertEquals(0, professional1.getFrequency());
        assertEquals(1343, professional0.getFrequency());
        assertEquals("No specialization", professional1.getSpecialization());
    }
}
