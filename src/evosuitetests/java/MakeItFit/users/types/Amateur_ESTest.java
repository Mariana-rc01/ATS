/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 20:16:49 GMT 2025
 */

package MakeItFit.users.types;

import MakeItFit.users.Gender;
import MakeItFit.users.types.Amateur;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true,
                     useVFS                = true,
                     useVNET               = true,
                     resetStaticState      = true,
                     useJEE                = true)
public class Amateur_ESTest extends Amateur_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        Gender  gender0  = Gender.Male;
        Amateur amateur0 = new Amateur("MakeItFit.users.types.Amateur",
                                       0,
                                       gender0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       "MakeItFit.users.types.Amateur",
                                       "MakeItFit.users.types.Amateur",
                                       "MakeItFit.users.types.Amateur");
        Amateur amateur1 = amateur0.clone();
        assertEquals("MakeItFit.users.types.Amateur", amateur1.getEmail());
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        Gender  gender0     = Gender.Other;
        Amateur amateur0    = new Amateur((String) null,
                                       1134,
                                       gender0,
                                       1134,
                                       1134,
                                       1134,
                                       1134,
                                       (String) null,
                                       (String) null,
                                       (String) null);
        amateur0.activities = null;
        // Undeclared exception!
        try {
            amateur0.clone();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.users.User", e);
        }
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        Gender  gender0  = Gender.Female;
        Amateur amateur0 = null;
        try {
            amateur0 = new Amateur("",
                                   (-2899),
                                   gender0,
                                   (-4694.6F),
                                   (-2899),
                                   (-1797),
                                   (-353),
                                   "hv94I'",
                                   "====================\n",
                                   "");
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid user age
            //
            verifyException("MakeItFit.users.User", e);
        }
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        Amateur amateur0 = null;
        try {
            amateur0 = new Amateur((Amateur) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.users.User", e);
        }
    }

    @Test(timeout = 4000)
    public void test4() throws Throwable {
        Gender  gender0  = Gender.Other;
        Amateur amateur0 = new Amateur("fA8CEU3t=q`",
                                       0,
                                       gender0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       "fA8CEU3t=q`",
                                       "fA8CEU3t=q`",
                                       "fA8CEU3t=q`");
        Amateur amateur1 = new Amateur(amateur0);
        assertEquals("fA8CEU3t=q`", amateur1.getPhone());
    }

    @Test(timeout = 4000)
    public void test5() throws Throwable {
        Gender  gender0  = Gender.Male;
        Amateur amateur0 = new Amateur((String) null,
                                       11,
                                       gender0,
                                       11,
                                       11,
                                       11,
                                       11,
                                       (String) null,
                                       (String) null,
                                       (String) null);
        Amateur amateur1 = amateur0.clone();
        assertEquals(11.0F, amateur1.getWeight(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test6() throws Throwable {
        Gender  gender0  = Gender.Male;
        Amateur amateur0 = new Amateur((String) null,
                                       11,
                                       gender0,
                                       11,
                                       11,
                                       11,
                                       11,
                                       (String) null,
                                       (String) null,
                                       (String) null);
        String  string0  = amateur0.toString();
        assertEquals(
            "== (User details) ==\nCode: 00000000-0100-4000-8200-000003000000\nName: null\nAge: 11\nGender: Male\nWeight: 11.00 kg\nHeight: 11 cm\nBpm: 11\nLevel: 11\nAddress: null\nPhone: null\nEmail: null\nActivities: []\n====================\n",
            string0);
    }
}
