/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 20:19:00 GMT 2025
 */

package MakeItFit.users.types;

import MakeItFit.users.Gender;
import MakeItFit.users.types.Occasional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true,
                     useVFS                = true,
                     useVNET               = true,
                     resetStaticState      = true,
                     useJEE                = true)
public class Occasional_ESTest extends Occasional_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Gender     gender0     = Gender.Female;
        Occasional occasional0 = new Occasional("%9N+QeWj3Yn\"5",
                                                5,
                                                gender0,
                                                0.0F,
                                                5,
                                                69,
                                                11,
                                                "%9N+QeWj3Yn\"5",
                                                "%9N+QeWj3Yn\"5",
                                                "",
                                                69);
        Occasional occasional1 = new Occasional(occasional0);
        occasional0.setFrequency(3622);
        boolean boolean0 = occasional0.equals(occasional1);
        assertEquals(3622, occasional0.getFrequency());
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        Gender     gender0     = Gender.Female;
        Occasional occasional0 = new Occasional("%9N+QeWj3Yn\"5",
                                                5,
                                                gender0,
                                                0.0F,
                                                5,
                                                69,
                                                11,
                                                "%9N+QeWj3Yn\"5",
                                                "%9N+QeWj3Yn\"5",
                                                "",
                                                69);
        int        int0        = occasional0.getFrequency();
        assertEquals(69, int0);
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        Gender     gender0     = Gender.Other;
        Occasional occasional0 = new Occasional("+N>",
                                                0,
                                                gender0,
                                                0,
                                                0,
                                                0,
                                                0,
                                                "+N>",
                                                ".;7C{(co0f~",
                                                ".;7C{(co0f~",
                                                3270);
        Occasional occasional1 = occasional0.clone();
        assertEquals(3270, occasional1.getFrequency());
        assertTrue(occasional1.equals((Object) occasional0));
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        Gender     gender0 = Gender.Female;
        Occasional occasional0 =
            new Occasional(")d'2X:N.P52/3", 0, gender0, 0, 1, 1, 1, ")d'2X:N.P52/3", "", "", 0);
        Occasional occasional1 = occasional0.clone();
        assertEquals(0, occasional1.getFrequency());
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        Gender     gender0     = Gender.Other;
        Occasional occasional0 = new Occasional("Frequency: ",
                                                1010,
                                                gender0,
                                                0.0F,
                                                1010,
                                                251,
                                                251,
                                                "",
                                                "Weight: ",
                                                "Frequency: ",
                                                251);
        occasional0.activities = null;
        // Undeclared exception!
        try {
            occasional0.clone();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.users.User", e);
        }
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        Gender     gender0     = Gender.Female;
        Occasional occasional0 = null;
        try {
            occasional0 = new Occasional("MakeItFit.users.types.Occasional",
                                         642,
                                         gender0,
                                         642,
                                         642,
                                         642,
                                         642,
                                         "Frequency must be a non-negative integer",
                                         "",
                                         "",
                                         (-2606));
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Frequency must be a non-negative integer
            //
            verifyException("MakeItFit.users.types.Occasional", e);
        }
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        Occasional occasional0 = null;
        try {
            occasional0 = new Occasional((Occasional) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.users.User", e);
        }
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        Gender     gender0     = Gender.Female;
        Occasional occasional0 = new Occasional("xT(+2`",
                                                0,
                                                gender0,
                                                0.0F,
                                                0,
                                                0,
                                                0,
                                                "xT(+2`",
                                                "xT(+2`",
                                                (String) null,
                                                0);
        int        int0        = occasional0.getFrequency();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        Gender     gender0     = Gender.Female;
        Occasional occasional0 = new Occasional("_+C=v5",
                                                0,
                                                gender0,
                                                0,
                                                0,
                                                33,
                                                0,
                                                "",
                                                "MakeItFit.activities.implementation.Running",
                                                "_+C=v5",
                                                33);
        Occasional occasional1 = new Occasional(occasional0);
        occasional1.setFrequency(1);
        boolean boolean0 = occasional1.equals(occasional0);
        assertEquals(1, occasional1.getFrequency());
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        Gender     gender0     = Gender.Female;
        Occasional occasional0 = new Occasional("+s8+#qE_@{k@XIxIMM ",
                                                20,
                                                gender0,
                                                20,
                                                20,
                                                20,
                                                20,
                                                "+s8+#qE_@{k@XIxIMM ",
                                                "+s8+#qE_@{k@XIxIMM ",
                                                "+s8+#qE_@{k@XIxIMM ",
                                                20);
        Occasional occasional1 = new Occasional(occasional0);
        boolean    boolean0    = occasional0.equals(occasional1);
        assertTrue(boolean0);
        assertEquals(20, occasional1.getFrequency());
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        Gender     gender0     = Gender.Female;
        Occasional occasional0 = new Occasional("M:{,FNj7hqLk0StL",
                                                74,
                                                gender0,
                                                74,
                                                74,
                                                74,
                                                74,
                                                "M:{,FNj7hqLk0StL",
                                                "M:{,FNj7hqLk0StL",
                                                "M:{,FNj7hqLk0StL",
                                                74);
        Occasional occasional1 = new Occasional("M:{,FNj7hqLk0StL",
                                                1038,
                                                gender0,
                                                74,
                                                1038,
                                                74,
                                                74,
                                                "M:{,FNj7hqLk0StL",
                                                "M:{,FNj7hqLk0StL",
                                                "M:{,FNj7hqLk0StL",
                                                74);
        boolean    boolean0    = occasional0.equals(occasional1);
        assertEquals(74, occasional1.getFrequency());
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Gender     gender0     = Gender.Female;
        Occasional occasional0 = new Occasional("xT(+2`",
                                                0,
                                                gender0,
                                                0.0F,
                                                0,
                                                0,
                                                0,
                                                "xT(+2`",
                                                "xT(+2`",
                                                (String) null,
                                                0);
        Occasional occasional1 = new Occasional(occasional0);
        // Undeclared exception!
        try {
            occasional0.equals(occasional1);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.users.User", e);
        }
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        Gender     gender0     = Gender.Female;
        Occasional occasional0 = new Occasional("|sj'$NB0*",
                                                38,
                                                gender0,
                                                38,
                                                38,
                                                38,
                                                38,
                                                "|sj'$NB0*",
                                                "|sj'$NB0*",
                                                "|sj'$NB0*",
                                                38);
        boolean    boolean0    = occasional0.equals((Object) null);
        assertEquals(38, occasional0.getFrequency());
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        Gender     gender0     = Gender.Female;
        Occasional occasional0 = new Occasional("+s8+#qE_@{k@XIxIMM ",
                                                20,
                                                gender0,
                                                20,
                                                20,
                                                20,
                                                20,
                                                "+s8+#qE_@{k@XIxIMM ",
                                                "+s8+#qE_@{k@XIxIMM ",
                                                "+s8+#qE_@{k@XIxIMM ",
                                                20);
        boolean    boolean0    = occasional0.equals(occasional0);
        assertEquals(20, occasional0.getFrequency());
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        Gender     gender0     = Gender.Female;
        Occasional occasional0 = new Occasional("|sj'$NB0*",
                                                38,
                                                gender0,
                                                38,
                                                38,
                                                38,
                                                38,
                                                "|sj'$NB0*",
                                                "|sj'$NB0*",
                                                "|sj'$NB0*",
                                                38);
        boolean    boolean0    = occasional0.equals("|sj'$NB0*");
        assertFalse(boolean0);
        assertEquals(38, occasional0.getFrequency());
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        Gender     gender0 = Gender.Female;
        Occasional occasional0 =
            new Occasional("", 1880, gender0, 0.0F, 0, 5027, 1880, "", "", "", 2611);
        // Undeclared exception!
        try {
            occasional0.setFrequency((-1164));
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Frequency must be a non-negative integer
            //
            verifyException("MakeItFit.users.types.Occasional", e);
        }
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        Gender     gender0     = Gender.Female;
        Occasional occasional0 = new Occasional("|sj'$NB0*",
                                                38,
                                                gender0,
                                                38,
                                                38,
                                                38,
                                                38,
                                                "|sj'$NB0*",
                                                "|sj'$NB0*",
                                                "|sj'$NB0*",
                                                38);
        Occasional occasional1 = occasional0.clone();
        assertEquals(38, occasional1.getFrequency());
        assertTrue(occasional1.equals((Object) occasional0));
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        Gender     gender0     = Gender.Female;
        Occasional occasional0 = new Occasional("+s8+#qE_@{k@XIxIMM ",
                                                20,
                                                gender0,
                                                20,
                                                20,
                                                20,
                                                20,
                                                "+s8+#qE_@{k@XIxIMM ",
                                                "+s8+#qE_@{k@XIxIMM ",
                                                "+s8+#qE_@{k@XIxIMM ",
                                                20);
        String     string0     = occasional0.toString();
        assertEquals(
            "== (User details) ==\nCode: 00000000-0100-4000-8200-000003000000\nName: +s8+#qE_@{k@XIxIMM \nAge: 20\nGender: Female\nWeight: 20.00 kg\nHeight: 20 cm\nBpm: 20\nLevel: 20\nAddress: +s8+#qE_@{k@XIxIMM \nPhone: +s8+#qE_@{k@XIxIMM \nEmail: +s8+#qE_@{k@XIxIMM \nActivities: []\nFrequency: 20\n====================\n",
            string0);
    }
}
