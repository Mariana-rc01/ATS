/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 20:21:44 GMT 2025
 */

package MakeItFit.time;

import MakeItFit.time.TimeManager;
import MakeItFit.utils.MakeItFitDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true,
                     useVFS                = true,
                     useVNET               = true,
                     resetStaticState      = true,
                     useJEE                = true)
public class TimeManager_ESTest extends TimeManager_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        TimeManager   timeManager0   = new TimeManager((MakeItFitDate) null);
        MakeItFitDate makeItFitDate0 = timeManager0.getCurrentDate();
        assertNull(makeItFitDate0);
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        TimeManager timeManager0 = new TimeManager((MakeItFitDate) null);
        // Undeclared exception!
        try {
            timeManager0.advanceTime(2180);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.time.TimeManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        TimeManager   timeManager0   = new TimeManager(makeItFitDate0);
        try {
            timeManager0.advanceTime((-34));
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Days must be a positive number.
            //
            verifyException("MakeItFit.time.TimeManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        TimeManager   timeManager0   = new TimeManager(makeItFitDate0);
        MakeItFitDate makeItFitDate1 = timeManager0.advanceTime(19);
        assertFalse(makeItFitDate1.equals((Object) makeItFitDate0));
    }

    @Test(timeout = 4000)
    public void test4() throws Throwable {
        TimeManager   timeManager0   = new TimeManager();
        MakeItFitDate makeItFitDate0 = timeManager0.advanceTime(0);
        assertNotNull(makeItFitDate0);
    }

    @Test(timeout = 4000)
    public void test5() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        TimeManager   timeManager0   = new TimeManager(makeItFitDate0);
        MakeItFitDate makeItFitDate1 = timeManager0.getCurrentDate();
        assertSame(makeItFitDate1, makeItFitDate0);
    }
}
