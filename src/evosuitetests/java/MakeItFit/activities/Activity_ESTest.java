/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 20:10:58 GMT 2025
 */

package MakeItFit.activities;

import java.util.UUID;

import MakeItFit.activities.Activity;
import MakeItFit.activities.implementation.PushUp;
import MakeItFit.activities.implementation.Running;
import MakeItFit.activities.implementation.Trail;
import MakeItFit.activities.implementation.WeightSquat;
import MakeItFit.utils.MakeItFitDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true,
                     useVFS                = true,
                     useVNET               = true,
                     resetStaticState      = true,
                     useJEE                = true)
public class Activity_ESTest extends Activity_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        MakeItFitDate makeItFitDate1 = makeItFitDate0.plusDays((-1));
        Running       running0       = new Running((UUID) null,
                                       makeItFitDate1,
                                       367,
                                       "Trail Type: ",
                                       "Trail Type: ",
                                       (-1_802_358_812),
                                       0.005);
        Running       running1       = new Running((UUID) null,
                                       makeItFitDate0,
                                       3048,
                                       " calories, ",
                                       " calories, ",
                                       367,
                                       (-1_802_358_812));
        int           int0           = running1.compareTo((Activity) running0);
        assertEquals(0, running1.getDuration());
        assertEquals(1, int0);
        assertEquals(0, running1.getCaloricWaste());
        assertEquals(3048, running1.getExpectedDuration());
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("l$q.5;Ks[");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Trail         trail0         = new Trail(uUID0,
                                 makeItFitDate0,
                                 (-34),
                                 "Speed: ",
                                 "q):Zw(",
                                 0.0,
                                 (-1003.41F),
                                 (-7493.8293624),
                                 0);
        Trail         trail1         = new Trail(trail0);
        trail0.setExpectedDuration((-1936));
        boolean boolean0 = trail1.equals(trail0);
        assertEquals((-1936), trail0.getExpectedDuration());
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Running       running0 =
            new Running(uUID0, makeItFitDate0, 0, (String) null, (String) null, 0.0, 0.0);
        running0.calculateCaloricWaste(4686);
        assertEquals(0, running0.getCaloricWaste());
        assertEquals(0, running0.getExpectedDuration());
        assertEquals(0, running0.getDuration());
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        PushUp        pushUp0        = new PushUp((UUID) null,
                                    makeItFitDate0,
                                    (-4291),
                                    ", Series: ",
                                    "9x:{g?z#-+NeS`(37F",
                                    (-4291),
                                    (-1364));
        String        string0        = pushUp0.toString();
        assertEquals(
            "Activity: 9x:{g?z#-+NeS`(37F, Code: 00000000-0100-4000-8200-000003000000, Designation: , Series: , Expected Duration: -4291 minutes, Realization Date: 14/02/2014, Caloric Waste: 0 calories, Repetitions: -4291, Series: -1364, ",
            string0);
        assertEquals(0, pushUp0.getDuration());
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Trail         trail0         = new Trail((UUID) null,
                                 makeItFitDate0,
                                 116,
                                 "]^G7C\"",
                                 "]^G7C\"",
                                 116,
                                 (-1628.0),
                                 (-478.2),
                                 2186);
        trail0.getUserCode();
        assertEquals(0, trail0.getDuration());
        assertEquals(116, trail0.getExpectedDuration());
        assertEquals(0, trail0.getCaloricWaste());
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        Random.setNextRandom(766);
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Trail         trail0 =
            new Trail(uUID0, makeItFitDate0, 766, "w8o;nN#}D{s", "w8o;nN#}D{s", 766, 0.0, 0.0, 766);
        trail0.getUserCode();
        assertEquals(0, trail0.getCaloricWaste());
        assertEquals(766, trail0.getExpectedDuration());
        assertEquals(0, trail0.getDuration());
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        UUID        uUID0 = MockUUID.fromString("");
        WeightSquat weightSquat0 =
            new WeightSquat(uUID0, (MakeItFitDate) null, 2551, "", "", 1, 2551, (-5173.1236940181));
        WeightSquat weightSquat1 = weightSquat0.clone();
        weightSquat1.getSpecialization();
        assertTrue(weightSquat1.equals((Object) weightSquat0));
        assertEquals(2551, weightSquat1.getExpectedDuration());
        assertEquals(0, weightSquat1.getCaloricWaste());
        assertEquals(0, weightSquat1.getDuration());
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = MakeItFitDate.of(1, 1, 1);
        PushUp pushUp0 = new PushUp(uUID0, makeItFitDate0, 1, "\"O_#*l", "\"O_#*l", (-4270), 1);
        pushUp0.setSpecialization("");
        pushUp0.getSpecialization();
        assertEquals(1, pushUp0.getExpectedDuration());
        assertEquals(0, pushUp0.getDuration());
        assertEquals(0, pushUp0.getCaloricWaste());
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        UUID        uUID0        = MockUUID.fromString("R->!TM<uLp");
        WeightSquat weightSquat0 = new WeightSquat(uUID0,
                                                   (MakeItFitDate) null,
                                                   5514,
                                                   "R->!TM<uLp",
                                                   "R->!TM<uLp",
                                                   5514,
                                                   5514,
                                                   5514);
        weightSquat0.getRealizationDate();
        assertEquals(0, weightSquat0.getCaloricWaste());
        assertEquals(5514, weightSquat0.getExpectedDuration());
        assertEquals(0, weightSquat0.getDuration());
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        PushUp        pushUp0 =
            new PushUp(uUID0, makeItFitDate0, (-23), "uE", (String) null, (-1078), (-23));
        String string0 = pushUp0.getName();
        assertNull(string0);
        assertEquals(0, pushUp0.getDuration());
        assertEquals((-23), pushUp0.getExpectedDuration());
        assertEquals(0, pushUp0.getCaloricWaste());
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        UUID          uUID0 = MockUUID.fromString("MakeItFit.activities.types.Repetitions");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        WeightSquat   weightSquat0   = new WeightSquat(uUID0,
                                                   makeItFitDate0,
                                                   0,
                                                   "MakeItFit.activities.types.Repetitions",
                                                   "",
                                                   0,
                                                   0,
                                                   2472.86509023087);
        String        string0        = weightSquat0.getName();
        assertEquals("", string0);
        assertEquals(0, weightSquat0.getCaloricWaste());
        assertEquals(0, weightSquat0.getExpectedDuration());
        assertEquals("MakeItFit.activities.types.Repetitions", weightSquat0.getDesignation());
        assertEquals(0, weightSquat0.getDuration());
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Running       running0       = new Running(uUID0,
                                       makeItFitDate0,
                                       0,
                                       "vt{w>oQTq;IZdK&*8r",
                                       "vt{w>oQTq;IZdK&*8r",
                                       0,
                                       1.0);
        int           int0           = running0.getExpectedDuration();
        assertEquals(0, int0);
        assertEquals(0, running0.getDuration());
        assertEquals(0, running0.getCaloricWaste());
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Trail         trail0         = new Trail(uUID0,
                                 makeItFitDate0,
                                 5471,
                                 "3#J",
                                 "#Rmm{@HUUmjQ?hQF3gx",
                                 5471,
                                 5471,
                                 5471,
                                 0);
        int           int0           = trail0.getExpectedDuration();
        assertEquals("#Rmm{@HUUmjQ?hQF3gx", trail0.getName());
        assertEquals("3#J", trail0.getDesignation());
        assertEquals(5471, int0);
        assertEquals(0, trail0.getCaloricWaste());
        assertEquals(0, trail0.getDuration());
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("l$q.5;Ks[");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Trail         trail0 =
            new Trail(uUID0, makeItFitDate0, 0, "Sped: ", "q):Zw(", 0, 0, (-770.131658), 0);
        assertEquals(0, trail0.getDuration());

        trail0.setDuration(1);
        int int0 = trail0.getDuration();
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        WeightSquat   weightSquat0 =
            new WeightSquat(uUID0, makeItFitDate0, 719, " calories, ", "e$jYZg3<", 1494, 1494, 719);
        weightSquat0.setDuration((-2553));
        int int0 = weightSquat0.getDuration();
        assertEquals((-2553), int0);
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        UUID          uUID0          = MockUUID.fromString((String) null);
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Running       running0 =
            new Running(uUID0, makeItFitDate0, 1989, (String) null, (String) null, 1989, 1989);
        running0.getDesignation();
        assertEquals(0, running0.getCaloricWaste());
        assertEquals(0, running0.getDuration());
        assertEquals(1989, running0.getExpectedDuration());
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        WeightSquat   weightSquat0 =
            new WeightSquat(uUID0, makeItFitDate0, 0, "", "", (-1), (-1018), (-1018));
        weightSquat0.getDesignation();
        assertEquals(0, weightSquat0.getExpectedDuration());
        assertEquals(0, weightSquat0.getDuration());
        assertEquals(0, weightSquat0.getCaloricWaste());
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        Trail trail0 = new Trail((UUID) null,
                                 (MakeItFitDate) null,
                                 (-1997),
                                 ",|QB0{7)H1;dIny&",
                                 "MakeItFit.activities.types.Repetitions",
                                 (-696.2355),
                                 0.0,
                                 1791.66748821081,
                                 (-1));
        trail0.setDistance(0.0);
        trail0.calculateCaloricWaste(12);
        int int0 = trail0.getCaloricWaste();
        assertEquals(21, int0);
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = MakeItFitDate.of(1, 1, 1);
        PushUp        pushUp0        = new PushUp(uUID0,
                                    makeItFitDate0,
                                    (-10),
                                    "nmsqXn9&[Oemw8M5[>",
                                    (String) null,
                                    (-4295),
                                    1);
        pushUp0.updateActivity(1);
        int int0 = pushUp0.getCaloricWaste();
        assertEquals((-429), int0);
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Running       running0       = new Running((UUID) null,
                                       makeItFitDate0,
                                       367,
                                       "Trail Type: ",
                                       "Trail Type: ",
                                       (-1_802_358_812),
                                       0.005);
        Running       running1       = new Running((UUID) null,
                                       makeItFitDate0,
                                       3048,
                                       " calories, ",
                                       " calories, ",
                                       367,
                                       (-1_802_358_812));
        int           int0           = running1.compareTo((Activity) running0);
        assertEquals(0, running1.getCaloricWaste());
        assertEquals(2681, int0);
        assertEquals(0, running1.getDuration());
        assertEquals(3048, running1.getExpectedDuration());
    }

    @Test(timeout = 4000)
    public void test20() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Trail         trail0         = new Trail(uUID0,
                                 makeItFitDate0,
                                 0,
                                 "Sped: ",
                                 "q):Zw(",
                                 (-0.7387359941961532),
                                 0,
                                 (-770.131658),
                                 0);
        trail0.setDuration(28);
        trail0.clone();
        assertEquals(28, trail0.getDuration());
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = MakeItFitDate.of(1, 1, 1);
        Running       running0 =
            new Running(uUID0, makeItFitDate0, (-4270), "\"O_#*l", "\"O_#*l", (-4270), (-4270));
        running0.setDuration((-4270));
        running0.clone();
        assertEquals((-4270), running0.getDuration());
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        PushUp        pushUp0   = new PushUp(uUID0, makeItFitDate0, (-4), "", "", (-2816), (-4));
        Activity      activity0 = pushUp0.clone();
        assertEquals((-4), activity0.getExpectedDuration());
        assertEquals(0, activity0.getDuration());
        assertTrue(activity0.equals((Object) pushUp0));
        assertEquals(0, activity0.getCaloricWaste());
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("l$q.5;Ks[");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        WeightSquat   weightSquat0 =
            new WeightSquat(uUID0, makeItFitDate0, (-1), "qc+", "q):Zw(", (-1), 4603, (-1));
        weightSquat0.calculateCaloricWaste(4603);
        weightSquat0.clone();
        assertEquals(2_118_760, weightSquat0.getCaloricWaste());
    }

    @Test(timeout = 4000)
    public void test24() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Trail         trail0         = new Trail(uUID0,
                                 makeItFitDate0,
                                 794,
                                 (String) null,
                                 (String) null,
                                 (-1394.36363),
                                 4665.0F,
                                 0.0,
                                 (-1));
        trail0.calculateCaloricWaste(4665.0F);
        trail0.clone();
        assertEquals((-10761), trail0.getCaloricWaste());
    }

    @Test(timeout = 4000)
    public void test25() throws Throwable {
        UUID   uUID0   = MockUUID.fromString("G@");
        PushUp pushUp0 = new PushUp(uUID0, (MakeItFitDate) null, 0, "G@", "G@", 0, 1);
        pushUp0.caloricWaste(0);
        assertEquals(0, pushUp0.getDuration());
        assertEquals(0, pushUp0.getCaloricWaste());
        assertEquals(0, pushUp0.getExpectedDuration());
    }

    @Test(timeout = 4000)
    public void test26() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        PushUp        pushUp0 = new PushUp((UUID) null, makeItFitDate0, 853, "<rn~", "", 853, 853);
        pushUp0.caloricWaste(2155.9197F);
        assertEquals("", pushUp0.getName());
        assertEquals(0, pushUp0.getCaloricWaste());
        assertEquals(0, pushUp0.getDuration());
        assertEquals(853, pushUp0.getExpectedDuration());
        assertEquals("<rn~", pushUp0.getDesignation());
    }

    @Test(timeout = 4000)
    public void test27() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("gih/8P~MblR;3XY10,");
        MakeItFitDate makeItFitDate0 = MakeItFitDate.of(1, 1, 1);
        Running       running0       = new Running(uUID0,
                                       makeItFitDate0,
                                       (-1168),
                                       (String) null,
                                       (String) null,
                                       (-1168),
                                       (-3682.717088638129));
        running0.caloricWaste((-248.0F));
        assertEquals((-1168), running0.getExpectedDuration());
        assertEquals(0, running0.getCaloricWaste());
        assertEquals(0, running0.getDuration());
    }

    @Test(timeout = 4000)
    public void test28() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("l$q.5;Ks[");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Trail         trail0         = new Trail(uUID0,
                                 makeItFitDate0,
                                 (-34),
                                 "[l&06",
                                 "q):Zw(",
                                 0.0,
                                 (-1003.41F),
                                 (-7493.8293624),
                                 0);
        Trail         trail1         = new Trail(trail0);
        trail1.setDesignation((String) null);
        // Undeclared exception!
        try {
            trail1.equals(trail0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {}
    }

    @Test(timeout = 4000)
    public void test29() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Running       running0       = new Running((UUID) null,
                                       makeItFitDate0,
                                       367,
                                       "Trail Type: ",
                                       "Trail Type: ",
                                       (-1_802_358_812),
                                       0.005);
        // Undeclared exception!
        try {
            running0.compareTo((Activity) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.activities.Activity", e);
        }
    }

    @Test(timeout = 4000)
    public void test30() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Trail         trail0         = new Trail((UUID) null,
                                 makeItFitDate0,
                                 116,
                                 "]^G7C\"",
                                 "]^G7C\"",
                                 116,
                                 (-1628.0),
                                 (-478.2),
                                 2186);
        trail0.getCode();
        assertEquals(0, trail0.getCaloricWaste());
        assertEquals(0, trail0.getDuration());
        assertEquals(116, trail0.getExpectedDuration());
    }

    @Test(timeout = 4000)
    public void test31() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Running       running0 = new Running(uUID0, makeItFitDate0, 0, "Code: ", "", 1.12, (-582));
        running0.getRealizationDate();
        assertEquals(0, running0.getCaloricWaste());
        assertEquals("", running0.getName());
        assertEquals(0, running0.getDuration());
        assertEquals(0, running0.getExpectedDuration());
        assertEquals("Code: ", running0.getDesignation());
    }

    @Test(timeout = 4000)
    public void test32() throws Throwable {
        UUID        uUID0 = MockUUID.fromString("");
        WeightSquat weightSquat0 =
            new WeightSquat(uUID0, (MakeItFitDate) null, 2551, "", "", 1, 2551, (-5173.1236940181));
        weightSquat0.setCaloricWaste(1515);
        assertEquals(1515, weightSquat0.getCaloricWaste());
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        UUID          uUID0          = MockUUID.fromString(" Kg\n");
        MakeItFitDate makeItFitDate0 = MakeItFitDate.of(1, 1, 1);
        WeightSquat   weightSquat0 =
            new WeightSquat(uUID0, makeItFitDate0, 0, " Kg\n", " Kg\n", (-1), 1, (-1));
        weightSquat0.getDesignation();
        assertEquals(0, weightSquat0.getCaloricWaste());
        assertEquals(0, weightSquat0.getDuration());
        assertEquals(0, weightSquat0.getExpectedDuration());
    }

    @Test(timeout = 4000)
    public void test34() throws Throwable {
        UUID          uUID0          = MockUUID.fromString(" Kg\n");
        MakeItFitDate makeItFitDate0 = MakeItFitDate.of(1, 1, 1);
        WeightSquat   weightSquat0 =
            new WeightSquat(uUID0, makeItFitDate0, 0, " Kg\n", " Kg\n", (-1), 1, (-1));
        weightSquat0.getName();
        assertEquals(0, weightSquat0.getDuration());
        assertEquals(0, weightSquat0.getExpectedDuration());
        assertEquals(0, weightSquat0.getCaloricWaste());
    }

    @Test(timeout = 4000)
    public void test35() throws Throwable {
        Trail trail0 = new Trail((UUID) null,
                                 (MakeItFitDate) null,
                                 (-1997),
                                 ",|QB0{7)H1;dIny&",
                                 "MakeItFit.activities.types.Repetitions",
                                 (-696.2355),
                                 0.0,
                                 1791.66748821081,
                                 (-1));
        int   int0   = trail0.getCaloricWaste();
        assertEquals(0, int0);
        assertEquals("MakeItFit.activities.types.Repetitions", trail0.getName());
        assertEquals(0, trail0.getDuration());
        assertEquals((-1997), trail0.getExpectedDuration());
        assertEquals(",|QB0{7)H1;dIny&", trail0.getDesignation());
    }

    @Test(timeout = 4000)
    public void test36() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Trail         trail0         = new Trail(uUID0,
                                 makeItFitDate0,
                                 (-68),
                                 "",
                                 "%02d/%02d/%04d",
                                 (-1167.43),
                                 (-63.942),
                                 7.94,
                                 1260);
        int           int0           = trail0.getExpectedDuration();
        assertEquals(0, trail0.getDuration());
        assertEquals(0, trail0.getCaloricWaste());
        assertEquals((-68), int0);
        assertEquals("%02d/%02d/%04d", trail0.getName());
        assertEquals("", trail0.getDesignation());
    }

    @Test(timeout = 4000)
    public void test37() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("PJ-s^'u_");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Running running0 = new Running(uUID0, makeItFitDate0, 1, "PJ-s^'u_", "PJ-s^'u_", 0.0, 1);
        int     int0     = running0.getDuration();
        assertEquals(1, running0.getExpectedDuration());
        assertEquals(0, int0);
        assertEquals(0, running0.getCaloricWaste());
    }

    @Test(timeout = 4000)
    public void test38() throws Throwable {
        UUID          uUID0          = MockUUID.fromString((String) null);
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Running       running0 =
            new Running(uUID0, makeItFitDate0, 1989, (String) null, (String) null, 1989, 1989);
        running0.getUserCode();
        assertEquals(1989, running0.getExpectedDuration());
        assertEquals(0, running0.getDuration());
        assertEquals(0, running0.getCaloricWaste());
    }

    @Test(timeout = 4000)
    public void test39() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        MakeItFitDate makeItFitDate1 = makeItFitDate0.plusDays((-13));
        Running       running0 =
            new Running((UUID) null, makeItFitDate1, (-13), "y~", "y~", (-13), (-13));
        Running running1 =
            new Running((UUID) null, makeItFitDate0, (-13), "y~", "y~", (-13), (-13));
        int int0 = running0.compareTo((Activity) running1);
        assertEquals((-13), int0);
        assertEquals((-13), running1.getExpectedDuration());
        assertEquals(0, running1.getDuration());
        assertEquals(0, running1.getCaloricWaste());
    }

    @Test(timeout = 4000)
    public void test40() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("%02nd/%02d/%04d");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        PushUp        pushUp0        = new PushUp(uUID0,
                                    makeItFitDate0,
                                    (-13),
                                    "%02nd/%02d/%04d",
                                    "%02nd/%02d/%04d",
                                    (-13),
                                    (-13));
        Trail         trail0 =
            new Trail(uUID0, makeItFitDate0, (-13), "S*dd: ", "S*dd: ", (-13), (-13), (-13), (-13));
        int int0 = pushUp0.compareTo((Activity) trail0);
        assertEquals((-13), trail0.getExpectedDuration());
        assertEquals(0, trail0.getCaloricWaste());
        assertEquals(0, trail0.getDuration());
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test41() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Running       running0 = new Running(uUID0, makeItFitDate0, 2, "\"O35!l", "\"O35!l", 2, 2);
        Running       running1 = new Running(uUID0, makeItFitDate0, 3, "\"O35!l", "\"O35!l", 3, 3);
        running0.equals(running1);
        assertEquals(0, running1.getCaloricWaste());
        assertEquals(3, running1.getExpectedDuration());
        assertEquals(0, running1.getDuration());
        assertEquals(2, running0.getExpectedDuration());
    }

    @Test(timeout = 4000)
    public void test42() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("%02nd/%02d/%04d");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Trail         trail0 =
            new Trail(uUID0, makeItFitDate0, (-13), "S*dd: ", "S*dd: ", (-13), (-13), (-13), (-13));
        Trail trail1 = new Trail(trail0);
        assertTrue(trail1.equals((Object) trail0));

        trail1.setDesignation("S%dd: ");
        boolean boolean0 = trail1.equals(trail0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test43() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        PushUp        pushUp0 = new PushUp(uUID0, makeItFitDate0, 3, "\"O35!l", "\"O35!l", 2, 3);
        pushUp0.getSpecialization();
        assertEquals(3, pushUp0.getExpectedDuration());
        assertEquals(0, pushUp0.getDuration());
        assertEquals(0, pushUp0.getCaloricWaste());
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        WeightSquat weightSquat0 = null;
        try {
            weightSquat0 = new WeightSquat();
            fail("Expecting exception: NoSuchMethodError");

        } catch (NoSuchMethodError e) {
            //
            // org.evosuite.runtime.mock.java.util.MockUUID.UUID(JJ)Ljava/util/UUID;
            //
            verifyException("MakeItFit.activities.Activity", e);
        }
    }

    @Test(timeout = 4000)
    public void test45() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("%02nd/%02d/%04d");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        PushUp        pushUp0        = new PushUp(uUID0,
                                    makeItFitDate0,
                                    (-13),
                                    "%02nd/%02d/%04d",
                                    "%02nd/%02d/%04d",
                                    (-13),
                                    (-13));
        PushUp        pushUp1        = new PushUp(pushUp0);
        boolean       boolean0       = pushUp1.equals(pushUp0);
        assertTrue(boolean0);
        assertEquals(0, pushUp1.getCaloricWaste());
        assertEquals(0, pushUp1.getDuration());
        assertEquals((-13), pushUp1.getExpectedDuration());
    }
}
