/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 20:01:12 GMT 2025
 */

package MakeItFit.activities.types;

import java.util.UUID;

import MakeItFit.activities.implementation.PushUp;
import MakeItFit.activities.implementation.WeightSquat;
import MakeItFit.activities.types.Repetitions;
import MakeItFit.utils.MakeItFitDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true,
                     useVFS                = true,
                     useVNET               = true,
                     resetStaticState      = true,
                     useJEE                = true)
public class Repetitions_ESTest extends Repetitions_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("%");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        WeightSquat   weightSquat0   = new WeightSquat(uUID0,
                                                   makeItFitDate0,
                                                   (-820),
                                                   "%",
                                                   "x*hKvk@6u|=e:",
                                                   (-4635),
                                                   (-820),
                                                   (-820));
        WeightSquat   weightSquat1   = new WeightSquat(weightSquat0);
        weightSquat1.setSeries(746);
        boolean boolean0 = weightSquat0.equals(weightSquat1);
        assertEquals(746, weightSquat1.getSeries());
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        PushUp pushUp0 = new PushUp((UUID) null, makeItFitDate0, (-1223), "", "", (-1223), 0);
        PushUp pushUp1 = new PushUp(pushUp0);
        assertEquals((-1223), pushUp0.getRepetitions());

        pushUp0.setRepetitions(0);
        boolean boolean0 = pushUp1.equals(pushUp0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        UUID          uUID0          = MockUUID.fromString(" meters, Elevation Loss: ");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        PushUp        pushUp0        = new PushUp(uUID0,
                                    makeItFitDate0,
                                    (-1874),
                                    " meters, Elevation Loss: ",
                                    "_2B2",
                                    (-1874),
                                    3238);
        pushUp0.calculateCaloricWaste(0.0F);
        assertEquals(3238, pushUp0.getSeries());
        assertEquals((-1874), pushUp0.getRepetitions());
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        PushUp pushUp0 = new PushUp((UUID) null, makeItFitDate0, (-1223), "", "", (-1223), 0);
        String string0 = pushUp0.toString();
        assertEquals(
            "Activity: , Code: 00000000-0100-4000-8200-000003000000, Designation: , Expected Duration: -1223 minutes, Realization Date: 14/02/2014, Caloric Waste: 0 calories, Repetitions: -1223, Series: 0, ",
            string0);
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("OO5");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        WeightSquat   weightSquat0 =
            new WeightSquat(uUID0, makeItFitDate0, 0, "OO5", "OO5", 3059, 0, 0);
        int int0 = weightSquat0.getSeries();
        assertEquals(3059, weightSquat0.getRepetitions());
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        UUID   uUID0   = MockUUID.fromString("");
        PushUp pushUp0 = new PushUp(uUID0, (MakeItFitDate) null, 1, "", "", 1, (-1));
        int    int0    = pushUp0.getSeries();
        assertEquals((-1), int0);
        assertEquals(1, pushUp0.getRepetitions());
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        UUID   uUID0   = MockUUID.fromString("");
        PushUp pushUp0 = new PushUp(uUID0, (MakeItFitDate) null, 1, "", "", 1, (-1));
        int    int0    = pushUp0.getRepetitions();
        assertEquals(1, int0);
        assertEquals((-1), pushUp0.getSeries());
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        PushUp pushUp0 = new PushUp(uUID0, makeItFitDate0, (-1), "^Y5}\"1EN", "U", (-1), (-1));
        int    int0    = pushUp0.getRepetitions();
        assertEquals((-1), int0);
        assertEquals((-1), pushUp0.getSeries());
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        PushUp pushUp0 = new PushUp(uUID0, makeItFitDate0, 2232, "Speed: ", "Speed: ", 2232, 649);
        pushUp0.equals(pushUp0);
        assertEquals(2232, pushUp0.getRepetitions());
        assertEquals(649, pushUp0.getSeries());
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        PushUp      pushUp0 = new PushUp((UUID) null, makeItFitDate0, (-1223), "", "", (-1223), 0);
        UUID        uUID0   = MockUUID.randomUUID();
        WeightSquat weightSquat0 = new WeightSquat(uUID0,
                                                   makeItFitDate0,
                                                   0,
                                                   "Activity: ",
                                                   "DC#z:s&7n7mA",
                                                   (-562),
                                                   (-1223),
                                                   0.0);
        pushUp0.equals(weightSquat0);
        assertEquals((-562), weightSquat0.getRepetitions());
        assertEquals((-1223), weightSquat0.getSeries());
        assertEquals(0, pushUp0.getSeries());
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        UUID        uUID0        = MockUUID.fromString("#hCh}r;)I");
        WeightSquat weightSquat0 = new WeightSquat(uUID0,
                                                   (MakeItFitDate) null,
                                                   (-722),
                                                   "?Lv.(U/zbJyXq",
                                                   "8\"ycPCYcl~<wS",
                                                   0,
                                                   (-82),
                                                   (-82));
        Repetitions repetitions0 = weightSquat0.clone();
        assertEquals((-82), repetitions0.getSeries());
        assertTrue(repetitions0.equals((Object) weightSquat0));
        assertEquals(0, repetitions0.getRepetitions());
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        UUID          uUID0          = MockUUID.randomUUID();
        WeightSquat   weightSquat0   = new WeightSquat(uUID0,
                                                   makeItFitDate0,
                                                   0,
                                                   "Activity: ",
                                                   "DC#z:s&7n7mA",
                                                   (-562),
                                                   (-1223),
                                                   0.0);
        Repetitions   repetitions0   = weightSquat0.clone();
        assertTrue(repetitions0.equals((Object) weightSquat0));
        assertEquals((-562), repetitions0.getRepetitions());
        assertEquals((-1223), repetitions0.getSeries());
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("%");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        PushUp pushUp0 = new PushUp(uUID0, makeItFitDate0, 932, "%", "Repetitions: ", 932, 746);
        pushUp0.setDuration(746);
        Repetitions repetitions0 = pushUp0.clone();
        assertEquals(932, repetitions0.getRepetitions());
        assertTrue(repetitions0.equals((Object) pushUp0));
        assertEquals(746, pushUp0.getSeries());
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        PushUp pushUp0 = new PushUp((UUID) null, makeItFitDate0, (-1223), "", "", (-1223), 0);
        pushUp0.setDuration((-1223));
        Repetitions repetitions0 = pushUp0.clone();
        assertEquals((-1223), pushUp0.getRepetitions());
        assertEquals(0, repetitions0.getSeries());
        assertEquals((-1223), repetitions0.getRepetitions());
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        WeightSquat   weightSquat0   = new WeightSquat(uUID0,
                                                   makeItFitDate0,
                                                   2637,
                                                   " ]IAhjI*&o0",
                                                   "P8r=6^g, ",
                                                   (-4617),
                                                   2637,
                                                   2);
        weightSquat0.calculateCaloricWaste((-4617));
        weightSquat0.clone();
        assertEquals(Integer.MAX_VALUE, weightSquat0.getCaloricWaste());
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        PushUp        pushUp0        = new PushUp(uUID0,
                                    makeItFitDate0,
                                    (-3548),
                                    ", Series: ",
                                    ", Series: ",
                                    (-3548),
                                    (-3548));
        pushUp0.calculateCaloricWaste((-3548));
        pushUp0.clone();
        assertEquals(Integer.MIN_VALUE, pushUp0.getCaloricWaste());
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        UUID        uUID0        = MockUUID.fromString("#hCh}r;)I");
        WeightSquat weightSquat0 = new WeightSquat(uUID0,
                                                   (MakeItFitDate) null,
                                                   (-722),
                                                   "?Lv.(U/zbJyXq",
                                                   "8\"ycPCYcl~<wS",
                                                   0,
                                                   (-82),
                                                   (-82));
        int         int0         = weightSquat0.caloricWaste((-82));
        assertEquals(0, int0);
        assertEquals((-82), weightSquat0.getSeries());
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        PushUp        pushUp0 =
            new PushUp(uUID0, makeItFitDate0, (-1516), "P$+kdA&~m(", "P$+kdA&~m(", (-1257), 1627);
        int int0 = pushUp0.caloricWaste((-1257));
        assertEquals(257_073_971, int0);
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        UUID          uUID0          = MockUUID.fromString((String) null);
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        PushUp        pushUp0 =
            new PushUp(uUID0, makeItFitDate0, 1242, (String) null, (String) null, (-379), (-332));
        int int0 = pushUp0.caloricWaste((-2660.406F));
        assertEquals((-33_475_356), int0);
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
        UUID        uUID0        = MockUUID.randomUUID();
        WeightSquat weightSquat0 = new WeightSquat(uUID0,
                                                   (MakeItFitDate) null,
                                                   1627,
                                                   (String) null,
                                                   "MakeItFit.activities.types.Repetitions",
                                                   1627,
                                                   1627,
                                                   1627);
        WeightSquat weightSquat1 = new WeightSquat(weightSquat0);
        // Undeclared exception!
        try {
            weightSquat1.equals(weightSquat0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.activities.Activity", e);
        }
    }

    @Test(timeout = 4000)
    public void test20() throws Throwable {
        UUID        uUID0        = MockUUID.fromString("");
        WeightSquat weightSquat0 = new WeightSquat(uUID0,
                                                   (MakeItFitDate) null,
                                                   (-2768),
                                                   "Fh;=@>",
                                                   ",?L",
                                                   (-2768),
                                                   1890,
                                                   1890);
        int         int0         = weightSquat0.getSeries();
        assertEquals((-2768), weightSquat0.getRepetitions());
        assertEquals(1890, int0);
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        WeightSquat   weightSquat0 =
            new WeightSquat(uUID0, makeItFitDate0, 0, "", "", 0, (-1808), 0.0);
        int int0 = weightSquat0.getRepetitions();
        assertEquals((-1808), weightSquat0.getSeries());
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        WeightSquat   weightSquat0   = new WeightSquat(uUID0,
                                                   makeItFitDate0,
                                                   14,
                                                   "Q=V OYAKz[~Yfb4Xz",
                                                   "Q=V OYAKz[~Yfb4Xz",
                                                   14,
                                                   14,
                                                   14);
        WeightSquat   weightSquat1   = new WeightSquat(weightSquat0);
        weightSquat0.setSeries(28);
        boolean boolean0 = weightSquat0.equals(weightSquat1);
        assertEquals(28, weightSquat0.getSeries());
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        WeightSquat   weightSquat0   = new WeightSquat(uUID0,
                                                   makeItFitDate0,
                                                   14,
                                                   "Q=V OYAKz[~Yfb4Xz",
                                                   "Q=V OYAKz[~Yfb4Xz",
                                                   14,
                                                   14,
                                                   14);
        WeightSquat   weightSquat1   = new WeightSquat(weightSquat0);
        boolean       boolean0       = weightSquat1.equals(weightSquat0);
        assertEquals(14, weightSquat0.getSeries());
        assertEquals(14, weightSquat1.getRepetitions());
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test24() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        WeightSquat   weightSquat0   = new WeightSquat(uUID0,
                                                   makeItFitDate0,
                                                   14,
                                                   "Q=V OYAKz[~Yfb4Xz",
                                                   "Q=V OYAKz[~Yfb4Xz",
                                                   14,
                                                   14,
                                                   14);
        WeightSquat   weightSquat1   = new WeightSquat(uUID0,
                                                   makeItFitDate0,
                                                   28,
                                                   "Q=V OYAKz[~Yfb4Xz",
                                                   "Q=V OYAKz[~Yfb4Xz",
                                                   28,
                                                   14,
                                                   14);
        boolean       boolean0       = weightSquat0.equals(weightSquat1);
        assertEquals(28, weightSquat1.getRepetitions());
        assertEquals(14, weightSquat1.getSeries());
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test25() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        PushUp        pushUp0        = new PushUp((UUID) null,
                                    makeItFitDate0,
                                    (-32),
                                    "Trail<Tyz\u0005e: ",
                                    "Trail<Tyz\u0005e: ",
                                    (-32),
                                    104);
        PushUp        pushUp1        = new PushUp(pushUp0);
        assertEquals((-32), pushUp1.getRepetitions());

        pushUp1.setRepetitions(104);
        boolean boolean0 = pushUp1.equals(pushUp0);
        assertFalse(boolean0);
    }
}
