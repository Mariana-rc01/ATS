/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 20:02:17 GMT 2025
 */

package MakeItFit.activities.types;

import java.util.UUID;

import MakeItFit.activities.implementation.Trail;
import MakeItFit.activities.types.DistanceWithAltimetry;
import MakeItFit.utils.MakeItFitDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true,
                     useVFS                = true,
                     useVNET               = true,
                     resetStaticState      = true,
                     useJEE                = true)
public class DistanceWithAltimetry_ESTest extends DistanceWithAltimetry_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Trail         trail0         = new Trail(uUID0,
                                 makeItFitDate0,
                                 0,
                                 "3c1",
                                 "Elevation Gain: ",
                                 3900.4000249431224,
                                 1706.0,
                                 343.1280623,
                                 0);
        Trail         trail1         = trail0.clone();
        trail1.setElevationLoss(0.1);
        boolean boolean0 = trail1.equals(trail0);
        assertEquals(0.1, trail1.getElevationLoss(), 0.01);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Trail         trail0         = new Trail(uUID0,
                                 makeItFitDate0,
                                 0,
                                 "3c1",
                                 "Elevation Gain: ",
                                 3900.4000249431224,
                                 1706.0,
                                 343.1280623,
                                 0);
        Trail         trail1         = trail0.clone();
        trail1.setElevationGain((-662.0));
        boolean boolean0 = trail1.equals(trail0);
        assertEquals((-662.0), trail1.getElevationGain(), 0.01);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        UUID  uUID0  = MockUUID.fromString("y");
        Trail trail0 = new Trail(uUID0,
                                 (MakeItFitDate) null,
                                 0,
                                 "",
                                 "M.)",
                                 1202.29969993051,
                                 0,
                                 (-3270.8),
                                 (-210));
        trail0.calculateCaloricWaste(556.03235F);
        assertEquals(1523, trail0.getCaloricWaste());
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        UUID   uUID0   = MockUUID.randomUUID();
        Trail  trail0  = new Trail(uUID0, (MakeItFitDate) null, (-1037), "", "", 0.0, 0.0, 0.0, 0);
        double double0 = trail0.getElevationLoss();
        assertEquals(0.0, trail0.getElevationGain(), 0.01);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Trail  trail0  = new Trail(uUID0, makeItFitDate0, 3483, "", "", 3483, 0.0, 3483, (-5570));
        double double0 = trail0.getElevationLoss();
        assertEquals(3483.0, double0, 0.01);
        assertEquals(0.0, trail0.getElevationGain(), 0.01);
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Trail         trail0         = new Trail((UUID) null,
                                 makeItFitDate0,
                                 2,
                                 "56;:(CM2],J#i2YT",
                                 "56;:(CM2],J#i2YT",
                                 2,
                                 2,
                                 (-3068.0),
                                 2);
        trail0.setElevationGain(0);
        double double0 = trail0.getElevationGain();
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        UUID   uUID0   = MockUUID.fromString("");
        Trail  trail0  = new Trail(uUID0,
                                 (MakeItFitDate) null,
                                 0,
                                 "",
                                 "",
                                 (-466.859162114474),
                                 (-466.859162114474),
                                 0.5,
                                 1);
        double double0 = trail0.getElevationGain();
        assertEquals(0.5, trail0.getElevationLoss(), 0.01);
        assertEquals((-466.859162114474), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        UUID  uUID0  = MockUUID.fromString(",bZF7|in=");
        Trail trail0 = new Trail(uUID0,
                                 (MakeItFitDate) null,
                                 (-1486),
                                 "",
                                 "z<.kd|ya",
                                 1330.0F,
                                 2,
                                 (-3666),
                                 4253);
        trail0.setDuration(2);
        DistanceWithAltimetry distanceWithAltimetry0 = trail0.clone();
        assertTrue(distanceWithAltimetry0.equals((Object) trail0));
        assertEquals(2.0, distanceWithAltimetry0.getElevationGain(), 0.01);
        assertEquals((-3666.0), distanceWithAltimetry0.getElevationLoss(), 0.01);
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Trail         trail0         = new Trail(uUID0,
                                 makeItFitDate0,
                                 1,
                                 "YtHr/Yz:T0<|>!,+d9",
                                 "YtHr/Yz:T0<|>!,+d9",
                                 1,
                                 1,
                                 0.0,
                                 1);
        trail0.setDuration((-842));
        DistanceWithAltimetry distanceWithAltimetry0 = trail0.clone();
        assertEquals(1.0, trail0.getElevationGain(), 0.01);
        assertEquals(1.0, distanceWithAltimetry0.getElevationGain(), 0.01);
        assertEquals(0.0, trail0.getElevationLoss(), 0.01);
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        UUID                  uUID0                  = MockUUID.fromString("_~Oj}fX$eI");
        Trail                 trail0                 = new Trail(uUID0,
                                 (MakeItFitDate) null,
                                 0,
                                 "_~Oj}fX$eI",
                                 "f~2f",
                                 0.0,
                                 2612.374926666792,
                                 2612.374926666792,
                                 0);
        DistanceWithAltimetry distanceWithAltimetry0 = trail0.clone();
        assertEquals(2612.374926666792, distanceWithAltimetry0.getElevationLoss(), 0.01);
        assertEquals(2612.374926666792, distanceWithAltimetry0.getElevationGain(), 0.01);
        assertTrue(distanceWithAltimetry0.equals((Object) trail0));
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        Trail trail0 = new Trail((UUID) null,
                                 (MakeItFitDate) null,
                                 (-2_146_577_154),
                                 (String) null,
                                 "I",
                                 (-1536.0),
                                 (-2_146_577_154),
                                 (-1.0185913245472784),
                                 (-2_146_577_154));
        trail0.setCaloricWaste(1);
        DistanceWithAltimetry distanceWithAltimetry0 = trail0.clone();
        assertEquals((-1.0185913245472784), distanceWithAltimetry0.getElevationLoss(), 0.01);
        assertEquals((-2.146577154E9), trail0.getElevationGain(), 0.01);
        assertEquals((-2.146577154E9), distanceWithAltimetry0.getElevationGain(), 0.01);
        assertEquals((-1.0185913245472784), trail0.getElevationLoss(), 0.01);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Trail         trail0         = new Trail(uUID0,
                                 makeItFitDate0,
                                 0,
                                 "YtHr/Yz:T0<|>!,+d9",
                                 "YtHr/Yz:T0<|>!,+d9",
                                 (-316.1),
                                 0,
                                 0.0,
                                 1);
        trail0.updateActivity(1);
        trail0.clone();
        assertEquals(0.0, trail0.getElevationLoss(), 0.01);
        assertEquals(0.0, trail0.getElevationGain(), 0.01);
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        UUID  uUID0  = MockUUID.fromString("G@");
        Trail trail0 = new Trail(uUID0, (MakeItFitDate) null, 0, "G@", "G@", 0, 1.0, 0, 0);
        trail0.caloricWaste(0.0F);
        assertEquals(0.0, trail0.getElevationLoss(), 0.01);
        assertEquals(1.0, trail0.getElevationGain(), 0.01);
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("T3bZvm");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Trail         trail0 =
            new Trail(uUID0, makeItFitDate0, 2792, "'nS1BEGs7e", "Repetitions: ", 0.0, 0.0, 0.0, 0);
        trail0.setElevationGain(2792);
        int int0 = trail0.caloricWaste(2792);
        assertEquals(2792.0, trail0.getElevationGain(), 0.01);
        assertEquals(7795, int0);
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Trail         trail0         = new Trail((UUID) null,
                                 makeItFitDate0,
                                 2,
                                 "56;:(CM2],J#i2YT",
                                 "56;:(CM2],J#i2YT",
                                 2,
                                 2,
                                 (-3068.0),
                                 2);
        int           int0           = trail0.caloricWaste(2);
        assertEquals((-6), int0);
        assertEquals(2.0, trail0.getElevationGain(), 0.01);
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Trail         trail0         = new Trail((UUID) null,
                                 makeItFitDate0,
                                 2,
                                 "56;:(CM2],J#i2YT",
                                 "56;:(CM2],J#i2YT",
                                 2,
                                 2,
                                 (-3068.0),
                                 2);
        double        double0        = trail0.getElevationGain();
        assertEquals(2.0, double0, 0.01);
        assertEquals((-3068.0), trail0.getElevationLoss(), 0.01);
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        UUID   uUID0   = MockUUID.fromString("y");
        Trail  trail0  = new Trail(uUID0,
                                 (MakeItFitDate) null,
                                 0,
                                 "",
                                 "M.)",
                                 1202.29969993051,
                                 0,
                                 (-3270.8),
                                 (-210));
        double double0 = trail0.getElevationLoss();
        assertEquals((-3270.8), double0, 0.01);
        assertEquals(0.0, trail0.getElevationGain(), 0.01);
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("Repetitions: ");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Trail         trail0 =
            new Trail(uUID0, makeItFitDate0, 68, "Repetitions: ", "Repetitions: ", 68, 68, 68, 68);
        Trail trail1 = new Trail(trail0);
        trail1.setElevationLoss(1);
        boolean boolean0 = trail0.equals(trail1);
        assertEquals(1.0, trail1.getElevationLoss(), 0.01);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("Repetitions: ");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Trail         trail0 =
            new Trail(uUID0, makeItFitDate0, 68, "Repetitions: ", "Repetitions: ", 68, 68, 68, 68);
        Trail   trail1   = new Trail(trail0);
        boolean boolean0 = trail0.equals(trail1);
        assertTrue(boolean0);
        assertEquals(68.0, trail1.getElevationGain(), 0.01);
        assertEquals(68.0, trail0.getElevationLoss(), 0.01);
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Trail trail0 = new Trail(uUID0, makeItFitDate0, 2415, "tH", "tH", 2415, 2415, 2415, 2415);
        Trail trail1 = new Trail(uUID0, makeItFitDate0, 1, "tH", "tH", 2, 0, 0, 0);
        trail0.equals(trail1);
        assertEquals(0.0, trail1.getElevationGain(), 0.01);
        assertEquals(0.0, trail1.getElevationLoss(), 0.01);
        assertEquals(2415.0, trail0.getElevationGain(), 0.01);
    }

    @Test(timeout = 4000)
    public void test20() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Trail         trail0         = new Trail(uUID0,
                                 makeItFitDate0,
                                 (-611),
                                 "6}|KEatx7tT&.)CCq",
                                 "6}|KEatx7tT&.)CCq",
                                 (-611),
                                 (-611),
                                 (-611),
                                 (-611));
        Trail         trail1         = new Trail(trail0);
        assertEquals((-611.0), trail1.getElevationGain(), 0.01);

        trail1.setElevationGain(0);
        boolean boolean0 = trail1.equals(trail0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
        Trail  trail0  = new Trail((UUID) null,
                                 (MakeItFitDate) null,
                                 (-2_146_577_154),
                                 (String) null,
                                 "I",
                                 (-1536.0),
                                 (-2_146_577_154),
                                 (-1.0185913245472784),
                                 (-2_146_577_154));
        String string0 = trail0.toString();
        assertEquals(
            "Activity: I, Code: 00000000-0100-4000-8200-000003000000, Designation: null, Expected Duration: -2146577154 minutes, Realization Date: null, Caloric Waste: 0 calories, Distance: -1536.0 meters, Elevation Gain: -2.146577154E9 meters, Elevation Loss: -1.0185913245472784 meters, Trail Type: -2146577154\n",
            string0);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        Trail                 trail0                 = new Trail((UUID) null,
                                 (MakeItFitDate) null,
                                 (-2_146_577_154),
                                 (String) null,
                                 "I",
                                 (-1536.0),
                                 (-2_146_577_154),
                                 (-1.0185913245472784),
                                 (-2_146_577_154));
        DistanceWithAltimetry distanceWithAltimetry0 = trail0.clone();
        // Undeclared exception!
        try {
            distanceWithAltimetry0.equals(trail0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.activities.Activity", e);
        }
    }
}
