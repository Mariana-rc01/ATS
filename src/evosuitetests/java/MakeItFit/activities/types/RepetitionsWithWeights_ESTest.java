/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 20:04:27 GMT 2025
 */

package MakeItFit.activities.types;

import java.util.UUID;

import MakeItFit.activities.implementation.WeightSquat;
import MakeItFit.activities.types.RepetitionsWithWeights;
import MakeItFit.utils.MakeItFitDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true,
                     useVFS                = true,
                     useVNET               = true,
                     resetStaticState      = true,
                     useJEE                = true)
public class RepetitionsWithWeights_ESTest extends RepetitionsWithWeights_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        WeightSquat   weightSquat0   = new WeightSquat(uUID0,
                                                   makeItFitDate0,
                                                   0,
                                                   "5Ms9)+ 1AHJ%n:]i%5",
                                                   "5Ms9)+ 1AHJ%n:]i%5",
                                                   0,
                                                   (-1),
                                                   (-1));
        WeightSquat   weightSquat1   = new WeightSquat(weightSquat0);
        weightSquat0.setWeight(0);
        boolean boolean0 = weightSquat1.equals(weightSquat0);
        assertEquals(0.0, weightSquat0.getWeight(), 0.01);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        UUID        uUID0 = MockUUID.fromString("");
        WeightSquat weightSquat0 =
            new WeightSquat(uUID0, (MakeItFitDate) null, 0, "", "", (-5160), (-5160), 1.0);
        weightSquat0.calculateCaloricWaste(0.0F);
        assertEquals(1.0, weightSquat0.getWeight(), 0.01);
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        WeightSquat   weightSquat0   = new WeightSquat(uUID0,
                                                   makeItFitDate0,
                                                   0,
                                                   "5Ms9)+ 1AHJ%n:]i%5",
                                                   "5Ms9)+ 1AHJ%n:]i%5",
                                                   0,
                                                   (-1),
                                                   (-1));
        String        string0        = weightSquat0.toString();
        assertEquals(
            "Activity: 5Ms9)+ 1AHJ%n:]i%5, Code: 04000000-0500-4000-8600-000007000000, Designation: 5Ms9)+ 1AHJ%n:]i%5, Expected Duration: 0 minutes, Realization Date: 14/02/2014, Caloric Waste: 0 calories, Repetitions: 0, Series: -1, Weight: -1.0 Kg\n",
            string0);
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        UUID        uUID0 = MockUUID.fromString("");
        WeightSquat weightSquat0 =
            new WeightSquat(uUID0, (MakeItFitDate) null, 0, "", "", (-5160), (-5160), 1.0);
        double double0 = weightSquat0.getWeight();
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("$n!1f");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        WeightSquat   weightSquat0   = new WeightSquat(uUID0,
                                                   makeItFitDate0,
                                                   (-1036),
                                                   "$n!1f",
                                                   "$n!1f",
                                                   (-1036),
                                                   (-1036),
                                                   (-1036));
        double        double0        = weightSquat0.getWeight();
        assertEquals((-1036.0), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        UUID        uUID0 = MockUUID.fromString("");
        WeightSquat weightSquat0 =
            new WeightSquat(uUID0, (MakeItFitDate) null, 0, "", "", (-5160), (-5160), 1.0);
        RepetitionsWithWeights repetitionsWithWeights0 = weightSquat0.clone();
        assertEquals(1.0, repetitionsWithWeights0.getWeight(), 0.01);
        assertEquals(1.0, weightSquat0.getWeight(), 0.01);
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        WeightSquat   weightSquat0 =
            new WeightSquat((UUID) null,
                            makeItFitDate0,
                            243,
                            "",
                            "MakeItFit.activities.types.RepetitionsWithWeights",
                            2,
                            243,
                            0.0);
        weightSquat0.clone();
        assertEquals(0.0, weightSquat0.getWeight(), 0.01);
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        UUID        uUID0        = MockUUID.randomUUID();
        WeightSquat weightSquat0 = new WeightSquat(uUID0, (MakeItFitDate) null, 0, "", "", 0, 0, 0);
        weightSquat0.setDuration(3);
        weightSquat0.clone();
        assertEquals(0.0, weightSquat0.getWeight(), 0.01);
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        UUID        uUID0        = MockUUID.fromString("*{b6l9yBGTB<e");
        WeightSquat weightSquat0 = new WeightSquat(uUID0,
                                                   (MakeItFitDate) null,
                                                   (-1133),
                                                   "*{b6l9yBGTB<e",
                                                   "*{b6l9yBGTB<e",
                                                   3634,
                                                   3634,
                                                   3634);
        weightSquat0.setDuration((-1133));
        RepetitionsWithWeights repetitionsWithWeights0 = weightSquat0.clone();
        assertEquals(3634.0, repetitionsWithWeights0.getWeight(), 0.01);
        assertEquals(3634.0, weightSquat0.getWeight(), 0.01);
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        WeightSquat   weightSquat0   = new WeightSquat(uUID0,
                                                   makeItFitDate0,
                                                   0,
                                                   "5Ms9)+ 1AHJ%n:]i%5",
                                                   "5Ms9)+ 1AHJ%n:]i%5",
                                                   0,
                                                   (-1),
                                                   (-1));
        weightSquat0.setCaloricWaste(1948);
        RepetitionsWithWeights repetitionsWithWeights0 = weightSquat0.clone();
        assertEquals((-1.0), repetitionsWithWeights0.getWeight(), 0.01);
        assertEquals((-1.0), weightSquat0.getWeight(), 0.01);
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        WeightSquat   weightSquat0   = new WeightSquat(uUID0,
                                                   makeItFitDate0,
                                                   0,
                                                   "`/9*mKC7_rmpnU",
                                                   ";YxY(*RPvP-0!$w",
                                                   0,
                                                   (-1795),
                                                   0);
        weightSquat0.setCaloricWaste((-3856));
        weightSquat0.clone();
        assertEquals(0.0, weightSquat0.getWeight(), 0.01);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        WeightSquat   weightSquat0 =
            new WeightSquat((UUID) null,
                            makeItFitDate0,
                            243,
                            "",
                            "MakeItFit.activities.types.RepetitionsWithWeights",
                            2,
                            243,
                            0.0);
        weightSquat0.caloricWaste(2);
        assertEquals(0.0, weightSquat0.getWeight(), 0.01);
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        String        string0        = "_K\\u0s(";
        UUID          uUID0          = MockUUID.fromString(string0);
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        WeightSquat   weightSquat0   = new WeightSquat(uUID0,
                                                   makeItFitDate0,
                                                   (-1987),
                                                   "Expected Duration: ",
                                                   string0,
                                                   2448,
                                                   1929,
                                                   (-838.307979));
        int           int0           = weightSquat0.caloricWaste((-1987));
        assertEquals(Integer.MAX_VALUE, int0);
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        UUID        uUID0        = MockUUID.randomUUID();
        WeightSquat weightSquat0 = new WeightSquat(uUID0,
                                                   (MakeItFitDate) null,
                                                   (-220),
                                                   "",
                                                   "BQNz(YP8,P\"i@]kHmR",
                                                   (-1016),
                                                   (-220),
                                                   (-1.0));
        int         int0         = weightSquat0.caloricWaste(55_468_725);
        assertEquals(Integer.MIN_VALUE, int0);
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        UUID        uUID0        = MockUUID.fromString("*{b6l9yBGTB<e");
        WeightSquat weightSquat0 = new WeightSquat(uUID0,
                                                   (MakeItFitDate) null,
                                                   (-1133),
                                                   "*{b6l9yBGTB<e",
                                                   "*{b6l9yBGTB<e",
                                                   3634,
                                                   3634,
                                                   3634);
        weightSquat0.setDesignation((String) null);
        RepetitionsWithWeights repetitionsWithWeights0 = weightSquat0.clone();
        // Undeclared exception!
        try {
            weightSquat0.equals(repetitionsWithWeights0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.activities.Activity", e);
        }
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        WeightSquat   weightSquat0 =
            new WeightSquat((UUID) null,
                            makeItFitDate0,
                            243,
                            "",
                            "MakeItFit.activities.types.RepetitionsWithWeights",
                            2,
                            243,
                            0.0);
        double double0 = weightSquat0.getWeight();
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("*F)$^}2");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        WeightSquat   weightSquat0   = new WeightSquat(uUID0,
                                                   makeItFitDate0,
                                                   (-43),
                                                   "*F)$^}2",
                                                   "*F)$^}2",
                                                   (-43),
                                                   (-43),
                                                   (-43));
        WeightSquat   weightSquat1   = new WeightSquat(weightSquat0);
        assertTrue(weightSquat1.equals((Object) weightSquat0));

        weightSquat1.setRepetitions(0);
        boolean boolean0 = weightSquat1.equals(weightSquat0);
        assertFalse(weightSquat1.equals((Object) weightSquat0));
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("*F)$^}2");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        WeightSquat   weightSquat0   = new WeightSquat(uUID0,
                                                   makeItFitDate0,
                                                   (-43),
                                                   "*F)$^}2",
                                                   "*F)$^}2",
                                                   (-43),
                                                   (-43),
                                                   (-43));
        WeightSquat   weightSquat1   = new WeightSquat(weightSquat0);
        boolean       boolean0       = weightSquat1.equals(weightSquat0);
        assertTrue(boolean0);
        assertEquals((-43.0), weightSquat0.getWeight(), 0.01);
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("*F)$^}2");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        WeightSquat   weightSquat0   = new WeightSquat(uUID0,
                                                   makeItFitDate0,
                                                   (-43),
                                                   "*F)$^}2",
                                                   "*F)$^}2",
                                                   (-43),
                                                   (-43),
                                                   (-43));
        WeightSquat   weightSquat1   = new WeightSquat(weightSquat0);
        weightSquat0.setWeight(0);
        boolean boolean0 = weightSquat0.equals(weightSquat1);
        assertEquals(0.0, weightSquat0.getWeight(), 0.01);
        assertFalse(boolean0);
    }
}
