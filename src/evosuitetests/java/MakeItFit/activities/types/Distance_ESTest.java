/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 20:03:22 GMT 2025
 */

package MakeItFit.activities.types;

import java.util.UUID;

import MakeItFit.activities.implementation.Running;
import MakeItFit.activities.implementation.Trail;
import MakeItFit.activities.types.Distance;
import MakeItFit.utils.MakeItFitDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true,
                     useVFS                = true,
                     useVNET               = true,
                     resetStaticState      = true,
                     useJEE                = true)
public class Distance_ESTest extends Distance_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Running       running0 = new Running(uUID0, makeItFitDate0, 34, "", "A]FdosP", 34, 2481.2);
        Running       running1 = new Running(running0);
        running0.setDistance(0.2);
        boolean boolean0 = running0.equals(running1);
        assertEquals(0.2, running0.getDistance(), 0.01);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        UUID    uUID0 = MockUUID.randomUUID();
        Running running0 =
            new Running(uUID0, (MakeItFitDate) null, (-1), "LdErs<J", "LdErs<J", (-1), (-1));
        running0.calculateCaloricWaste((-1415));
        assertEquals((-1.0), running0.getDistance(), 0.01);
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Running       running0 =
            new Running(uUID0, makeItFitDate0, 0, "", ":J%:kW5CDcqV#sEp", 698.7074643, 698.7074643);
        double double0 = running0.getDistance();
        assertEquals(698.7074643, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        UUID    uUID0    = MockUUID.randomUUID();
        Running running0 = new Running(uUID0,
                                       (MakeItFitDate) null,
                                       0,
                                       "F",
                                       "F",
                                       (-3234.6343668557893),
                                       (-3234.6343668557893));
        double  double0  = running0.getDistance();
        assertEquals((-3234.6343668557893), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Running       running0       = new Running((UUID) null,
                                       makeItFitDate0,
                                       3819,
                                       "&",
                                       (String) null,
                                       (-1325.0904202327981),
                                       3819);
        running0.equals(running0);
        assertEquals((-1325.0904202327981), running0.getDistance(), 0.01);
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Running       running0       = new Running(uUID0, makeItFitDate0, 0, "", "", 0, (-1470));
        running0.clone();
        assertEquals(0.0, running0.getDistance(), 0.01);
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Running       running0 =
            new Running(uUID0, makeItFitDate0, 2, "", "A]FdosP", (-1324.2129688), 2481.2);
        running0.setDuration(2);
        Distance distance0 = running0.clone();
        assertEquals((-1324.2129688), distance0.getDistance(), 0.01);
        assertEquals((-1324.2129688), running0.getDistance(), 0.01);
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Running       running0 =
            new Running((UUID) null, makeItFitDate0, (-217), "&", "&", (-217), (-217));
        running0.setDuration((-1708));
        Distance distance0 = running0.clone();
        assertEquals((-217.0), distance0.getDistance(), 0.01);
        assertTrue(distance0.equals((Object) running0));
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        UUID    uUID0 = MockUUID.randomUUID();
        Running running0 =
            new Running(uUID0, (MakeItFitDate) null, (-1), "LdErs<J", "LdErs<J", (-1), (-1));
        running0.setCaloricWaste(1037);
        Distance distance0 = running0.clone();
        assertEquals((-1.0), running0.getDistance(), 0.01);
        assertEquals((-1.0), distance0.getDistance(), 0.01);
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        UUID  uUID0  = MockUUID.fromString((String) null);
        Trail trail0 = new Trail(uUID0,
                                 (MakeItFitDate) null,
                                 (-1),
                                 ":rU~DJBR54N)K#",
                                 (String) null,
                                 0.2,
                                 91.4148119264,
                                 (-1),
                                 (-1844));
        trail0.setCaloricWaste((-168));
        Distance distance0 = trail0.clone();
        assertEquals(0.2, trail0.getDistance(), 0.01);
        assertEquals(0.2, distance0.getDistance(), 0.01);
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Running running0 = new Running((UUID) null, makeItFitDate0, (-1367), "", "", 0.0, 0.0);
        running0.caloricWaste(2);
        assertEquals(0.0, running0.getDistance(), 0.01);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Trail         trail0         = new Trail(uUID0,
                                 makeItFitDate0,
                                 (-851),
                                 "=!_4}",
                                 (String) null,
                                 (-851),
                                 (-851),
                                 3028.4710267,
                                 0);
        trail0.setDistance(3028.4710267);
        int int0 = trail0.caloricWaste(5);
        assertEquals(3028.4710267, trail0.getDistance(), 0.01);
        assertEquals(86, int0);
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        UUID  uUID0  = MockUUID.fromString((String) null);
        Trail trail0 = new Trail(uUID0,
                                 (MakeItFitDate) null,
                                 (-1),
                                 ":rU~DJBR54N)K#",
                                 (String) null,
                                 0.2,
                                 91.4148119264,
                                 (-1),
                                 (-1844));
        int   int0   = trail0.caloricWaste((-1844));
        assertEquals((-168), int0);
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Trail         trail0 =
            new Trail(uUID0, makeItFitDate0, 34, (String) null, "A]FdosP", 0.0, 0.005, 34, 34);
        Trail trail1 = new Trail(trail0);
        // Undeclared exception!
        try {
            trail0.equals(trail1);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.activities.Activity", e);
        }
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Running running0 = new Running((UUID) null, makeItFitDate0, (-1367), "", "", 0.0, 0.0);
        double  double0  = running0.getDistance();
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Running       running0 =
            new Running((UUID) null, makeItFitDate0, (-173), "c", "c", (-173), (-173));
        UUID    uUID0 = MockUUID.fromString("c");
        Running running1 =
            new Running(uUID0, makeItFitDate0, (-173), "14/02/2014", "14/02/2014", (-173), (-173));
        boolean boolean0 = running0.equals(running1);
        assertFalse(boolean0);
        assertEquals((-173.0), running1.getDistance(), 0.01);
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Running       running0 =
            new Running(uUID0, makeItFitDate0, (-721), "meters,-", "meters,-", (-721), (-721));
        Running running1 = new Running(running0);
        boolean boolean0 = running0.equals(running1);
        assertTrue(boolean0);
        assertEquals((-721.0), running1.getDistance(), 0.01);
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Running       running0 =
            new Running(uUID0, makeItFitDate0, (-721), "meters,-", "meters,-", (-721), (-721));
        Running running1 = new Running(running0);
        running0.setDistance((-0.7521303312922641));
        boolean boolean0 = running0.equals(running1);
        assertEquals((-0.7521303312922641), running0.getDistance(), 0.01);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Running       running0 =
            new Running((UUID) null, makeItFitDate0, (-173), "c", "c", (-173), (-173));
        String string0 = running0.toString();
        assertEquals(
            "Activity: c, Code: 00000000-0100-4000-8200-000003000000, Designation: c, Expected Duration: -173 minutes, Realization Date: 14/02/2014, Caloric Waste: 0 calories, Distance: -173.0 meters, Speed: -173.0 Km/h\n",
            string0);
    }
}
