/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 20:05:32 GMT 2025
 */

package MakeItFit.activities.implementation;

import java.util.UUID;

import MakeItFit.activities.implementation.WeightSquat;
import MakeItFit.utils.MakeItFitDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true,
                     useVFS                = true,
                     useVNET               = true,
                     resetStaticState      = true,
                     useJEE                = true)
public class WeightSquat_ESTest extends WeightSquat_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        UUID        uUID0 = MockUUID.fromString("T3uwbH&@|bZ");
        WeightSquat weightSquat0 =
            new WeightSquat(uUID0, (MakeItFitDate) null, 1103, "|LJ(K:s:^&2D1W", "8", 0, 3, 1103);
        boolean boolean0 = weightSquat0.equals(weightSquat0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        UUID        uUID0 = MockUUID.randomUUID();
        WeightSquat weightSquat0 =
            new WeightSquat(uUID0, (MakeItFitDate) null, (-12), "Q5x", "Q5x", (-12), (-12), (-12));
        WeightSquat weightSquat1 = weightSquat0.clone();
        assertEquals((-12), weightSquat1.getExpectedDuration());
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        UUID          uUID0          = MockUUID.fromString((String) null);
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        WeightSquat   weightSquat0 =
            new WeightSquat(uUID0, makeItFitDate0, 0, (String) null, (String) null, 0, 0, 0);
        WeightSquat weightSquat1 = weightSquat0.clone();
        assertNull(weightSquat1.getSpecialization());
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("L0WifpI2%");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        WeightSquat   weightSquat0 =
            new WeightSquat(uUID0, makeItFitDate0, 0, "L0WifpI2%", "Distance: ", 0, 2886, 0);
        WeightSquat weightSquat1 = weightSquat0.clone();
        assertEquals("Distance: ", weightSquat1.getName());
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        WeightSquat   weightSquat0 =
            new WeightSquat(uUID0, makeItFitDate0, 3086, "", "bx'0", 3086, 3086, 3086);
        weightSquat0.setDuration(2);
        WeightSquat weightSquat1 = weightSquat0.clone();
        assertEquals("bx'0", weightSquat1.getName());
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        UUID        uUID0        = MockUUID.fromString("T3uwbH&@|bZ");
        WeightSquat weightSquat0 = new WeightSquat(uUID0,
                                                   (MakeItFitDate) null,
                                                   1103,
                                                   "|LJ(K:s:^&2D1W",
                                                   "|LJ(K:s:^&2D1W",
                                                   0,
                                                   3,
                                                   1103);
        weightSquat0.setDuration((-1737));
        WeightSquat weightSquat1 = weightSquat0.clone();
        assertTrue(weightSquat1.equals((Object) weightSquat0));
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        WeightSquat   weightSquat0   = new WeightSquat(uUID0,
                                                   makeItFitDate0,
                                                   1169,
                                                   "",
                                                   "rRWe Q|i+&%Cr9oK",
                                                   (-308),
                                                   (-308),
                                                   1169);
        weightSquat0.calculateCaloricWaste(1169);
        weightSquat0.clone();
        assertEquals(Integer.MAX_VALUE, weightSquat0.getCaloricWaste());
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        UUID        uUID0        = MockUUID.fromString("");
        WeightSquat weightSquat0 = new WeightSquat(uUID0,
                                                   (MakeItFitDate) null,
                                                   (-1),
                                                   "",
                                                   "",
                                                   (-1252),
                                                   (-1252),
                                                   2346.93819);
        weightSquat0.calculateCaloricWaste((-1.0F));
        weightSquat0.clone();
        assertEquals((-367_883_500), weightSquat0.getCaloricWaste());
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        WeightSquat   weightSquat0 =
            new WeightSquat(uUID0, makeItFitDate0, 3086, "", "bx'0", 3086, 3086, 3086);
        int int0 = weightSquat0.caloricWaste(0.0F);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        WeightSquat   weightSquat0   = new WeightSquat(uUID0,
                                                   makeItFitDate0,
                                                   1169,
                                                   "",
                                                   "rRWe Q|i+&%Cr9oK",
                                                   (-308),
                                                   (-308),
                                                   1169);
        int           int0           = weightSquat0.caloricWaste((-308));
        assertEquals(Integer.MIN_VALUE, int0);
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        WeightSquat   weightSquat0 =
            new WeightSquat(uUID0,
                            makeItFitDate0,
                            3990,
                            (String) null,
                            "MakeItFit.activities.implementation.WeightSquat",
                            3,
                            1011,
                            0.0);
        WeightSquat weightSquat1 = new WeightSquat(weightSquat0);
        // Undeclared exception!
        try {
            weightSquat0.equals(weightSquat1);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.activities.Activity", e);
        }
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        WeightSquat weightSquat0 = null;
        try {
            weightSquat0 = new WeightSquat((WeightSquat) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.activities.Activity", e);
        }
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        WeightSquat   weightSquat0   = new WeightSquat(uUID0,
                                                   makeItFitDate0,
                                                   1169,
                                                   "",
                                                   "rRWe Q|i+&%Cr9oK",
                                                   (-308),
                                                   (-308),
                                                   1169);
        int           int0           = weightSquat0.caloricWaste(2013);
        assertEquals(Integer.MAX_VALUE, int0);
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        WeightSquat   weightSquat0 =
            new WeightSquat(uUID0,
                            makeItFitDate0,
                            3990,
                            (String) null,
                            "MakeItFit.activities.implementation.WeightSquat",
                            3,
                            1011,
                            0.0);
        boolean boolean0 = weightSquat0.equals(makeItFitDate0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        WeightSquat   weightSquat0 =
            new WeightSquat(uUID0,
                            makeItFitDate0,
                            3990,
                            (String) null,
                            "MakeItFit.activities.implementation.WeightSquat",
                            3,
                            1011,
                            0.0);
        WeightSquat weightSquat1 = new WeightSquat(weightSquat0);
        weightSquat0.setExpectedDuration((-1));
        boolean boolean0 = weightSquat0.equals(weightSquat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        WeightSquat   weightSquat0 =
            new WeightSquat(uUID0,
                            makeItFitDate0,
                            3990,
                            (String) null,
                            "MakeItFit.activities.implementation.WeightSquat",
                            3,
                            1011,
                            0.0);
        String string0 = weightSquat0.toString();
        assertEquals(
            "Activity: MakeItFit.activities.implementation.WeightSquat, Code: 04000000-0500-4000-8600-000007000000, Designation: null, Expected Duration: 3990 minutes, Realization Date: 14/02/2014, Caloric Waste: 0 calories, Repetitions: 3, Series: 1011, Weight: 0.0 Kg\n",
            string0);
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        WeightSquat weightSquat0 = null;
        try {
            weightSquat0 = new WeightSquat();
            fail("Expecting exception: NoSuchMethodError");

        } catch (NoSuchMethodError e) {
            //
            // org.evosuite.runtime.mock.java.util.MockUUID.UUID(JJ)Ljava/util/UUID;
            //
            verifyException("MakeItFit.activities.Activity", e);
        }
    }
}
