/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 20:12:04 GMT 2025
 */

package MakeItFit.trainingPlan;

import java.util.List;
import java.util.UUID;

import MakeItFit.activities.Activity;
import MakeItFit.activities.implementation.PushUp;
import MakeItFit.activities.implementation.WeightSquat;
import MakeItFit.trainingPlan.TrainingPlan;
import MakeItFit.utils.MakeItFitDate;
import MakeItFit.utils.MyTuple;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true,
                     useVFS                = true,
                     useVNET               = true,
                     resetStaticState      = true,
                     useJEE                = true)
public class TrainingPlan_ESTest extends TrainingPlan_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        TrainingPlan  trainingPlan0  = new TrainingPlan(uUID0, makeItFitDate0);
        WeightSquat   weightSquat0   = new WeightSquat(uUID0,
                                                   makeItFitDate0,
                                                   0,
                                                   "MakeItFit.activities.implementation.PushUp",
                                                   "+o(f`",
                                                   1862,
                                                   0,
                                                   0.0);
        trainingPlan0.addActivity(0, weightSquat0);
        int int0 = trainingPlan0.compareTo(trainingPlan0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("VH");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        MakeItFitDate makeItFitDate1 = makeItFitDate0.plusDays((-840));
        TrainingPlan  trainingPlan0  = new TrainingPlan(uUID0, makeItFitDate0);
        TrainingPlan  trainingPlan1  = new TrainingPlan(uUID0, makeItFitDate1);
        int           int0           = trainingPlan0.compareTo(trainingPlan1);
        assertEquals(3, int0);
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        TrainingPlan  trainingPlan0  = new TrainingPlan((UUID) null, makeItFitDate0);
        UUID          uUID0          = trainingPlan0.getUserCode();
        assertNull(uUID0);
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        Random.setNextRandom((-1987));
        UUID         uUID0         = MockUUID.fromString("$3m=7e0Nh\"N6K9)");
        TrainingPlan trainingPlan0 = new TrainingPlan(uUID0, (MakeItFitDate) null);
        UUID         uUID1         = trainingPlan0.getUserCode();
        assertEquals("c3070000-c407-4000-8507-0000c6070000", uUID1.toString());
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        TrainingPlan  trainingPlan0  = new TrainingPlan(uUID0, (MakeItFitDate) null);
        MakeItFitDate makeItFitDate0 = trainingPlan0.getStartDate();
        assertNull(makeItFitDate0);
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        Random.setNextRandom((-1987));
        UUID         uUID0         = MockUUID.fromString("$3m=7e0Nh\"N6K9)");
        TrainingPlan trainingPlan0 = new TrainingPlan(uUID0, (MakeItFitDate) null);
        UUID         uUID1         = trainingPlan0.getCode();
        assertNotSame(uUID0, uUID1);
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = MakeItFitDate.of(0, 4, 4);
        TrainingPlan  trainingPlan0  = new TrainingPlan(uUID0, makeItFitDate0);
        PushUp        pushUp0        = new PushUp(
            uUID0,
            makeItFitDate0,
            0,
            "        == (Training plan details) ==\n        Training Plan: 04000000-0500-4000-8600-000007000000\n        User Code: 00000000-0100-4000-8200-000003000000\n        Start Date: 04/04/0000\n        Activities(Iterations / Activity): []",
            "        == (Training plan details) ==\n        Training Plan: 04000000-0500-4000-8600-000007000000\n        User Code: 00000000-0100-4000-8200-000003000000\n        Start Date: 04/04/0000\n        Activities(Iterations / Activity): []",
            4,
            (-168));
        trainingPlan0.addActivity(4, pushUp0);
        List<MyTuple<Integer, Activity>> list0 = trainingPlan0.getActivities();
        assertFalse(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        TrainingPlan  trainingPlan0  = new TrainingPlan(uUID0, makeItFitDate0);
        TrainingPlan  trainingPlan1  = new TrainingPlan(uUID0, makeItFitDate0);
        WeightSquat   weightSquat0 =
            new WeightSquat(uUID0, makeItFitDate0, 0, (String) null, "", 0, 0, 0);
        trainingPlan0.addActivity(0, weightSquat0);
        int int0 = trainingPlan0.compareTo(trainingPlan1);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("VH");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        TrainingPlan  trainingPlan0  = new TrainingPlan(uUID0, makeItFitDate0);
        trainingPlan0.addActivity(0, (Activity) null);
        // Undeclared exception!
        try {
            trainingPlan0.removeActivity(uUID0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.trainingPlan.TrainingPlan", e);
        }
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("VH");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        TrainingPlan  trainingPlan0  = new TrainingPlan(uUID0, makeItFitDate0);
        WeightSquat   weightSquat0   = new WeightSquat(uUID0,
                                                   makeItFitDate0,
                                                   0,
                                                   "MakeItFit.activities.implementation.PushUp",
                                                   "+o(f`",
                                                   1862,
                                                   0,
                                                   0.0);
        trainingPlan0.addActivity(0, weightSquat0);
        // Undeclared exception!
        try {
            trainingPlan0.extractActivities((MakeItFitDate) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.trainingPlan.TrainingPlan", e);
        }
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        TrainingPlan  trainingPlan0  = new TrainingPlan(uUID0, makeItFitDate0);
        TrainingPlan  trainingPlan1  = new TrainingPlan(uUID0, (MakeItFitDate) null);
        // Undeclared exception!
        try {
            trainingPlan0.equals(trainingPlan1);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.utils.MakeItFitDate", e);
        }
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        TrainingPlan trainingPlan0 = new TrainingPlan((UUID) null, (MakeItFitDate) null);
        // Undeclared exception!
        try {
            trainingPlan0.compareTo(trainingPlan0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.trainingPlan.TrainingPlan", e);
        }
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        TrainingPlan trainingPlan0 = null;
        try {
            trainingPlan0 = new TrainingPlan((TrainingPlan) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.trainingPlan.TrainingPlan", e);
        }
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = MakeItFitDate.of(0, 4, 4);
        TrainingPlan  trainingPlan0  = new TrainingPlan(uUID0, makeItFitDate0);
        UUID          uUID1          = trainingPlan0.getUserCode();
        assertEquals(16_793_600L, uUID1.getMostSignificantBits());
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        UUID                             uUID0          = MockUUID.randomUUID();
        MakeItFitDate                    makeItFitDate0 = MakeItFitDate.of(0, 4, 4);
        TrainingPlan                     trainingPlan0  = new TrainingPlan(uUID0, makeItFitDate0);
        List<MyTuple<Integer, Activity>> list0          = trainingPlan0.getActivities();
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        TrainingPlan  trainingPlan0  = new TrainingPlan((UUID) null, makeItFitDate0);
        MakeItFitDate makeItFitDate1 = trainingPlan0.getStartDate();
        assertSame(makeItFitDate0, makeItFitDate1);
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        TrainingPlan  trainingPlan0  = new TrainingPlan(uUID0, makeItFitDate0);
        UUID          uUID1          = trainingPlan0.getCode();
        assertEquals("04000000-0500-4000-8600-000007000000", uUID1.toString());
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = MakeItFitDate.of(0, 4, 4);
        TrainingPlan  trainingPlan0  = new TrainingPlan(uUID0, makeItFitDate0);
        TrainingPlan  trainingPlan1  = new TrainingPlan(trainingPlan0);
        MakeItFitDate makeItFitDate1 = new MakeItFitDate();
        trainingPlan1.setStartDate(makeItFitDate1);
        int int0 = trainingPlan0.compareTo(trainingPlan1);
        assertEquals((-2014), int0);
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = MakeItFitDate.of(0, 4, 4);
        TrainingPlan  trainingPlan0  = new TrainingPlan(uUID0, makeItFitDate0);
        TrainingPlan  trainingPlan1  = new TrainingPlan(trainingPlan0);
        boolean       boolean0       = trainingPlan1.equals(trainingPlan0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        TrainingPlan  trainingPlan0  = new TrainingPlan(uUID0, makeItFitDate0);
        TrainingPlan  trainingPlan1  = trainingPlan0.clone();
        assertTrue(trainingPlan1.equals((Object) trainingPlan0));

        MakeItFitDate makeItFitDate1 = makeItFitDate0.plusDays(3677);
        trainingPlan1.setStartDate(makeItFitDate1);
        boolean boolean0 = trainingPlan1.equals(trainingPlan0);
        assertFalse(trainingPlan1.equals((Object) trainingPlan0));
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test20() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("VH");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        TrainingPlan  trainingPlan0  = new TrainingPlan(uUID0, makeItFitDate0);
        UUID          uUID1          = MockUUID.fromString("Rh3sF2<x(3pA@I");
        TrainingPlan  trainingPlan1  = new TrainingPlan(uUID1, makeItFitDate0);
        boolean       boolean0       = trainingPlan0.equals(trainingPlan1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        TrainingPlan  trainingPlan0  = new TrainingPlan(uUID0, makeItFitDate0);
        boolean       boolean0       = trainingPlan0.equals("");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = MakeItFitDate.of(0, 4, 4);
        TrainingPlan  trainingPlan0  = new TrainingPlan(uUID0, makeItFitDate0);
        boolean       boolean0       = trainingPlan0.equals(trainingPlan0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        TrainingPlan  trainingPlan0  = new TrainingPlan(uUID0, makeItFitDate0);
        TrainingPlan  trainingPlan1  = new TrainingPlan(uUID0, makeItFitDate0);
        assertTrue(trainingPlan1.equals((Object) trainingPlan0));

        WeightSquat weightSquat0 =
            new WeightSquat(uUID0, makeItFitDate0, 0, "", "", (-788), 0, (-0.5201047201846021));
        trainingPlan1.addActivity(0, weightSquat0);
        boolean boolean0 = trainingPlan1.equals(trainingPlan0);
        assertFalse(trainingPlan1.equals((Object) trainingPlan0));
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test24() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = MakeItFitDate.of(0, 4, 4);
        TrainingPlan  trainingPlan0  = new TrainingPlan(uUID0, makeItFitDate0);
        PushUp        pushUp0        = new PushUp(
            uUID0,
            makeItFitDate0,
            0,
            "        == (Training plan details) ==\n        Training Plan: 04000000-0500-4000-8600-000007000000\n        User Code: 00000000-0100-4000-8200-000003000000\n        Start Date: 04/04/0000\n        Activities(Iterations / Activity): []",
            "        == (Training plan details) ==\n        Training Plan: 04000000-0500-4000-8600-000007000000\n        User Code: 00000000-0100-4000-8200-000003000000\n        Start Date: 04/04/0000\n        Activities(Iterations / Activity): []",
            4,
            (-168));
        trainingPlan0.addActivity(4, pushUp0);
        MakeItFitDate  makeItFitDate1 = new MakeItFitDate();
        List<Activity> list0          = trainingPlan0.extractActivities(makeItFitDate1);
        assertFalse(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test25() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        TrainingPlan  trainingPlan0  = new TrainingPlan(uUID0, makeItFitDate0);
        WeightSquat   weightSquat0   = new WeightSquat(uUID0, makeItFitDate0, 0, "", "", 223, 0, 0);
        trainingPlan0.addActivity(0, weightSquat0);
        List<Activity> list0 = trainingPlan0.extractActivities(makeItFitDate0);
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test26() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        MakeItFitDate makeItFitDate1 = makeItFitDate0.plusDays(223);
        TrainingPlan  trainingPlan0  = new TrainingPlan(uUID0, makeItFitDate0);
        WeightSquat   weightSquat0   = new WeightSquat(uUID0, makeItFitDate0, 0, "", "", 223, 0, 0);
        trainingPlan0.addActivity(0, weightSquat0);
        trainingPlan0.updateActivities(makeItFitDate1, 0);
        assertNotSame(makeItFitDate0, makeItFitDate1);
    }

    @Test(timeout = 4000)
    public void test27() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        TrainingPlan  trainingPlan0  = new TrainingPlan(uUID0, makeItFitDate0);
        WeightSquat   weightSquat0   = new WeightSquat(uUID0, makeItFitDate0, 0, "", "", 223, 0, 0);
        trainingPlan0.addActivity(0, weightSquat0);
        trainingPlan0.updateActivities(makeItFitDate0, 0);
    }

    @Test(timeout = 4000)
    public void test28() throws Throwable {
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        TrainingPlan  trainingPlan0  = new TrainingPlan(uUID0, makeItFitDate0);
        WeightSquat   weightSquat0 =
            new WeightSquat(uUID0, makeItFitDate0, 0, "", "", (-788), 0, (-0.5201047201846021));
        trainingPlan0.addActivity(0, weightSquat0);
        trainingPlan0.removeActivity(uUID0);
        assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
    }

    @Test(timeout = 4000)
    public void test29() throws Throwable {
        TrainingPlan trainingPlan0 = null;
        try {
            trainingPlan0 = new TrainingPlan();
            fail("Expecting exception: NoSuchMethodError");

        } catch (NoSuchMethodError e) {
            //
            // org.evosuite.runtime.mock.java.util.MockUUID.UUID(JJ)Ljava/util/UUID;
            //
            verifyException("MakeItFit.trainingPlan.TrainingPlan", e);
        }
    }

    @Test(timeout = 4000)
    public void test30() throws Throwable {
        UUID          uUID0          = MockUUID.fromString("VH");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        TrainingPlan  trainingPlan0  = new TrainingPlan(uUID0, makeItFitDate0);
        String        string0        = trainingPlan0.toString();
        assertEquals(
            "        == (Training plan details) ==\n        Training Plan: 04000000-0500-4000-8600-000007000000\n        User Code: 00000000-0100-4000-8200-000003000000\n        Start Date: 14/02/2014\n        Activities(Iterations / Activity): []",
            string0);
    }

    @Test(timeout = 4000)
    public void test31() throws Throwable {
        UUID         uUID0         = MockUUID.randomUUID();
        TrainingPlan trainingPlan0 = new TrainingPlan(uUID0, (MakeItFitDate) null);
        PushUp       pushUp0 =
            new PushUp(uUID0, (MakeItFitDate) null, 0, "~`e Wv]gbj0LTkBC", "T", (-1339), 2891);
        trainingPlan0.addActivity(3302, pushUp0);
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        // Undeclared exception!
        try {
            trainingPlan0.updateActivities(makeItFitDate0, 0.0F);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.utils.MakeItFitDate", e);
        }
    }
}
