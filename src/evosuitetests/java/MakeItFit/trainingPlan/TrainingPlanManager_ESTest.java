/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 20:14:37 GMT 2025
 */

package MakeItFit.trainingPlan;

import java.util.List;
import java.util.UUID;

import MakeItFit.activities.Activity;
import MakeItFit.activities.implementation.Trail;
import MakeItFit.trainingPlan.TrainingPlan;
import MakeItFit.trainingPlan.TrainingPlanManager;
import MakeItFit.utils.MakeItFitDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true,
                     useVFS                = true,
                     useVNET               = true,
                     resetStaticState      = true,
                     useJEE                = true)
public class TrainingPlanManager_ESTest extends TrainingPlanManager_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        TrainingPlanManager trainingPlanManager0 = new TrainingPlanManager();
        assertNotNull(trainingPlanManager0);

        UUID uUID0 = MockUUID.randomUUID();
        assertEquals((-9_079_256_848_728_588_288L), uUID0.getLeastSignificantBits());
        assertEquals(16_793_600L, uUID0.getMostSignificantBits());
        assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
        assertNotNull(uUID0);

        UUID uUID1 = MockUUID.fromString("aXOL54N");
        assertFalse(uUID1.equals((Object) uUID0));
        assertNotSame(uUID1, uUID0);
        assertEquals("04000000-0500-4000-8600-000007000000", uUID1.toString());
        assertEquals(288_230_376_235_614_208L, uUID1.getMostSignificantBits());
        assertEquals((-8_791_026_472_509_767_680L), uUID1.getLeastSignificantBits());
        assertNotNull(uUID1);

        // Undeclared exception!
        try {
            trainingPlanManager0.removeActivity(uUID0, uUID1);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.trainingPlan.TrainingPlanManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        TrainingPlanManager trainingPlanManager0 = new TrainingPlanManager();
        assertNotNull(trainingPlanManager0);

        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        assertNotNull(makeItFitDate0);

        TrainingPlan trainingPlan0 = new TrainingPlan((UUID) null, makeItFitDate0);
        assertNotNull(trainingPlan0);

        TrainingPlan trainingPlan1 =
            trainingPlanManager0
                .constructTrainingPlanByObjectives(trainingPlan0, 0.0F, true, 0, 0, 5, 0);
        assertSame(trainingPlan0, trainingPlan1);
        assertSame(trainingPlan1, trainingPlan0);
        assertNotNull(trainingPlan1);
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        TrainingPlanManager trainingPlanManager0 = new TrainingPlanManager();
        assertNotNull(trainingPlanManager0);

        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        assertNotNull(makeItFitDate0);

        TrainingPlan trainingPlan0 = new TrainingPlan((UUID) null, makeItFitDate0);
        assertNotNull(trainingPlan0);

        try {
            trainingPlanManager0
                .constructTrainingPlanByObjectives(trainingPlan0, 0.0F, true, 3, 3, 1596, 3);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid input.
            //
            verifyException("MakeItFit.trainingPlan.TrainingPlanManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        TrainingPlanManager trainingPlanManager0 = new TrainingPlanManager();
        assertNotNull(trainingPlanManager0);

        UUID uUID0 = MockUUID.fromString("");
        assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
        assertEquals((-9_079_256_848_728_588_288L), uUID0.getLeastSignificantBits());
        assertEquals(16_793_600L, uUID0.getMostSignificantBits());
        assertNotNull(uUID0);

        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        assertNotNull(makeItFitDate0);

        TrainingPlan trainingPlan0 = new TrainingPlan(uUID0, makeItFitDate0);
        assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
        assertEquals((-9_079_256_848_728_588_288L), uUID0.getLeastSignificantBits());
        assertEquals(16_793_600L, uUID0.getMostSignificantBits());
        assertNotNull(trainingPlan0);

        trainingPlanManager0.insertTrainingPlan(trainingPlan0);
        assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
        assertEquals((-9_079_256_848_728_588_288L), uUID0.getLeastSignificantBits());
        assertEquals(16_793_600L, uUID0.getMostSignificantBits());

        List<TrainingPlan> list0 = trainingPlanManager0.getAllTrainingPlans();
        assertFalse(list0.isEmpty());
        assertEquals(1, list0.size());
        assertNotNull(list0);
        assertTrue(list0.contains(trainingPlan0));
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        TrainingPlanManager trainingPlanManager0 = new TrainingPlanManager();
        assertNotNull(trainingPlanManager0);

        // Undeclared exception!
        try {
            trainingPlanManager0.updateTrainingPlan((TrainingPlan) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.trainingPlan.TrainingPlanManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        TrainingPlanManager trainingPlanManager0 = new TrainingPlanManager();
        assertNotNull(trainingPlanManager0);

        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        assertNotNull(makeItFitDate0);

        TrainingPlan trainingPlan0 = new TrainingPlan((UUID) null, makeItFitDate0);
        assertNotNull(trainingPlan0);

        trainingPlanManager0.insertTrainingPlan(trainingPlan0);
        // Undeclared exception!
        try {
            trainingPlanManager0.extractActivities(makeItFitDate0, (UUID) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.trainingPlan.TrainingPlanManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        TrainingPlanManager trainingPlanManager0 = new TrainingPlanManager();
        assertNotNull(trainingPlanManager0);

        UUID uUID0 = MockUUID.fromString("");
        assertEquals(16_793_600L, uUID0.getMostSignificantBits());
        assertEquals((-9_079_256_848_728_588_288L), uUID0.getLeastSignificantBits());
        assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
        assertNotNull(uUID0);

        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        assertNotNull(makeItFitDate0);

        TrainingPlan trainingPlan0 = new TrainingPlan(uUID0, makeItFitDate0);
        assertEquals(16_793_600L, uUID0.getMostSignificantBits());
        assertEquals((-9_079_256_848_728_588_288L), uUID0.getLeastSignificantBits());
        assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
        assertNotNull(trainingPlan0);

        trainingPlanManager0.insertTrainingPlan(trainingPlan0);
        assertEquals(16_793_600L, uUID0.getMostSignificantBits());
        assertEquals((-9_079_256_848_728_588_288L), uUID0.getLeastSignificantBits());
        assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());

        UUID uUID1 = MockUUID.fromString("WeightSquat created automatically");
        assertFalse(uUID1.equals((Object) uUID0));
        assertNotSame(uUID1, uUID0);
        assertEquals("08000000-0900-4000-8a00-00000b000000", uUID1.toString());
        assertEquals(576_460_752_454_434_816L, uUID1.getMostSignificantBits());
        assertEquals((-8_502_796_096_290_947_072L), uUID1.getLeastSignificantBits());
        assertNotNull(uUID1);

        List<Activity> list0 = trainingPlanManager0.extractActivities(makeItFitDate0, uUID1);
        assertFalse(uUID1.equals((Object) uUID0));
        assertNotSame(uUID1, uUID0);
        assertEquals("08000000-0900-4000-8a00-00000b000000", uUID1.toString());
        assertEquals(576_460_752_454_434_816L, uUID1.getMostSignificantBits());
        assertEquals((-8_502_796_096_290_947_072L), uUID1.getLeastSignificantBits());
        assertEquals(0, list0.size());
        assertTrue(list0.isEmpty());
        assertNotNull(list0);
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        TrainingPlanManager trainingPlanManager0 = new TrainingPlanManager();
        assertNotNull(trainingPlanManager0);

        UUID uUID0 = MockUUID.fromString("");
        assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
        assertEquals((-9_079_256_848_728_588_288L), uUID0.getLeastSignificantBits());
        assertEquals(16_793_600L, uUID0.getMostSignificantBits());
        assertNotNull(uUID0);

        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        assertNotNull(makeItFitDate0);

        TrainingPlan trainingPlan0 = new TrainingPlan(uUID0, makeItFitDate0);
        assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
        assertEquals((-9_079_256_848_728_588_288L), uUID0.getLeastSignificantBits());
        assertEquals(16_793_600L, uUID0.getMostSignificantBits());
        assertNotNull(trainingPlan0);

        trainingPlanManager0.insertTrainingPlan(trainingPlan0);
        assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
        assertEquals((-9_079_256_848_728_588_288L), uUID0.getLeastSignificantBits());
        assertEquals(16_793_600L, uUID0.getMostSignificantBits());

        List<Activity> list0 = trainingPlanManager0.extractActivities(makeItFitDate0, uUID0);
        assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
        assertEquals((-9_079_256_848_728_588_288L), uUID0.getLeastSignificantBits());
        assertEquals(16_793_600L, uUID0.getMostSignificantBits());
        assertTrue(list0.isEmpty());
        assertEquals(0, list0.size());
        assertNotNull(list0);
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        TrainingPlanManager trainingPlanManager0 = new TrainingPlanManager();
        assertNotNull(trainingPlanManager0);

        UUID uUID0 = MockUUID.fromString("");
        assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
        assertEquals(16_793_600L, uUID0.getMostSignificantBits());
        assertEquals((-9_079_256_848_728_588_288L), uUID0.getLeastSignificantBits());
        assertNotNull(uUID0);

        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        assertNotNull(makeItFitDate0);

        TrainingPlan trainingPlan0 = new TrainingPlan(uUID0, makeItFitDate0);
        assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
        assertEquals(16_793_600L, uUID0.getMostSignificantBits());
        assertEquals((-9_079_256_848_728_588_288L), uUID0.getLeastSignificantBits());
        assertNotNull(trainingPlan0);

        trainingPlanManager0.insertTrainingPlan(trainingPlan0);
        assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
        assertEquals(16_793_600L, uUID0.getMostSignificantBits());
        assertEquals((-9_079_256_848_728_588_288L), uUID0.getLeastSignificantBits());

        trainingPlanManager0.updateActivities(makeItFitDate0, (-2676.7063F));
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        TrainingPlanManager trainingPlanManager0 = new TrainingPlanManager();
        assertNotNull(trainingPlanManager0);

        UUID uUID0 = MockUUID.fromString("");
        assertEquals(16_793_600L, uUID0.getMostSignificantBits());
        assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
        assertEquals((-9_079_256_848_728_588_288L), uUID0.getLeastSignificantBits());
        assertNotNull(uUID0);

        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        assertNotNull(makeItFitDate0);

        TrainingPlan trainingPlan0 = new TrainingPlan(uUID0, makeItFitDate0);
        assertEquals(16_793_600L, uUID0.getMostSignificantBits());
        assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
        assertEquals((-9_079_256_848_728_588_288L), uUID0.getLeastSignificantBits());
        assertNotNull(trainingPlan0);

        trainingPlanManager0.insertTrainingPlan(trainingPlan0);
        assertEquals(16_793_600L, uUID0.getMostSignificantBits());
        assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
        assertEquals((-9_079_256_848_728_588_288L), uUID0.getLeastSignificantBits());

        UUID uUID1 = MockUUID.fromString("WeightSquat created automatically");
        assertFalse(uUID1.equals((Object) uUID0));
        assertNotSame(uUID1, uUID0);
        assertEquals(576_460_752_454_434_816L, uUID1.getMostSignificantBits());
        assertEquals((-8_502_796_096_290_947_072L), uUID1.getLeastSignificantBits());
        assertEquals("08000000-0900-4000-8a00-00000b000000", uUID1.toString());
        assertNotNull(uUID1);

        List<TrainingPlan> list0 = trainingPlanManager0.getTrainingPlansFromUser(uUID1);
        assertFalse(uUID1.equals((Object) uUID0));
        assertNotSame(uUID1, uUID0);
        assertEquals(576_460_752_454_434_816L, uUID1.getMostSignificantBits());
        assertEquals((-8_502_796_096_290_947_072L), uUID1.getLeastSignificantBits());
        assertEquals("08000000-0900-4000-8a00-00000b000000", uUID1.toString());
        assertEquals(0, list0.size());
        assertTrue(list0.isEmpty());
        assertNotNull(list0);
        assertFalse(list0.contains(trainingPlan0));
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        TrainingPlanManager trainingPlanManager0 = new TrainingPlanManager();
        assertNotNull(trainingPlanManager0);

        UUID uUID0 = MockUUID.fromString("");
        assertEquals((-9_079_256_848_728_588_288L), uUID0.getLeastSignificantBits());
        assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
        assertEquals(16_793_600L, uUID0.getMostSignificantBits());
        assertNotNull(uUID0);

        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        assertNotNull(makeItFitDate0);

        TrainingPlan trainingPlan0 = new TrainingPlan(uUID0, makeItFitDate0);
        assertEquals((-9_079_256_848_728_588_288L), uUID0.getLeastSignificantBits());
        assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
        assertEquals(16_793_600L, uUID0.getMostSignificantBits());
        assertNotNull(trainingPlan0);

        trainingPlanManager0.insertTrainingPlan(trainingPlan0);
        assertEquals((-9_079_256_848_728_588_288L), uUID0.getLeastSignificantBits());
        assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
        assertEquals(16_793_600L, uUID0.getMostSignificantBits());

        List<TrainingPlan> list0 = trainingPlanManager0.getTrainingPlansFromUser(uUID0);
        assertEquals((-9_079_256_848_728_588_288L), uUID0.getLeastSignificantBits());
        assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
        assertEquals(16_793_600L, uUID0.getMostSignificantBits());
        assertFalse(list0.isEmpty());
        assertEquals(1, list0.size());
        assertNotNull(list0);
        assertTrue(list0.contains(trainingPlan0));
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        TrainingPlanManager trainingPlanManager0 = new TrainingPlanManager();
        assertNotNull(trainingPlanManager0);

        UUID uUID0 = MockUUID.fromString("I*a4v?/B3M/Sr3)wN");
        assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
        assertEquals(16_793_600L, uUID0.getMostSignificantBits());
        assertEquals((-9_079_256_848_728_588_288L), uUID0.getLeastSignificantBits());
        assertNotNull(uUID0);

        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        assertNotNull(makeItFitDate0);

        TrainingPlan trainingPlan0 = new TrainingPlan(uUID0, makeItFitDate0);
        assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
        assertEquals(16_793_600L, uUID0.getMostSignificantBits());
        assertEquals((-9_079_256_848_728_588_288L), uUID0.getLeastSignificantBits());
        assertNotNull(trainingPlan0);

        try {
            trainingPlanManager0.updateTrainingPlan(trainingPlan0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // Training Plan with code 04000000-0500-4000-8600-000007000000 does not exist.
            //
            verifyException("MakeItFit.trainingPlan.TrainingPlanManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        TrainingPlanManager trainingPlanManager0 = new TrainingPlanManager();
        assertNotNull(trainingPlanManager0);

        UUID uUID0 = MockUUID.fromString("NjPF@o~TL)9pAvN3q");
        assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
        assertEquals(16_793_600L, uUID0.getMostSignificantBits());
        assertEquals((-9_079_256_848_728_588_288L), uUID0.getLeastSignificantBits());
        assertNotNull(uUID0);

        try {
            trainingPlanManager0.getTrainingPlan(uUID0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // Training with code 00000000-0100-4000-8200-000003000000 does not exist.
            //
            verifyException("MakeItFit.trainingPlan.TrainingPlanManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        TrainingPlanManager trainingPlanManager0 = new TrainingPlanManager();
        assertNotNull(trainingPlanManager0);

        UUID uUID0 = MockUUID.fromString("WeightSquat created automatically");
        assertEquals((-9_079_256_848_728_588_288L), uUID0.getLeastSignificantBits());
        assertEquals(16_793_600L, uUID0.getMostSignificantBits());
        assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
        assertNotNull(uUID0);

        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        assertNotNull(makeItFitDate0);

        TrainingPlan trainingPlan0 = new TrainingPlan(uUID0, makeItFitDate0);
        assertEquals((-9_079_256_848_728_588_288L), uUID0.getLeastSignificantBits());
        assertEquals(16_793_600L, uUID0.getMostSignificantBits());
        assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
        assertNotNull(trainingPlan0);

        trainingPlanManager0.insertTrainingPlan(trainingPlan0);
        assertEquals((-9_079_256_848_728_588_288L), uUID0.getLeastSignificantBits());
        assertEquals(16_793_600L, uUID0.getMostSignificantBits());
        assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());

        try {
            trainingPlanManager0.insertTrainingPlan(trainingPlan0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // Training with code 04000000-0500-4000-8600-000007000000 already exists.
            //
            verifyException("MakeItFit.trainingPlan.TrainingPlanManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        TrainingPlanManager trainingPlanManager0 = new TrainingPlanManager();
        assertNotNull(trainingPlanManager0);

        try {
            trainingPlanManager0.insertTrainingPlan((TrainingPlan) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid input: trainingPlan cannot be null.
            //
            verifyException("MakeItFit.trainingPlan.TrainingPlanManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        TrainingPlanManager trainingPlanManager0 = new TrainingPlanManager();
        assertNotNull(trainingPlanManager0);

        UUID uUID0 = MockUUID.fromString("I*a4v?/B3M/Sr3)wN");
        assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
        assertEquals(16_793_600L, uUID0.getMostSignificantBits());
        assertEquals((-9_079_256_848_728_588_288L), uUID0.getLeastSignificantBits());
        assertNotNull(uUID0);

        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        assertNotNull(makeItFitDate0);

        TrainingPlan trainingPlan0 = new TrainingPlan(uUID0, makeItFitDate0);
        assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
        assertEquals(16_793_600L, uUID0.getMostSignificantBits());
        assertEquals((-9_079_256_848_728_588_288L), uUID0.getLeastSignificantBits());
        assertNotNull(trainingPlan0);

        trainingPlanManager0.insertTrainingPlan(trainingPlan0);
        assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
        assertEquals(16_793_600L, uUID0.getMostSignificantBits());
        assertEquals((-9_079_256_848_728_588_288L), uUID0.getLeastSignificantBits());

        trainingPlanManager0.updateTrainingPlan(trainingPlan0);
        assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
        assertEquals(16_793_600L, uUID0.getMostSignificantBits());
        assertEquals((-9_079_256_848_728_588_288L), uUID0.getLeastSignificantBits());
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        TrainingPlanManager trainingPlanManager0 = new TrainingPlanManager();
        assertNotNull(trainingPlanManager0);

        UUID uUID0 = MockUUID.fromString("I*a4v?/B3M/Sr3)wN");
        assertEquals(16_793_600L, uUID0.getMostSignificantBits());
        assertEquals((-9_079_256_848_728_588_288L), uUID0.getLeastSignificantBits());
        assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
        assertNotNull(uUID0);

        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        assertNotNull(makeItFitDate0);

        TrainingPlan trainingPlan0 = new TrainingPlan(uUID0, makeItFitDate0);
        assertEquals(16_793_600L, uUID0.getMostSignificantBits());
        assertEquals((-9_079_256_848_728_588_288L), uUID0.getLeastSignificantBits());
        assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
        assertNotNull(trainingPlan0);

        // Undeclared exception!
        trainingPlanManager0
            .constructTrainingPlanByObjectives(trainingPlan0, 0.0F, false, 0, 8, 0, 3412);
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        TrainingPlanManager trainingPlanManager0 = new TrainingPlanManager();
        UUID                uUID0                = MockUUID.fromString("I*a4v?/B3M/Sr3)wN");
        MakeItFitDate       makeItFitDate0       = new MakeItFitDate();
        TrainingPlan        trainingPlan0        = new TrainingPlan(uUID0, makeItFitDate0);
        // Undeclared exception!
        trainingPlanManager0
            .constructTrainingPlanByObjectives(trainingPlan0, 0, false, 0, 0, 0, 3412);
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        TrainingPlanManager trainingPlanManager0 = new TrainingPlanManager();
        UUID                uUID0                = MockUUID.fromString("I*a4v?/B3M/Sr3)wN");
        MakeItFitDate       makeItFitDate0       = new MakeItFitDate();
        TrainingPlan        trainingPlan0        = new TrainingPlan(uUID0, makeItFitDate0);
        try {
            trainingPlanManager0
                .constructTrainingPlanByObjectives(trainingPlan0, 0.0F, false, 0, 0, 0, (-422));
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid input.
            //
            verifyException("MakeItFit.trainingPlan.TrainingPlanManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
        TrainingPlanManager trainingPlanManager0 = new TrainingPlanManager();
        MakeItFitDate       makeItFitDate0       = new MakeItFitDate();
        TrainingPlan        trainingPlan0        = new TrainingPlan((UUID) null, makeItFitDate0);
        try {
            trainingPlanManager0
                .constructTrainingPlanByObjectives(trainingPlan0, 0.0F, true, 0, 0, (-492), 0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid input.
            //
            verifyException("MakeItFit.trainingPlan.TrainingPlanManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test20() throws Throwable {
        TrainingPlanManager trainingPlanManager0 = new TrainingPlanManager();
        UUID                uUID0                = MockUUID.fromString("I*a4v?/B3M/Sr3)wN");
        MakeItFitDate       makeItFitDate0       = new MakeItFitDate();
        TrainingPlan        trainingPlan0        = new TrainingPlan(uUID0, makeItFitDate0);
        try {
            trainingPlanManager0
                .constructTrainingPlanByObjectives(trainingPlan0, 0.0F, false, 0, (-422), 0, 3412);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid input.
            //
            verifyException("MakeItFit.trainingPlan.TrainingPlanManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
        TrainingPlanManager trainingPlanManager0 = new TrainingPlanManager();
        UUID                uUID0                = MockUUID.fromString("I*a4v?/B3M/Sr3)wN");
        MakeItFitDate       makeItFitDate0       = new MakeItFitDate();
        TrainingPlan        trainingPlan0        = new TrainingPlan(uUID0, makeItFitDate0);
        try {
            trainingPlanManager0
                .constructTrainingPlanByObjectives(trainingPlan0, 0.0F, false, 29, 29, 29, (-422));
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid input.
            //
            verifyException("MakeItFit.trainingPlan.TrainingPlanManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        TrainingPlanManager trainingPlanManager0 = new TrainingPlanManager();
        // Undeclared exception!
        try {
            trainingPlanManager0
                .constructTrainingPlanByObjectives((TrainingPlan) null, (-1.0F), false, 0, 0, 0, 0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.trainingPlan.TrainingPlanManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        TrainingPlanManager trainingPlanManager0 = new TrainingPlanManager();
        try {
            trainingPlanManager0.constructTrainingPlanByObjectives((TrainingPlan) null,
                                                                   (-2676.7063F),
                                                                   false,
                                                                   (-176),
                                                                   2413,
                                                                   1215,
                                                                   (-176));
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid input.
            //
            verifyException("MakeItFit.trainingPlan.TrainingPlanManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test24() throws Throwable {
        TrainingPlanManager trainingPlanManager0 = new TrainingPlanManager();
        UUID                uUID0                = MockUUID.randomUUID();
        try {
            trainingPlanManager0.createTrainingPlan(uUID0, (MakeItFitDate) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid input: userCode, startDate.
            //
            verifyException("MakeItFit.trainingPlan.TrainingPlanManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test25() throws Throwable {
        TrainingPlanManager trainingPlanManager0 = new TrainingPlanManager();
        UUID                uUID0                = MockUUID.fromString("");
        MakeItFitDate       makeItFitDate0       = new MakeItFitDate();
        TrainingPlan trainingPlan0 = trainingPlanManager0.createTrainingPlan(uUID0, makeItFitDate0);
        assertNotNull(trainingPlan0);
    }

    @Test(timeout = 4000)
    public void test26() throws Throwable {
        TrainingPlanManager trainingPlanManager0 = new TrainingPlanManager();
        try {
            trainingPlanManager0.createTrainingPlan((UUID) null, (MakeItFitDate) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid input: userCode, startDate.
            //
            verifyException("MakeItFit.trainingPlan.TrainingPlanManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test27() throws Throwable {
        TrainingPlanManager trainingPlanManager0 = new TrainingPlanManager();
        UUID                uUID0                = MockUUID.fromString("");
        trainingPlanManager0.removeTrainingPlan(uUID0);
        assertEquals(16_793_600L, uUID0.getMostSignificantBits());
    }

    @Test(timeout = 4000)
    public void test28() throws Throwable {
        TrainingPlanManager trainingPlanManager0 = new TrainingPlanManager();
        MakeItFitDate       makeItFitDate0       = new MakeItFitDate();
        Trail               trail0               = new Trail((UUID) null,
                                 makeItFitDate0,
                                 (-3931),
                                 "I*a4v?/B3M/Sr3)wN",
                                 "I*a4v?/B3M/Sr3)wN",
                                 (-3931),
                                 (-3931),
                                 (-3931),
                                 (-1739));
        // Undeclared exception!
        try {
            trainingPlanManager0.addActivity((UUID) null, (-3931), trail0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.trainingPlan.TrainingPlanManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test29() throws Throwable {
        TrainingPlanManager trainingPlanManager0 = new TrainingPlanManager();
        List<TrainingPlan>  list0                = trainingPlanManager0.getAllTrainingPlans();
        assertEquals(0, list0.size());
    }
}
