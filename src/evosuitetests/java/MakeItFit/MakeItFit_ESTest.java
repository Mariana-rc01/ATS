/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 20:33:25 GMT 2025
 */

package MakeItFit;

import java.io.FileNotFoundException;
import java.util.List;
import java.util.UUID;

import MakeItFit.MakeItFit;
import MakeItFit.activities.Activity;
import MakeItFit.activities.implementation.PushUp;
import MakeItFit.activities.implementation.Trail;
import MakeItFit.trainingPlan.TrainingPlan;
import MakeItFit.users.Gender;
import MakeItFit.users.User;
import MakeItFit.users.types.Amateur;
import MakeItFit.utils.MakeItFitDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true,
                     useVFS                = true,
                     useVNET               = true,
                     resetStaticState      = true,
                     useJEE                = true)
public class MakeItFit_ESTest extends MakeItFit_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        // Undeclared exception!
        try {
            makeItFit0.updateUserEmail((String) null, "T(R7YL}");
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.MakeItFit", e);
        }
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        // Undeclared exception!
        try {
            makeItFit0.updateUserPhone(":e*2", "");
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email  does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        // Undeclared exception!
        try {
            makeItFit0.updateUserAddress(".a]0C|^", "S^0{da");
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email s^0{da does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        // Undeclared exception!
        try {
            makeItFit0.updateUserName("", "H]J");
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email h]j does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        Gender    gender0    = Gender.Other;
        try {
            makeItFit0.createUser("ckD~KwQO}a[X5",
                                  377,
                                  gender0,
                                  (-1091.1373F),
                                  377,
                                  377,
                                  (-1811),
                                  "L PQFe-ly[u^4w",
                                  (String) null,
                                  "MakeItFit.activities.implementation.PushUp",
                                  (-1811),
                                  "H");
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid input: name, address, phone, or email cannot be null.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        Gender    gender0    = Gender.Male;
        try {
            makeItFit0.createUser("Invalid user weight",
                                  (-944),
                                  gender0,
                                  0.0F,
                                  0,
                                  6,
                                  6,
                                  "",
                                  "Specialization: ",
                                  "",
                                  1463,
                                  "Specialization: ");
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid input: age, weight, height, bpm, and level must be non-negative.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        try {
            makeItFit0.saveSystem("MakeItFit.MakeItFit");
            fail("Expecting exception: FileNotFoundException");

        } catch (FileNotFoundException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.MakeItFit", e);
        }
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        MakeItFit     makeItFit0     = new MakeItFit();
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        UUID          uUID1          = makeItFit0.createTrainingPlan(uUID0, makeItFitDate0);
        makeItFit0.removeActivityFromTrainingPlan(uUID1, uUID0);
        assertEquals(288_230_376_235_614_208L, uUID1.getMostSignificantBits());
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        MakeItFit     makeItFit0     = new MakeItFit();
        UUID          uUID0          = MockUUID.fromString("&) ");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        UUID          uUID1          = makeItFit0.createTrainingPlan(uUID0, makeItFitDate0);
        PushUp pushUp0 = new PushUp(uUID1, makeItFitDate0, (-426), "", "&) ", (-2668), (-5308));
        makeItFit0.addActivityToTrainingPlan(uUID1, pushUp0, (-2015));
        assertEquals((-8_791_026_472_509_767_680L), uUID1.getLeastSignificantBits());
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        MakeItFit     makeItFit0     = new MakeItFit();
        Gender        gender0        = Gender.Other;
        Amateur       amateur0       = new Amateur("=0^sNP:",
                                       1,
                                       gender0,
                                       1,
                                       2,
                                       2,
                                       222,
                                       "=0^sNP:",
                                       "=0^sNP:",
                                       "q<Lk a lE0rWb1u5\"K");
        UUID          uUID0          = amateur0.getCode();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        makeItFit0.createTrainingPlan(uUID0, makeItFitDate0);
        List<TrainingPlan> list0 = makeItFit0.getTrainingPlansFromUser(uUID0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        MakeItFit     makeItFit0     = new MakeItFit();
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        UUID          uUID1          = makeItFit0.createTrainingPlan(uUID0, makeItFitDate0);
        TrainingPlan  trainingPlan0  = makeItFit0.getTrainingPlan(uUID1);
        makeItFit0.updateTrainingPlan(trainingPlan0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        MakeItFit     makeItFit0     = new MakeItFit();
        Gender        gender0        = Gender.Other;
        Amateur       amateur0       = new Amateur("Invalid dates.",
                                       1,
                                       gender0,
                                       1,
                                       2,
                                       2,
                                       222,
                                       "Invalid dates.",
                                       "Invalid dates.",
                                       "q<Lk a lE0rWb1u5\"K");
        UUID          uUID0          = amateur0.getCode();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        makeItFit0.createTrainingPlan(uUID0, makeItFitDate0);
        List<TrainingPlan> list0 = makeItFit0.getAllTrainingPlans();
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        MakeItFit     makeItFit0     = new MakeItFit();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        MakeItFitDate makeItFitDate1 = makeItFitDate0.plusDays((-2073));
        User user0 = makeItFit0.executeQuerywhoBurnsMoreCalories(makeItFitDate1, makeItFitDate0);
        assertNull(user0);
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        MakeItFit     makeItFit0     = new MakeItFit();
        MakeItFitDate makeItFitDate0 = MakeItFitDate.of(3, 3, 3);
        MakeItFitDate makeItFitDate1 = makeItFitDate0.plusDays((-648));
        User user0 = makeItFit0.executeQueryWhoDidTheMostActivities(makeItFitDate1, makeItFitDate0);
        assertNull(user0);
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        // Undeclared exception!
        try {
            makeItFit0.updateTrainingPlan((TrainingPlan) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.trainingPlan.TrainingPlanManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        Gender    gender0    = Gender.Male;
        Amateur   amateur0   = new Amateur("",
                                       702,
                                       gender0,
                                       702,
                                       1,
                                       1,
                                       702,
                                       "MakeItFit.users.types.ProfIssional",
                                       "MakeItFit.users.types.ProfIssional",
                                       "");
        UUID      uUID0      = amateur0.getCode();
        // Undeclared exception!
        try {
            makeItFit0.removeActivityFromUser("MakeItFit.users.types.ProfIssional", uUID0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // makeitfit.users.types.profissional
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        // Undeclared exception!
        try {
            makeItFit0.loadSystem((String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        // Undeclared exception!
        try {
            makeItFit0.getActivitiesFromUser((String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        // Undeclared exception!
        try {
            makeItFit0.existsUserWithEmail((String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
        MakeItFit     makeItFit0     = new MakeItFit();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        MakeItFitDate makeItFitDate1 = makeItFitDate0.plusDays(2226);
        // Undeclared exception!
        try {
            makeItFit0.executeQueryHowManyKMsDone("", makeItFitDate0, makeItFitDate1);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email  does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test20() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        // Undeclared exception!
        try {
            makeItFit0.executeQueryHowManyKMsDone((String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
        MakeItFit     makeItFit0     = new MakeItFit();
        MakeItFitDate makeItFitDate0 = MakeItFitDate.of((-947), 1, 1);
        MakeItFitDate makeItFitDate1 = makeItFitDate0.plusDays((-1762));
        // Undeclared exception!
        try {
            makeItFit0.executeQueryHowManyAltimetryDone("", makeItFitDate1, makeItFitDate0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email  does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        MakeItFit     makeItFit0     = new MakeItFit();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        MakeItFitDate makeItFitDate1 = makeItFitDate0.plusDays((-286));
        // Undeclared exception!
        try {
            makeItFit0.executeQueryHowManyAltimetryDone((String) null,
                                                        makeItFitDate1,
                                                        makeItFitDate0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        // Undeclared exception!
        try {
            makeItFit0.executeQueryHowManyAltimetryDone((String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test24() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        Gender    gender0    = Gender.Male;
        try {
            makeItFit0.createUser("&`",
                                  1761,
                                  gender0,
                                  1761,
                                  1761,
                                  1761,
                                  1761,
                                  "&`",
                                  "&`",
                                  "&`",
                                  1761,
                                  "&`");
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // &`
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test25() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        UUID      uUID0      = MockUUID.randomUUID();
        try {
            makeItFit0.createTrainingPlan(uUID0, (MakeItFitDate) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid input: userCode, startDate.
            //
            verifyException("MakeItFit.trainingPlan.TrainingPlanManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test26() throws Throwable {
        MakeItFit     makeItFit0     = new MakeItFit();
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        TrainingPlan  trainingPlan0  = new TrainingPlan(uUID0, makeItFitDate0);
        // Undeclared exception!
        try {
            makeItFit0
                .constructTrainingPlanByObjectives(trainingPlan0, true, 1, (-1970), 0, (-1970));
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with code 00000000-0100-4000-8200-000003000000 does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test27() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        // Undeclared exception!
        try {
            makeItFit0.addActivityToUser("E,:#3Ox", (Activity) null);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // e,:#3ox
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test28() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        // Undeclared exception!
        try {
            makeItFit0.getUser("");
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email  does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test29() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        Object    object0    = new Object();
        try {
            makeItFit0.getUser(object0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.MakeItFit", e);
        }
    }

    @Test(timeout = 4000)
    public void test30() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        Gender    gender0    = Gender.Male;
        Amateur   amateur0 =
            new Amateur("cK", 384, gender0, 384, 384, 0, 0, "cK", "cK", "d'yi)u{Mb.1");
        UUID uUID0 = amateur0.getCode();
        // Undeclared exception!
        try {
            makeItFit0.getUser(uUID0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with code 00000000-0100-4000-8200-000003000000 does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test31() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        try {
            makeItFit0.removeUser("|@x!lN]|Jq");
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email |@x!ln]|jq does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test32() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        UUID      uUID0      = MockUUID.randomUUID();
        try {
            makeItFit0.removeUser(uUID0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with code 00000000-0100-4000-8200-000003000000 does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        MakeItFit     makeItFit0     = new MakeItFit();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        // Undeclared exception!
        try {
            makeItFit0.executeQuerywhoBurnsMoreCalories(makeItFitDate0, makeItFitDate0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid dates.
            //
            verifyException("MakeItFit.queries.WhoBurnsMoreCalories", e);
        }
    }

    @Test(timeout = 4000)
    public void test34() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        UUID      uUID0      = MockUUID.fromString("");
        // Undeclared exception!
        try {
            makeItFit0.removeActivityFromTrainingPlan(uUID0, uUID0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.trainingPlan.TrainingPlanManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test35() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        UUID      uUID0      = MockUUID.fromString("x@3CJ\"");
        // Undeclared exception!
        try {
            makeItFit0.getTrainingPlan(uUID0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // Training with code 00000000-0100-4000-8200-000003000000 does not exist.
            //
            verifyException("MakeItFit.trainingPlan.TrainingPlanManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test36() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        // Undeclared exception!
        try {
            makeItFit0
                .constructTrainingPlanByObjectives((TrainingPlan) null, true, 0, 0, 0, (-1742));
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.MakeItFit", e);
        }
    }

    @Test(timeout = 4000)
    public void test37() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        // Undeclared exception!
        try {
            makeItFit0.updateUserBpm(40, "lA`L]/[$aBrfK");
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email la`l]/[$abrfk does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test38() throws Throwable {
        MakeItFit    makeItFit0    = new MakeItFit();
        UUID         uUID0         = MockUUID.fromString("@pf*F");
        TrainingPlan trainingPlan0 = new TrainingPlan(uUID0, (MakeItFitDate) null);
        try {
            makeItFit0.updateTrainingPlan(trainingPlan0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // Training Plan with code 04000000-0500-4000-8600-000007000000 does not exist.
            //
            verifyException("MakeItFit.trainingPlan.TrainingPlanManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test39() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        User      user0      = makeItFit0.executeQuerywhoBurnsMoreCalories();
        assertNull(user0);
    }

    @Test(timeout = 4000)
    public void test40() throws Throwable {
        MakeItFit     makeItFit0     = new MakeItFit();
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Trail         trail0         = new Trail(uUID0,
                                 makeItFitDate0,
                                 (-830),
                                 "Professional",
                                 "Professional",
                                 (-830),
                                 (-830),
                                 574.181,
                                 (-830));
        // Undeclared exception!
        try {
            makeItFit0.addActivityToTrainingPlan(uUID0, trail0, 2);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.trainingPlan.TrainingPlanManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test41() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        // Undeclared exception!
        try {
            makeItFit0.updateUserHeight((-360), "#{Va31v?]1");
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email #{va31v?]1 does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test42() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        try {
            makeItFit0.loadSystem("383>");
            fail("Expecting exception: FileNotFoundException");

        } catch (FileNotFoundException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.MakeItFit", e);
        }
    }

    @Test(timeout = 4000)
    public void test43() throws Throwable {
        MakeItFit     makeItFit0     = new MakeItFit();
        MakeItFitDate makeItFitDate0 = MakeItFitDate.of((-947), 1, 1);
        // Undeclared exception!
        try {
            makeItFit0.executeQueryHowManyAltimetryDone("", makeItFitDate0, makeItFitDate0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid date.
            //
            verifyException("MakeItFit.queries.HowManyAltimetryDone", e);
        }
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        // Undeclared exception!
        try {
            makeItFit0.getActivitiesFromUser("MakeItFit.activities.types.DistanceWithAltimetry");
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // makeitfit.activities.types.distancewithaltimetry
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test45() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        UUID      uUID0      = MockUUID.randomUUID();
        // Undeclared exception!
        try {
            makeItFit0.removeActivityFromUser((String) null, uUID0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test46() throws Throwable {
        MakeItFit     makeItFit0     = new MakeItFit();
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        makeItFit0.createTrainingPlan(uUID0, makeItFitDate0);
        // Undeclared exception!
        try {
            makeItFit0.executeQueryMostDemandingTrainingPlan();
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with code 00000000-0100-4000-8200-000003000000 does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test47() throws Throwable {
        MakeItFit     makeItFit0     = new MakeItFit();
        Gender        gender0        = Gender.Female;
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Amateur       amateur0       = new Amateur("<zUtL cr_-",
                                       0,
                                       gender0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       "<zUtL cr_-",
                                       (String) null,
                                       (String) null);
        UUID          uUID0          = amateur0.getCode();
        // Undeclared exception!
        try {
            makeItFit0.updateSystem(makeItFitDate0, uUID0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with code 00000000-0100-4000-8200-000003000000 does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test48() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        Gender    gender0    = Gender.Other;
        // Undeclared exception!
        try {
            makeItFit0.updateUserGender(gender0, "");
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email  does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test49() throws Throwable {
        MakeItFit     makeItFit0     = new MakeItFit();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        // Undeclared exception!
        try {
            makeItFit0.executeQueryHowManyKMsDone("", makeItFitDate0, makeItFitDate0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid dates.
            //
            verifyException("MakeItFit.queries.HowManyKMsDone", e);
        }
    }

    @Test(timeout = 4000)
    public void test50() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        // Undeclared exception!
        try {
            makeItFit0.updateUserAge((-180), "");
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email  does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test51() throws Throwable {
        MakeItFit          makeItFit0 = new MakeItFit();
        UUID               uUID0      = MockUUID.randomUUID();
        List<TrainingPlan> list0      = makeItFit0.getTrainingPlansFromUser(uUID0);
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test52() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        Gender    gender0    = Gender.Male;
        // Undeclared exception!
        try {
            makeItFit0.createUser("DistanceWithAltimetry",
                                  0,
                                  gender0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  "3Bpb=M",
                                  "",
                                  "",
                                  0,
                                  (String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test53() throws Throwable {
        MakeItFit     makeItFit0     = new MakeItFit();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        // Undeclared exception!
        try {
            makeItFit0.executeQueryWhoDidTheMostActivities(makeItFitDate0, makeItFitDate0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid dates.
            //
            verifyException("MakeItFit.queries.WhoDidTheMostActivities", e);
        }
    }

    @Test(timeout = 4000)
    public void test54() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        String    string0    = makeItFit0.executeQueryMostDoneActivity();
        assertEquals("DistanceWithAltimetry", string0);
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        UUID      uUID0      = MockUUID.randomUUID();
        makeItFit0.removeTrainingPlan(uUID0);
        assertEquals((-9_079_256_848_728_588_288L), uUID0.getLeastSignificantBits());
    }

    @Test(timeout = 4000)
    public void test56() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        // Undeclared exception!
        try {
            makeItFit0.saveSystem((String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.io.File", e);
        }
    }

    @Test(timeout = 4000)
    public void test57() throws Throwable {
        MakeItFit          makeItFit0 = new MakeItFit();
        List<TrainingPlan> list0      = makeItFit0.getAllTrainingPlans();
        // Undeclared exception!
        try {
            makeItFit0.removeUser(list0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.MakeItFit", e);
        }
    }

    @Test(timeout = 4000)
    public void test58() throws Throwable {
        MakeItFit  makeItFit0 = new MakeItFit();
        List<User> list0      = makeItFit0.getAllUsers();
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test59() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        boolean   boolean0   = makeItFit0.existsUserWithEmail("9>h2_O%-=");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test60() throws Throwable {
        MakeItFit    makeItFit0    = new MakeItFit();
        TrainingPlan trainingPlan0 = makeItFit0.executeQueryMostDemandingTrainingPlan();
        assertNull(trainingPlan0);
    }

    @Test(timeout = 4000)
    public void test61() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        User      user0      = makeItFit0.executeQueryWhoDidTheMostActivities();
        assertNull(user0);
    }

    @Test(timeout = 4000)
    public void test62() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        // Undeclared exception!
        try {
            makeItFit0.executeQueryHowManyAltimetryDone("D");
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email d does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test63() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        // Undeclared exception!
        try {
            makeItFit0.executeQueryHowManyKMsDone(
                "MakeItFit.exceptions.EntityDoesNotExistException");
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email makeitfit.exceptions.entitydoesnotexistexception does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test64() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        // Undeclared exception!
        try {
            makeItFit0.updateUserWeight((-1.0F), "`Xgk#<|+");
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email `xgk#<|+ does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test65() throws Throwable {
        MakeItFit     makeItFit0     = new MakeItFit();
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        PushUp pushUp0 = new PushUp(uUID0, makeItFitDate0, 437, (String) null, (String) null, 0, 0);
        // Undeclared exception!
        try {
            makeItFit0.addActivityToUser((String) null, pushUp0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test66() throws Throwable {
        MakeItFit makeItFit0 = new MakeItFit();
        // Undeclared exception!
        try {
            makeItFit0.updateUserLevel(1298, "D,u3Y:y");
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email d,u3y:y does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }
}
