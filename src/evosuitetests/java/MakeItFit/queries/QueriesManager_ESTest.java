/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 20:25:46 GMT 2025
 */

package MakeItFit.queries;

import java.util.UUID;

import MakeItFit.queries.QueriesManager;
import MakeItFit.trainingPlan.TrainingPlan;
import MakeItFit.trainingPlan.TrainingPlanManager;
import MakeItFit.users.Gender;
import MakeItFit.users.User;
import MakeItFit.users.UserManager;
import MakeItFit.users.types.Amateur;
import MakeItFit.users.types.Professional;
import MakeItFit.utils.MakeItFitDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true,
                     useVFS                = true,
                     useVNET               = true,
                     resetStaticState      = true,
                     useJEE                = true)
public class QueriesManager_ESTest extends QueriesManager_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        QueriesManager queriesManager0 = new QueriesManager();
        UserManager    userManager0    = new UserManager();
        MakeItFitDate  makeItFitDate0  = new MakeItFitDate();
        MakeItFitDate  makeItFitDate1  = makeItFitDate0.plusDays((-782));
        User           user0 = queriesManager0.executeQuerywhoBurnsMoreCalories(userManager0,
                                                                      makeItFitDate1,
                                                                      makeItFitDate0);
        assertNull(user0);
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        QueriesManager queriesManager0 = new QueriesManager();
        UserManager    userManager0    = new UserManager();
        MakeItFitDate  makeItFitDate0  = new MakeItFitDate();
        MakeItFitDate  makeItFitDate1  = makeItFitDate0.plusDays(3748);
        User           user0 = queriesManager0.executeQueryWhoDidTheMostActivities(userManager0,
                                                                         makeItFitDate0,
                                                                         makeItFitDate1);
        assertNull(user0);
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        QueriesManager queriesManager0 = new QueriesManager();
        UserManager    userManager0    = new UserManager();
        Gender         gender0         = Gender.Female;
        Professional   professional0   = new Professional("H>_MlS.L!A0$J'",
                                                      6,
                                                      gender0,
                                                      6,
                                                      10,
                                                      1582,
                                                      0,
                                                      "H>_MlS.L!A0$J'",
                                                      "",
                                                      "",
                                                      6);
        userManager0.insertUser(professional0);
        double double0 = queriesManager0.executeQueryHowManyKMsDone(userManager0, "");
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        MakeItFitDate  makeItFitDate0  = new MakeItFitDate();
        QueriesManager queriesManager0 = new QueriesManager();
        MakeItFitDate  makeItFitDate1  = makeItFitDate0.plusDays((-257));
        // Undeclared exception!
        try {
            queriesManager0.executeQuerywhoBurnsMoreCalories((UserManager) null,
                                                             makeItFitDate1,
                                                             makeItFitDate0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.queries.WhoBurnsMoreCalories", e);
        }
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        QueriesManager queriesManager0 = new QueriesManager();
        // Undeclared exception!
        try {
            queriesManager0.executeQuerywhoBurnsMoreCalories((UserManager) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.queries.WhoBurnsMoreCalories", e);
        }
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        QueriesManager queriesManager0 = new QueriesManager();
        UserManager    userManager0    = new UserManager();
        Gender         gender0         = Gender.Male;
        Amateur        amateur0        = new Amateur("MakeItFit.queries.QueriesManager",
                                       0,
                                       gender0,
                                       0,
                                       1081,
                                       0,
                                       0,
                                       "MakeItFit.queries.QueriesManager",
                                       "",
                                       "MakeItFit.queries.QueriesManager");
        userManager0.insertUser(amateur0);
        // Undeclared exception!
        try {
            queriesManager0.executeQuerywhoBurnsMoreCalories(userManager0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid calculateIndex arguments
            //
            verifyException("MakeItFit.users.User", e);
        }
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        QueriesManager queriesManager0 = new QueriesManager();
        MakeItFitDate  makeItFitDate0  = new MakeItFitDate();
        MakeItFitDate  makeItFitDate1  = makeItFitDate0.plusDays((-2546));
        MakeItFitDate  makeItFitDate2  = makeItFitDate1.clone();
        // Undeclared exception!
        try {
            queriesManager0.executeQueryWhoDidTheMostActivities((UserManager) null,
                                                                makeItFitDate2,
                                                                makeItFitDate0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.queries.WhoDidTheMostActivities", e);
        }
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        QueriesManager queriesManager0 = new QueriesManager();
        // Undeclared exception!
        try {
            queriesManager0.executeQueryWhoDidTheMostActivities((UserManager) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.queries.WhoDidTheMostActivities", e);
        }
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        QueriesManager queriesManager0 = new QueriesManager();
        // Undeclared exception!
        try {
            queriesManager0.executeQueryMostDoneActivity((UserManager) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.queries.MostDoneActivity", e);
        }
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        QueriesManager      queriesManager0      = new QueriesManager();
        TrainingPlanManager trainingPlanManager0 = new TrainingPlanManager();
        UserManager         userManager0         = new UserManager();
        UUID                uUID0                = MockUUID.randomUUID();
        MakeItFitDate       makeItFitDate0       = new MakeItFitDate();
        TrainingPlan trainingPlan0 = trainingPlanManager0.createTrainingPlan(uUID0, makeItFitDate0);
        trainingPlanManager0.insertTrainingPlan(trainingPlan0);
        // Undeclared exception!
        try {
            queriesManager0.executeQueryMostDemandingTrainingPlan(trainingPlanManager0,
                                                                  userManager0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with code 00000000-0100-4000-8200-000003000000 does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        QueriesManager queriesManager0 = new QueriesManager();
        UserManager    userManager0    = new UserManager();
        // Undeclared exception!
        try {
            queriesManager0.executeQueryMostDemandingTrainingPlan((TrainingPlanManager) null,
                                                                  userManager0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.queries.MostDemandingTrainingPlan", e);
        }
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        QueriesManager queriesManager0 = new QueriesManager();
        UserManager    userManager0    = new UserManager();
        MakeItFitDate  makeItFitDate0  = new MakeItFitDate();
        MakeItFitDate  makeItFitDate1  = makeItFitDate0.plusDays((-2990));
        MakeItFitDate  makeItFitDate2  = makeItFitDate1.clone();
        // Undeclared exception!
        try {
            queriesManager0.executeQueryHowManyKMsDone(userManager0,
                                                       "\\)kPB",
                                                       makeItFitDate2,
                                                       makeItFitDate0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email \\)kpb does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        MakeItFitDate  makeItFitDate0  = new MakeItFitDate();
        QueriesManager queriesManager0 = new QueriesManager();
        MakeItFitDate  makeItFitDate1  = makeItFitDate0.plusDays(6250);
        // Undeclared exception!
        try {
            queriesManager0.executeQueryHowManyKMsDone((UserManager) null,
                                                       "l~b>G5 LJ",
                                                       makeItFitDate0,
                                                       makeItFitDate1);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.queries.HowManyKMsDone", e);
        }
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        QueriesManager queriesManager0 = new QueriesManager();
        // Undeclared exception!
        try {
            queriesManager0.executeQueryHowManyKMsDone((UserManager) null, " calories, ");
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.queries.HowManyKMsDone", e);
        }
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        QueriesManager queriesManager0 = new QueriesManager();
        UserManager    userManager0    = new UserManager();
        MakeItFitDate  makeItFitDate0  = new MakeItFitDate();
        MakeItFitDate  makeItFitDate1  = makeItFitDate0.plusDays(1);
        // Undeclared exception!
        try {
            queriesManager0.executeQueryHowManyAltimetryDone(userManager0,
                                                             "",
                                                             makeItFitDate0,
                                                             makeItFitDate1);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email  does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        QueriesManager queriesManager0 = new QueriesManager();
        UserManager    userManager0    = new UserManager();
        MakeItFitDate  makeItFitDate0  = new MakeItFitDate();
        MakeItFitDate  makeItFitDate1  = makeItFitDate0.plusDays(1282);
        // Undeclared exception!
        try {
            queriesManager0.executeQueryHowManyAltimetryDone(userManager0,
                                                             (String) null,
                                                             makeItFitDate0,
                                                             makeItFitDate1);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        QueriesManager queriesManager0 = new QueriesManager();
        // Undeclared exception!
        try {
            queriesManager0.executeQueryHowManyAltimetryDone((UserManager) null, "{%-{o)7");
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.queries.HowManyAltimetryDone", e);
        }
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        QueriesManager      queriesManager0      = new QueriesManager();
        TrainingPlanManager trainingPlanManager0 = new TrainingPlanManager();
        UserManager         userManager0         = new UserManager();
        TrainingPlan        trainingPlan0 =
            queriesManager0.executeQueryMostDemandingTrainingPlan(trainingPlanManager0,
                                                                  userManager0);
        assertNull(trainingPlan0);
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        QueriesManager queriesManager0 = new QueriesManager();
        UserManager    userManager0    = new UserManager();
        MakeItFitDate  makeItFitDate0  = new MakeItFitDate();
        // Undeclared exception!
        try {
            queriesManager0.executeQueryHowManyAltimetryDone(userManager0,
                                                             "2gA.*$Uqd[HY7~Z",
                                                             makeItFitDate0,
                                                             (MakeItFitDate) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid date.
            //
            verifyException("MakeItFit.queries.HowManyAltimetryDone", e);
        }
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
        MakeItFitDate  makeItFitDate0  = new MakeItFitDate();
        QueriesManager queriesManager0 = new QueriesManager();
        // Undeclared exception!
        try {
            queriesManager0.executeQueryHowManyKMsDone((UserManager) null,
                                                       "l~b>G5 LJ",
                                                       makeItFitDate0,
                                                       makeItFitDate0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid dates.
            //
            verifyException("MakeItFit.queries.HowManyKMsDone", e);
        }
    }

    @Test(timeout = 4000)
    public void test20() throws Throwable {
        QueriesManager queriesManager0 = new QueriesManager();
        UserManager    userManager0    = new UserManager();
        // Undeclared exception!
        try {
            queriesManager0.executeQueryHowManyKMsDone(userManager0, "DistanceWithAltimetry");
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email distancewithaltimetry does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
        MakeItFitDate  makeItFitDate0  = new MakeItFitDate();
        QueriesManager queriesManager0 = new QueriesManager();
        // Undeclared exception!
        try {
            queriesManager0.executeQueryWhoDidTheMostActivities((UserManager) null,
                                                                makeItFitDate0,
                                                                makeItFitDate0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid dates.
            //
            verifyException("MakeItFit.queries.WhoDidTheMostActivities", e);
        }
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        QueriesManager queriesManager0 = new QueriesManager();
        UserManager    userManager0    = new UserManager();
        User           user0 = queriesManager0.executeQuerywhoBurnsMoreCalories(userManager0);
        assertNull(user0);
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        MakeItFitDate  makeItFitDate0  = new MakeItFitDate();
        QueriesManager queriesManager0 = new QueriesManager();
        UserManager    userManager0    = new UserManager();
        // Undeclared exception!
        try {
            queriesManager0.executeQuerywhoBurnsMoreCalories(userManager0,
                                                             makeItFitDate0,
                                                             makeItFitDate0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid dates.
            //
            verifyException("MakeItFit.queries.WhoBurnsMoreCalories", e);
        }
    }

    @Test(timeout = 4000)
    public void test24() throws Throwable {
        QueriesManager queriesManager0 = new QueriesManager();
        UserManager    userManager0    = new UserManager();
        // Undeclared exception!
        try {
            queriesManager0.executeQueryHowManyAltimetryDone(userManager0, "v-iSQ_GR30rQYw`");
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email v-isq_gr30rqyw` does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test25() throws Throwable {
        QueriesManager queriesManager0 = new QueriesManager();
        UserManager    userManager0    = new UserManager();
        User           user0 = queriesManager0.executeQueryWhoDidTheMostActivities(userManager0);
        assertNull(user0);
    }

    @Test(timeout = 4000)
    public void test26() throws Throwable {
        QueriesManager queriesManager0 = new QueriesManager();
        UserManager    userManager0    = new UserManager();
        String         string0         = queriesManager0.executeQueryMostDoneActivity(userManager0);
        assertEquals("DistanceWithAltimetry", string0);
    }
}
