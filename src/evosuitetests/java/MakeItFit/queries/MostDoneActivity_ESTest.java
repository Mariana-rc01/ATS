/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 20:27:55 GMT 2025
 */

package MakeItFit.queries;

import java.util.UUID;

import MakeItFit.activities.implementation.PushUp;
import MakeItFit.activities.implementation.Running;
import MakeItFit.activities.implementation.Trail;
import MakeItFit.activities.implementation.WeightSquat;
import MakeItFit.queries.MostDoneActivity;
import MakeItFit.users.Gender;
import MakeItFit.users.UserManager;
import MakeItFit.users.types.Professional;
import MakeItFit.utils.MakeItFitDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true,
                     useVFS                = true,
                     useVNET               = true,
                     resetStaticState      = true,
                     useJEE                = true)
public class MostDoneActivity_ESTest extends MostDoneActivity_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        MostDoneActivity mostDoneActivity0 = new MostDoneActivity();
        // Undeclared exception!
        try {
            mostDoneActivity0.executeQuery((UserManager) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.queries.MostDoneActivity", e);
        }
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        MostDoneActivity mostDoneActivity0 = new MostDoneActivity();
        UserManager      userManager0      = new UserManager();
        Gender           gender0           = Gender.Other;
        Professional     professional0     = new Professional("Disman.ke",
                                                      1238,
                                                      gender0,
                                                      1238,
                                                      1238,
                                                      1238,
                                                      1238,
                                                      "Disman.ke",
                                                      "Disman.ke",
                                                      "Disman.ke",
                                                      1238);
        UUID             uUID0             = MockUUID.randomUUID();
        MakeItFitDate    makeItFitDate0    = new MakeItFitDate();
        PushUp           pushUp0 =
            new PushUp(uUID0, makeItFitDate0, 1238, "Disman.ke", "Disman.ke", 1238, 1238);
        professional0.addActivity(pushUp0);
        userManager0.insertUser(professional0);
        String string0 = mostDoneActivity0.executeQuery(userManager0);
        assertEquals("Repetitions", string0);
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        MostDoneActivity mostDoneActivity0 = new MostDoneActivity();
        UserManager      userManager0      = new UserManager();
        Gender           gender0           = Gender.Other;
        Professional     professional0 =
            new Professional("D5", 20, gender0, 20, 20, 20, 20, "D5", "D5", "D5", 20);
        UUID          uUID0          = MockUUID.randomUUID();
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        WeightSquat   weightSquat0 =
            new WeightSquat(uUID0, makeItFitDate0, 20, "D5", "D5", 20, 20, 20);
        professional0.addActivity(weightSquat0);
        userManager0.insertUser(professional0);
        String string0 = mostDoneActivity0.executeQuery(userManager0);
        assertEquals("RepetitionsWithWeights", string0);
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        MostDoneActivity mostDoneActivity0 = new MostDoneActivity();
        UserManager      userManager0      = new UserManager();
        Gender           gender0           = Gender.Other;
        Professional     professional0 =
            new Professional("", 1242, gender0, 1242, 1242, 1242, 1242, "", "", "", 1242);
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        Running       running0 = new Running((UUID) null, makeItFitDate0, 1242, "", "", 1242, 1242);
        professional0.addActivity(running0);
        userManager0.insertUser(professional0);
        String string0 = mostDoneActivity0.executeQuery(userManager0);
        assertEquals("Distance", string0);
    }

    @Test(timeout = 4000)
    public void test4() throws Throwable {
        MostDoneActivity mostDoneActivity0 = new MostDoneActivity();
        UserManager      userManager0      = new UserManager();
        Gender           gender0           = Gender.Male;
        Professional     professional0     = new Professional("DistanceWithAltimetry",
                                                      1126,
                                                      gender0,
                                                      1126,
                                                      1126,
                                                      1126,
                                                      1126,
                                                      "DistanceWithAltimetry",
                                                      "DistanceWithAltimetry",
                                                      "DistanceWithAltimetry",
                                                      1126);
        MakeItFitDate    makeItFitDate0    = new MakeItFitDate();
        Trail            trail0            = new Trail((UUID) null,
                                 makeItFitDate0,
                                 1126,
                                 "DistanceWithAltimetry",
                                 "DistanceWithAltimetry",
                                 1126,
                                 1126,
                                 1126,
                                 1126);
        professional0.addActivity(trail0);
        userManager0.insertUser(professional0);
        String string0 = mostDoneActivity0.executeQuery(userManager0);
        assertEquals("DistanceWithAltimetry", string0);
    }
}
