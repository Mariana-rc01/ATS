/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 20:24:41 GMT 2025
 */

package MakeItFit.queries;

import java.util.UUID;

import MakeItFit.activities.implementation.Running;
import MakeItFit.activities.implementation.WeightSquat;
import MakeItFit.queries.WhoBurnsMoreCalories;
import MakeItFit.users.Gender;
import MakeItFit.users.User;
import MakeItFit.users.UserManager;
import MakeItFit.users.types.Occasional;
import MakeItFit.utils.MakeItFitDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true,
                     useVFS                = true,
                     useVNET               = true,
                     resetStaticState      = true,
                     useJEE                = true)
public class WhoBurnsMoreCalories_ESTest extends WhoBurnsMoreCalories_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        WhoBurnsMoreCalories whoBurnsMoreCalories0 = new WhoBurnsMoreCalories();
        UserManager          userManager0          = new UserManager();
        Gender               gender0               = Gender.Other;
        Occasional           occasional0 =
            new Occasional("", 337, gender0, 337, 337, 337, 337, "", "", "", 337);
        userManager0.insertUser(occasional0);
        UUID          uUID0          = MockUUID.fromString("");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        WeightSquat   weightSquat0 =
            new WeightSquat(uUID0, makeItFitDate0, 1, "1h,1~ Ht.*`rO", "", (-4133), 337, 1);
        occasional0.addActivity(weightSquat0);
        User user0 = whoBurnsMoreCalories0.executeQuery(userManager0);
        assertNull(user0);
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        WhoBurnsMoreCalories whoBurnsMoreCalories0 = new WhoBurnsMoreCalories();
        UserManager          userManager0          = new UserManager();
        Gender               gender0               = Gender.Female;
        Occasional           occasional0 =
            new Occasional("", 334, gender0, 334, 334, 334, 334, "", "", "", 334);
        userManager0.insertUser(occasional0);
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        UUID          uUID0          = MockUUID.randomUUID();
        Running       running0       = new Running(uUID0, makeItFitDate0, 334, "", "", 334, 334);
        userManager0.addActivityToUser("", running0);
        userManager0.addActivityToUser("", running0);
        User user0 = whoBurnsMoreCalories0.executeQuery(userManager0);
        assertEquals("", user0.getEmail());
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        WhoBurnsMoreCalories whoBurnsMoreCalories0 = new WhoBurnsMoreCalories();
        UserManager          userManager0          = new UserManager();
        Gender               gender0               = Gender.Female;
        Occasional           occasional0 =
            new Occasional("", 334, gender0, 334, 334, 334, 334, "", "", "", 334);
        userManager0.insertUser(occasional0);
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        UUID          uUID0          = MockUUID.randomUUID();
        Running       running0       = new Running(uUID0, makeItFitDate0, 334, "", "", 334, 334);
        running0.setDistance((-2877.1));
        userManager0.addActivityToUser("", running0);
        MakeItFitDate makeItFitDate1 = makeItFitDate0.plusDays(334);
        System.setCurrentTimeMillis(334);
        MakeItFitDate makeItFitDate2 = new MakeItFitDate();
        User          user0 =
            whoBurnsMoreCalories0.executeQuery(userManager0, makeItFitDate2, makeItFitDate1);
        assertNull(user0);
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        WhoBurnsMoreCalories whoBurnsMoreCalories0 = new WhoBurnsMoreCalories();
        UserManager          userManager0          = new UserManager();
        Gender               gender0               = Gender.Female;
        Occasional           occasional0 =
            new Occasional("", 334, gender0, 334, 334, 334, 334, "", "", "", 334);
        userManager0.insertUser(occasional0);
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        UUID          uUID0          = MockUUID.randomUUID();
        Running       running0       = new Running(uUID0, makeItFitDate0, 334, "", "", 334, 334);
        userManager0.addActivityToUser("", running0);
        MakeItFitDate makeItFitDate1 = makeItFitDate0.plusDays(334);
        userManager0.addActivityToUser("", running0);
        System.setCurrentTimeMillis(334);
        MakeItFitDate makeItFitDate2 = new MakeItFitDate();
        User          user0 =
            whoBurnsMoreCalories0.executeQuery(userManager0, makeItFitDate2, makeItFitDate1);
        assertSame(user0, occasional0);
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        WhoBurnsMoreCalories whoBurnsMoreCalories0 = new WhoBurnsMoreCalories();
        UserManager          userManager0          = new UserManager();
        Gender               gender0               = Gender.Other;
        Occasional           occasional0           = new Occasional("L$6*R;`GQJP,y#",
                                                3506,
                                                gender0,
                                                3506,
                                                3506,
                                                3506,
                                                3506,
                                                "L$6*R;`GQJP,y#",
                                                "L$6*R;`GQJP,y#",
                                                "L$6*R;`GQJP,y#",
                                                3506);
        occasional0.setAge(0);
        userManager0.insertUser(occasional0);
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        UUID          uUID0          = MockUUID.randomUUID();
        Running       running0       = new Running(uUID0,
                                       makeItFitDate0,
                                       3506,
                                       "L$6*R;`GQJP,y#",
                                       "L$6*R;`GQJP,y#",
                                       3506,
                                       3506);
        userManager0.addActivityToUser("L$6*R;`GQJP,y#", running0);
        MakeItFitDate makeItFitDate1 = makeItFitDate0.plusDays(3506);
        System.setCurrentTimeMillis(3506);
        MakeItFitDate makeItFitDate2 = new MakeItFitDate();
        User          user0 =
            whoBurnsMoreCalories0.executeQuery(userManager0, makeItFitDate2, makeItFitDate1);
        assertEquals(3506, user0.getHeight());
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        WhoBurnsMoreCalories whoBurnsMoreCalories0 = new WhoBurnsMoreCalories();
        UserManager          userManager0          = new UserManager();
        Gender               gender0               = Gender.Other;
        Occasional           occasional0 =
            new Occasional("", 337, gender0, 337, 337, 337, 337, "", "", "", 337);
        occasional0.setLevel(0);
        userManager0.insertUser(occasional0);
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        UUID          uUID0          = MockUUID.fromString(")r4+C;'\"`&cDaE'");
        Running       running0       = new Running(uUID0, makeItFitDate0, 337, "", "", 337, 337);
        userManager0.addActivityToUser("", running0);
        User user0 = whoBurnsMoreCalories0.executeQuery(userManager0);
        assertEquals("", user0.getName());
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        WhoBurnsMoreCalories whoBurnsMoreCalories0 = new WhoBurnsMoreCalories();
        UserManager          userManager0          = new UserManager();
        Gender               gender0               = Gender.Other;
        Occasional           occasional0           = new Occasional("L$6*R;`GQJP,y#",
                                                3506,
                                                gender0,
                                                3506,
                                                3506,
                                                3506,
                                                3506,
                                                "L$6*R;`GQJP,y#",
                                                "L$6*R;`GQJP,y#",
                                                "L$6*R;`GQJP,y#",
                                                3506);
        occasional0.setAge(0);
        userManager0.insertUser(occasional0);
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        UUID          uUID0          = MockUUID.randomUUID();
        Running       running0       = new Running(uUID0,
                                       makeItFitDate0,
                                       3506,
                                       "L$6*R;`GQJP,y#",
                                       "L$6*R;`GQJP,y#",
                                       3506,
                                       3506);
        userManager0.addActivityToUser("L$6*R;`GQJP,y#", running0);
        User user0 = whoBurnsMoreCalories0.executeQuery(userManager0);
        assertEquals(3506, user0.getBpm());
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        WhoBurnsMoreCalories whoBurnsMoreCalories0 = new WhoBurnsMoreCalories();
        MakeItFitDate        makeItFitDate0        = new MakeItFitDate();
        MakeItFitDate        makeItFitDate1        = makeItFitDate0.plusDays(1);
        // Undeclared exception!
        try {
            whoBurnsMoreCalories0.executeQuery((UserManager) null, makeItFitDate0, makeItFitDate1);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.queries.WhoBurnsMoreCalories", e);
        }
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        WhoBurnsMoreCalories whoBurnsMoreCalories0 = new WhoBurnsMoreCalories();
        // Undeclared exception!
        try {
            whoBurnsMoreCalories0.executeQuery((UserManager) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.queries.WhoBurnsMoreCalories", e);
        }
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        WhoBurnsMoreCalories whoBurnsMoreCalories0 = new WhoBurnsMoreCalories();
        UserManager          userManager0          = new UserManager();
        Gender               gender0               = Gender.Female;
        Occasional           occasional0 =
            new Occasional("", 337, gender0, 0.0F, 0, 0, 337, "odI\"i", "", "0#q}vyG)5No 8.:", 337);
        userManager0.insertUser(occasional0);
        // Undeclared exception!
        try {
            whoBurnsMoreCalories0.executeQuery(userManager0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid calculateIndex arguments
            //
            verifyException("MakeItFit.users.User", e);
        }
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        WhoBurnsMoreCalories whoBurnsMoreCalories0 = new WhoBurnsMoreCalories();
        UserManager          userManager0          = new UserManager();
        Gender               gender0               = Gender.Female;
        Occasional           occasional0 =
            new Occasional("", 334, gender0, 334, 334, 334, 334, "", "", "", 334);
        userManager0.insertUser(occasional0);
        User user0 = whoBurnsMoreCalories0.executeQuery(userManager0);
        assertNull(user0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        WhoBurnsMoreCalories whoBurnsMoreCalories0 = new WhoBurnsMoreCalories();
        UserManager          userManager0          = new UserManager();
        Gender               gender0               = Gender.Female;
        Occasional           occasional0 =
            new Occasional("", 334, gender0, 334, 334, 334, 334, "", "", "", 334);
        userManager0.insertUser(occasional0);
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        UUID          uUID0          = MockUUID.randomUUID();
        Running       running0       = new Running(uUID0, makeItFitDate0, 334, "", "", 334, 334);
        userManager0.addActivityToUser("", running0);
        System.setCurrentTimeMillis(334);
        MakeItFitDate makeItFitDate1 = new MakeItFitDate();
        User          user0 =
            whoBurnsMoreCalories0.executeQuery(userManager0, makeItFitDate1, makeItFitDate0);
        assertNull(user0);
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        WhoBurnsMoreCalories whoBurnsMoreCalories0 = new WhoBurnsMoreCalories();
        UserManager          userManager0          = new UserManager();
        Gender               gender0               = Gender.Female;
        Occasional           occasional0 =
            new Occasional("", 334, gender0, 334, 334, 334, 334, "", "", "", 334);
        userManager0.insertUser(occasional0);
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        UUID          uUID0          = MockUUID.randomUUID();
        Running       running0       = new Running(uUID0, makeItFitDate0, 334, "", "", 334, 334);
        userManager0.addActivityToUser("", running0);
        MakeItFitDate makeItFitDate1 = makeItFitDate0.plusDays(334);
        User          user0 =
            whoBurnsMoreCalories0.executeQuery(userManager0, makeItFitDate0, makeItFitDate1);
        assertNull(user0);
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        WhoBurnsMoreCalories whoBurnsMoreCalories0 = new WhoBurnsMoreCalories();
        UserManager          userManager0          = new UserManager();
        MakeItFitDate        makeItFitDate0        = new MakeItFitDate();
        // Undeclared exception!
        try {
            whoBurnsMoreCalories0.executeQuery(userManager0, makeItFitDate0, (MakeItFitDate) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid dates.
            //
            verifyException("MakeItFit.queries.WhoBurnsMoreCalories", e);
        }
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        UserManager          userManager0          = new UserManager();
        WhoBurnsMoreCalories whoBurnsMoreCalories0 = new WhoBurnsMoreCalories();
        // Undeclared exception!
        try {
            whoBurnsMoreCalories0.executeQuery(userManager0,
                                               (MakeItFitDate) null,
                                               (MakeItFitDate) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid dates.
            //
            verifyException("MakeItFit.queries.WhoBurnsMoreCalories", e);
        }
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        WhoBurnsMoreCalories whoBurnsMoreCalories0 = new WhoBurnsMoreCalories();
        UserManager          userManager0          = new UserManager();
        MakeItFitDate        makeItFitDate0        = new MakeItFitDate();
        // Undeclared exception!
        try {
            whoBurnsMoreCalories0.executeQuery(userManager0, makeItFitDate0, makeItFitDate0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid dates.
            //
            verifyException("MakeItFit.queries.WhoBurnsMoreCalories", e);
        }
    }
}
