/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 20:29:00 GMT 2025
 */

package MakeItFit.queries;

import java.util.UUID;

import MakeItFit.activities.implementation.Running;
import MakeItFit.activities.implementation.WeightSquat;
import MakeItFit.queries.HowManyKMsDone;
import MakeItFit.users.Gender;
import MakeItFit.users.UserManager;
import MakeItFit.users.types.Amateur;
import MakeItFit.utils.MakeItFitDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true,
                     useVFS                = true,
                     useVNET               = true,
                     resetStaticState      = true,
                     useJEE                = true)
public class HowManyKMsDone_ESTest extends HowManyKMsDone_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        HowManyKMsDone howManyKMsDone0 = new HowManyKMsDone();
        UserManager    userManager0    = new UserManager();
        Gender         gender0         = Gender.Male;
        Amateur        amateur0 = new Amateur("8", 12, gender0, 12, 12, 12, 12, "8", "8", "8");
        MakeItFitDate  makeItFitDate0 = new MakeItFitDate();
        UUID           uUID0          = MockUUID.randomUUID();
        Running        running0       = new Running(uUID0,
                                       makeItFitDate0,
                                       1,
                                       "8",
                                       "MakeItFit.ueries.HowManyKMs>one",
                                       (-22.529456300227302),
                                       1);
        amateur0.addActivity(running0);
        userManager0.insertUser(amateur0);
        double double0 = howManyKMsDone0.executeQuery(userManager0, "8");
        assertEquals((-0.0225294563002273), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        MakeItFitDate  makeItFitDate0  = new MakeItFitDate();
        MakeItFitDate  makeItFitDate1  = makeItFitDate0.plusDays((-3622));
        HowManyKMsDone howManyKMsDone0 = new HowManyKMsDone();
        // Undeclared exception!
        try {
            howManyKMsDone0.executeQuery((UserManager) null, "", makeItFitDate1, makeItFitDate0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.queries.HowManyKMsDone", e);
        }
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        HowManyKMsDone howManyKMsDone0 = new HowManyKMsDone();
        UserManager    userManager0    = new UserManager();
        // Undeclared exception!
        try {
            howManyKMsDone0.executeQuery(userManager0, "Invalid dates.");
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email invalid dates. does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        HowManyKMsDone howManyKMsDone0 = new HowManyKMsDone();
        UserManager    userManager0    = new UserManager();
        // Undeclared exception!
        try {
            howManyKMsDone0.executeQuery(userManager0, (String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        HowManyKMsDone howManyKMsDone0 = new HowManyKMsDone();
        UserManager    userManager0    = new UserManager();
        Gender         gender0         = Gender.Male;
        Amateur        amateur0 = new Amateur("8", 12, gender0, 12, 12, 12, 12, "8", "8", "8");
        UUID           uUID0    = MockUUID.fromString("8");
        MakeItFitDate  makeItFitDate0 = MakeItFitDate.of(12, 12, 12);
        WeightSquat weightSquat0 = new WeightSquat(uUID0, makeItFitDate0, 12, "8", "8", 12, 12, 12);
        amateur0.addActivity(weightSquat0);
        userManager0.insertUser(amateur0);
        double double0 = howManyKMsDone0.executeQuery(userManager0, "8");
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        HowManyKMsDone howManyKMsDone0 = new HowManyKMsDone();
        UserManager    userManager0    = new UserManager();
        Gender         gender0         = Gender.Male;
        Amateur        amateur0 = new Amateur("8", 12, gender0, 12, 12, 12, 12, "8", "8", "8");
        UUID           uUID0    = MockUUID.fromString("8");
        MakeItFitDate  makeItFitDate0 = MakeItFitDate.of(12, 12, 12);
        Running        running0       = new Running(uUID0, makeItFitDate0, 12, "8", "8", 12, 12);
        amateur0.addActivity(running0);
        userManager0.insertUser(amateur0);
        double double0 = howManyKMsDone0.executeQuery(userManager0, "8");
        assertEquals(0.012, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        HowManyKMsDone howManyKMsDone0 = new HowManyKMsDone();
        UserManager    userManager0    = new UserManager();
        Gender         gender0         = Gender.Male;
        Amateur        amateur0 = new Amateur("8", 12, gender0, 12, 12, 12, 12, "8", "8", "8");
        UUID           uUID0    = MockUUID.fromString("8");
        MakeItFitDate  makeItFitDate0 = MakeItFitDate.of(12, 12, 12);
        WeightSquat weightSquat0 = new WeightSquat(uUID0, makeItFitDate0, 12, "8", "8", 12, 12, 12);
        amateur0.addActivity(weightSquat0);
        userManager0.insertUser(amateur0);
        MakeItFitDate makeItFitDate1 = makeItFitDate0.plusDays(12);
        double        double0 =
            howManyKMsDone0.executeQuery(userManager0, "8", makeItFitDate0, makeItFitDate1);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        HowManyKMsDone howManyKMsDone0 = new HowManyKMsDone();
        UserManager    userManager0    = new UserManager();
        Gender         gender0         = Gender.Male;
        Amateur        amateur0 = new Amateur("8", 12, gender0, 12, 12, 12, 12, "8", "8", "8");
        UUID           uUID0    = MockUUID.fromString("8");
        MakeItFitDate  makeItFitDate0 = MakeItFitDate.of(12, 12, 12);
        Running        running0       = new Running(uUID0, makeItFitDate0, 12, "8", "8", 12, 12);
        amateur0.addActivity(running0);
        userManager0.insertUser(amateur0);
        MakeItFitDate makeItFitDate1 = makeItFitDate0.plusDays(12);
        double        double0 =
            howManyKMsDone0.executeQuery(userManager0, "8", makeItFitDate0, makeItFitDate1);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        HowManyKMsDone howManyKMsDone0 = new HowManyKMsDone();
        UserManager    userManager0    = new UserManager();
        MakeItFitDate  makeItFitDate0  = MakeItFitDate.of(12, 12, 12);
        MakeItFitDate  makeItFitDate1  = makeItFitDate0.plusDays(12);
        // Undeclared exception!
        try {
            howManyKMsDone0.executeQuery(userManager0, "8", makeItFitDate0, makeItFitDate1);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email 8 does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        HowManyKMsDone howManyKMsDone0 = new HowManyKMsDone();
        UserManager    userManager0    = new UserManager();
        MakeItFitDate  makeItFitDate0  = new MakeItFitDate();
        // Undeclared exception!
        try {
            howManyKMsDone0.executeQuery(userManager0, "", makeItFitDate0, (MakeItFitDate) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid dates.
            //
            verifyException("MakeItFit.queries.HowManyKMsDone", e);
        }
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        HowManyKMsDone howManyKMsDone0 = new HowManyKMsDone();
        UserManager    userManager0    = new UserManager();
        MakeItFitDate  makeItFitDate0  = MakeItFitDate.of(12, 12, 12);
        // Undeclared exception!
        try {
            howManyKMsDone0.executeQuery(userManager0, "8", makeItFitDate0, makeItFitDate0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid dates.
            //
            verifyException("MakeItFit.queries.HowManyKMsDone", e);
        }
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        HowManyKMsDone howManyKMsDone0 = new HowManyKMsDone();
        UserManager    userManager0    = new UserManager();
        // Undeclared exception!
        try {
            howManyKMsDone0.executeQuery(userManager0,
                                         "Male",
                                         (MakeItFitDate) null,
                                         (MakeItFitDate) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid dates.
            //
            verifyException("MakeItFit.queries.HowManyKMsDone", e);
        }
    }
}
