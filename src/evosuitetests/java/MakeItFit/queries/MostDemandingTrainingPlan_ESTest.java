/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 20:26:50 GMT 2025
 */

package MakeItFit.queries;

import java.util.UUID;

import MakeItFit.queries.MostDemandingTrainingPlan;
import MakeItFit.trainingPlan.TrainingPlan;
import MakeItFit.trainingPlan.TrainingPlanManager;
import MakeItFit.users.Gender;
import MakeItFit.users.UserManager;
import MakeItFit.users.types.Amateur;
import MakeItFit.utils.MakeItFitDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true,
                     useVFS                = true,
                     useVNET               = true,
                     resetStaticState      = true,
                     useJEE                = true)
public class MostDemandingTrainingPlan_ESTest extends MostDemandingTrainingPlan_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        MostDemandingTrainingPlan mostDemandingTrainingPlan0 = new MostDemandingTrainingPlan();
        UserManager               userManager0               = new UserManager();
        // Undeclared exception!
        try {
            mostDemandingTrainingPlan0.executeQuery((TrainingPlanManager) null, userManager0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.queries.MostDemandingTrainingPlan", e);
        }
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        MostDemandingTrainingPlan mostDemandingTrainingPlan0 = new MostDemandingTrainingPlan();
        UserManager               userManager0               = new UserManager();
        TrainingPlanManager       trainingPlanManager0       = new TrainingPlanManager();
        UUID                      uUID0                      = MockUUID.randomUUID();
        MakeItFitDate             makeItFitDate0             = new MakeItFitDate();
        Gender                    gender0                    = Gender.Other;
        Random.setNextRandom(0);
        Amateur amateur0 = new Amateur("+[4", 0, gender0, 0, 0, 1, 1, "2Q]", "#b~CTBiBy}klF$r", "");
        userManager0.insertUser(amateur0);
        TrainingPlan trainingPlan0 = trainingPlanManager0.createTrainingPlan(uUID0, makeItFitDate0);
        trainingPlanManager0.insertTrainingPlan(trainingPlan0);
        // Undeclared exception!
        try {
            mostDemandingTrainingPlan0.executeQuery(trainingPlanManager0, userManager0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid calculateIndex arguments
            //
            verifyException("MakeItFit.users.User", e);
        }
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        MostDemandingTrainingPlan mostDemandingTrainingPlan0 = new MostDemandingTrainingPlan();
        UserManager               userManager0               = new UserManager();
        TrainingPlanManager       trainingPlanManager0       = new TrainingPlanManager();
        UUID                      uUID0                      = MockUUID.randomUUID();
        MakeItFitDate             makeItFitDate0             = new MakeItFitDate();
        TrainingPlan              trainingPlan0 = new TrainingPlan(uUID0, makeItFitDate0);
        trainingPlanManager0.insertTrainingPlan(trainingPlan0);
        // Undeclared exception!
        try {
            mostDemandingTrainingPlan0.executeQuery(trainingPlanManager0, userManager0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with code 00000000-0100-4000-8200-000003000000 does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        MostDemandingTrainingPlan mostDemandingTrainingPlan0 = new MostDemandingTrainingPlan();
        UserManager               userManager0               = new UserManager();
        TrainingPlanManager       trainingPlanManager0       = new TrainingPlanManager();
        TrainingPlan              trainingPlan0 =
            mostDemandingTrainingPlan0.executeQuery(trainingPlanManager0, userManager0);
        assertNull(trainingPlan0);
    }
}
