/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 20:23:35 GMT 2025
 */

package MakeItFit.queries;

import java.util.UUID;

import MakeItFit.activities.implementation.PushUp;
import MakeItFit.activities.implementation.Trail;
import MakeItFit.queries.HowManyAltimetryDone;
import MakeItFit.users.Gender;
import MakeItFit.users.UserManager;
import MakeItFit.users.types.Professional;
import MakeItFit.utils.MakeItFitDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true,
                     useVFS                = true,
                     useVNET               = true,
                     resetStaticState      = true,
                     useJEE                = true)
public class HowManyAltimetryDone_ESTest extends HowManyAltimetryDone_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        HowManyAltimetryDone howManyAltimetryDone0 = new HowManyAltimetryDone();
        UserManager          userManager0          = new UserManager();
        Gender               gender0               = Gender.Other;
        Professional         professional0         = new Professional("4.-Q2e/3",
                                                      115,
                                                      gender0,
                                                      115,
                                                      115,
                                                      115,
                                                      115,
                                                      "4.-Q2e/3",
                                                      "4.-Q2e/3",
                                                      "4.-Q2e/3",
                                                      115);
        UUID                 uUID0                 = MockUUID.fromString("4.-Q2e/3");
        MakeItFitDate        makeItFitDate0        = new MakeItFitDate();
        Trail                trail0 =
            new Trail(uUID0, makeItFitDate0, 115, "4.-Q2e/3", "4.-Q2e/3", 115, 115, 115, 115);
        trail0.setElevationGain((-1129.5728258107));
        professional0.addActivity(trail0);
        userManager0.insertUser(professional0);
        MakeItFitDate makeItFitDate1 = makeItFitDate0.plusDays((-1));
        MakeItFitDate makeItFitDate2 = makeItFitDate0.plusDays(115);
        double        double0        = howManyAltimetryDone0.executeQuery(userManager0,
                                                            "4.-Q2e/3",
                                                            makeItFitDate1,
                                                            makeItFitDate2);
        assertEquals((-1014.5728258106999), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        HowManyAltimetryDone howManyAltimetryDone0 = new HowManyAltimetryDone();
        UserManager          userManager0          = new UserManager();
        Gender               gender0               = Gender.Other;
        Professional         professional0         = new Professional("Invalid date.",
                                                      57,
                                                      gender0,
                                                      57,
                                                      57,
                                                      57,
                                                      57,
                                                      "Invalid date.",
                                                      "Invalid date.",
                                                      "Invalid date.",
                                                      57);
        UUID                 uUID0                 = MockUUID.fromString("Invalid date.");
        MakeItFitDate        makeItFitDate0        = new MakeItFitDate();
        Trail                trail0                = new Trail(uUID0,
                                 makeItFitDate0,
                                 2870,
                                 "Amateur",
                                 " does not exist.",
                                 (-1784.0),
                                 (-101.971),
                                 0.0,
                                 2870);
        professional0.addActivity(trail0);
        userManager0.insertUser(professional0);
        double double0 = howManyAltimetryDone0.executeQuery(userManager0, "Invalid date.");
        assertEquals((-101.971), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        HowManyAltimetryDone howManyAltimetryDone0 = new HowManyAltimetryDone();
        UserManager          userManager0          = new UserManager();
        MakeItFitDate        makeItFitDate0        = new MakeItFitDate();
        MakeItFitDate        makeItFitDate1        = makeItFitDate0.plusDays((-278));
        MakeItFitDate        makeItFitDate2        = makeItFitDate1.clone();
        // Undeclared exception!
        try {
            howManyAltimetryDone0.executeQuery(userManager0,
                                               (String) null,
                                               makeItFitDate2,
                                               makeItFitDate0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        HowManyAltimetryDone howManyAltimetryDone0 = new HowManyAltimetryDone();
        UserManager          userManager0          = new UserManager();
        // Undeclared exception!
        try {
            howManyAltimetryDone0.executeQuery(userManager0, "Invalid date.");
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email invalid date. does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        HowManyAltimetryDone howManyAltimetryDone0 = new HowManyAltimetryDone();
        // Undeclared exception!
        try {
            howManyAltimetryDone0.executeQuery((UserManager) null, "");
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("MakeItFit.queries.HowManyAltimetryDone", e);
        }
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        HowManyAltimetryDone howManyAltimetryDone0 = new HowManyAltimetryDone();
        UserManager          userManager0          = new UserManager();
        Gender               gender0               = Gender.Other;
        Professional         professional0 =
            new Professional("{Ug", 64, gender0, 64, 64, 64, 64, "{Ug", "{Ug", "{Ug", 64);
        UUID          uUID0          = MockUUID.fromString("{Ug");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        PushUp        pushUp0        = new PushUp(uUID0, makeItFitDate0, 64, "{Ug", "{Ug", 64, 64);
        professional0.addActivity(pushUp0);
        userManager0.insertUser(professional0);
        double double0 = howManyAltimetryDone0.executeQuery(userManager0, "{Ug");
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        HowManyAltimetryDone howManyAltimetryDone0 = new HowManyAltimetryDone();
        UserManager          userManager0          = new UserManager();
        Gender               gender0               = Gender.Other;
        Professional         professional0         = new Professional("Invalid date.",
                                                      47,
                                                      gender0,
                                                      47,
                                                      47,
                                                      47,
                                                      47,
                                                      "Invalid date.",
                                                      "Invalid date.",
                                                      "Invalid date.",
                                                      47);
        UUID                 uUID0                 = MockUUID.fromString("Invalid date.");
        MakeItFitDate        makeItFitDate0        = new MakeItFitDate();
        Trail                trail0 =
            new Trail(uUID0, makeItFitDate0, 47, "Invalid date.", "Invalid date.", 47, 47, 47, 47);
        professional0.addActivity(trail0);
        userManager0.insertUser(professional0);
        double double0 = howManyAltimetryDone0.executeQuery(userManager0, "Invalid date.");
        assertEquals(94.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        HowManyAltimetryDone howManyAltimetryDone0 = new HowManyAltimetryDone();
        UserManager          userManager0          = new UserManager();
        Gender               gender0               = Gender.Other;
        Professional         professional0         = new Professional("4.-Q2e/3",
                                                      115,
                                                      gender0,
                                                      115,
                                                      115,
                                                      115,
                                                      115,
                                                      "4.-Q2e/3",
                                                      "4.-Q2e/3",
                                                      "4.-Q2e/3",
                                                      115);
        UUID                 uUID0                 = MockUUID.fromString("4.-Q2e/3");
        MakeItFitDate        makeItFitDate0        = new MakeItFitDate();
        Trail                trail0 =
            new Trail(uUID0, makeItFitDate0, 115, "4.-Q2e/3", "4.-Q2e/3", 115, 115, 115, 115);
        professional0.addActivity(trail0);
        userManager0.insertUser(professional0);
        MakeItFitDate makeItFitDate1 = makeItFitDate0.plusDays((-1));
        MakeItFitDate makeItFitDate2 = makeItFitDate0.plusDays(115);
        double        double0        = howManyAltimetryDone0.executeQuery(userManager0,
                                                            "4.-Q2e/3",
                                                            makeItFitDate1,
                                                            makeItFitDate2);
        assertEquals(230.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        HowManyAltimetryDone howManyAltimetryDone0 = new HowManyAltimetryDone();
        UserManager          userManager0          = new UserManager();
        Gender               gender0               = Gender.Other;
        Professional         professional0         = new Professional("4.-Q2e/3",
                                                      115,
                                                      gender0,
                                                      115,
                                                      115,
                                                      115,
                                                      115,
                                                      "4.-Q2e/3",
                                                      "4.-Q2e/3",
                                                      "4.-Q2e/3",
                                                      115);
        UUID                 uUID0                 = MockUUID.fromString("4.-Q2e/3");
        MakeItFitDate        makeItFitDate0        = new MakeItFitDate();
        Trail                trail0 =
            new Trail(uUID0, makeItFitDate0, 115, "4.-Q2e/3", "4.-Q2e/3", 115, 115, 115, 115);
        professional0.addActivity(trail0);
        userManager0.insertUser(professional0);
        MakeItFitDate makeItFitDate1 = makeItFitDate0.plusDays((-1));
        double        double0        = howManyAltimetryDone0.executeQuery(userManager0,
                                                            "4.-Q2e/3",
                                                            makeItFitDate1,
                                                            makeItFitDate0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        HowManyAltimetryDone howManyAltimetryDone0 = new HowManyAltimetryDone();
        UserManager          userManager0          = new UserManager();
        Gender               gender0               = Gender.Other;
        Professional         professional0         = new Professional("4.-Q2e/3",
                                                      115,
                                                      gender0,
                                                      115,
                                                      115,
                                                      115,
                                                      115,
                                                      "4.-Q2e/3",
                                                      "4.-Q2e/3",
                                                      "4.-Q2e/3",
                                                      115);
        UUID                 uUID0                 = MockUUID.fromString("4.-Q2e/3");
        MakeItFitDate        makeItFitDate0        = new MakeItFitDate();
        Trail                trail0 =
            new Trail(uUID0, makeItFitDate0, 115, "4.-Q2e/3", "4.-Q2e/3", 115, 115, 115, 115);
        professional0.addActivity(trail0);
        userManager0.insertUser(professional0);
        MakeItFitDate makeItFitDate1 = makeItFitDate0.plusDays(115);
        double        double0        = howManyAltimetryDone0.executeQuery(userManager0,
                                                            "4.-Q2e/3",
                                                            makeItFitDate0,
                                                            makeItFitDate1);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        HowManyAltimetryDone howManyAltimetryDone0 = new HowManyAltimetryDone();
        UserManager          userManager0          = new UserManager();
        Gender               gender0               = Gender.Other;
        Professional         professional0 =
            new Professional("{Ug", 64, gender0, 64, 64, 64, 64, "{Ug", "{Ug", "{Ug", 64);
        UUID          uUID0          = MockUUID.fromString("{Ug");
        MakeItFitDate makeItFitDate0 = new MakeItFitDate();
        PushUp        pushUp0        = new PushUp(uUID0, makeItFitDate0, 64, "{Ug", "{Ug", 64, 64);
        professional0.addActivity(pushUp0);
        userManager0.insertUser(professional0);
        MakeItFitDate makeItFitDate1 = makeItFitDate0.plusDays((-1469));
        double        double0 =
            howManyAltimetryDone0.executeQuery(userManager0, "{Ug", makeItFitDate1, makeItFitDate0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        HowManyAltimetryDone howManyAltimetryDone0 = new HowManyAltimetryDone();
        UserManager          userManager0          = new UserManager();
        MakeItFitDate        makeItFitDate0        = new MakeItFitDate();
        MakeItFitDate        makeItFitDate1        = makeItFitDate0.plusDays((-1469));
        // Undeclared exception!
        try {
            howManyAltimetryDone0.executeQuery(userManager0, "{Ug", makeItFitDate1, makeItFitDate0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // User with email {ug does not exist.
            //
            verifyException("MakeItFit.users.UserManager", e);
        }
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        UserManager          userManager0          = new UserManager();
        HowManyAltimetryDone howManyAltimetryDone0 = new HowManyAltimetryDone();
        MakeItFitDate        makeItFitDate0        = new MakeItFitDate();
        // Undeclared exception!
        try {
            howManyAltimetryDone0.executeQuery(userManager0,
                                               "H4y^",
                                               makeItFitDate0,
                                               (MakeItFitDate) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid date.
            //
            verifyException("MakeItFit.queries.HowManyAltimetryDone", e);
        }
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        HowManyAltimetryDone howManyAltimetryDone0 = new HowManyAltimetryDone();
        UserManager          userManager0          = new UserManager();
        MakeItFitDate        makeItFitDate0        = new MakeItFitDate();
        // Undeclared exception!
        try {
            howManyAltimetryDone0.executeQuery(userManager0, "{Ug", makeItFitDate0, makeItFitDate0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid date.
            //
            verifyException("MakeItFit.queries.HowManyAltimetryDone", e);
        }
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        HowManyAltimetryDone howManyAltimetryDone0 = new HowManyAltimetryDone();
        UserManager          userManager0          = new UserManager();
        MakeItFitDate        makeItFitDate0        = new MakeItFitDate();
        // Undeclared exception!
        try {
            howManyAltimetryDone0.executeQuery(userManager0,
                                               "{Ug",
                                               (MakeItFitDate) null,
                                               makeItFitDate0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Invalid date.
            //
            verifyException("MakeItFit.queries.HowManyAltimetryDone", e);
        }
    }
}
